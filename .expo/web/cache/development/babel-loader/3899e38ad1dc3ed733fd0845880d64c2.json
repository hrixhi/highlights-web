{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\Subscribers.tsx\";\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Alert from \"../components/Alert\";\nimport { View } from \"./Themed\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { fetchAPI } from \"../graphql/FetchAPI\";\nimport { getGroups, getSubscribers } from \"../graphql/QueriesAndMutations\";\nimport SubscribersList from \"./SubscribersList\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nvar Subscribers = function Subscribers(props) {\n  var _useState = useState(new Animated.Value(1)),\n      _useState2 = _slicedToArray(_useState, 1),\n      modalAnimation = _useState2[0];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      subscribers = _useState6[0],\n      setSubscribers = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      groups = _useState8[0],\n      setGroups = _useState8[1];\n\n  var loadSubscribers = useCallback(function _callee() {\n    var u, server, user;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            u = _context.sent;\n            server = null;\n            user = {};\n\n            if (u) {\n              user = JSON.parse(u);\n              server = fetchAPI(user._id);\n            } else {\n              server = fetchAPI('');\n            }\n\n            setLoading(true);\n\n            if (props.channelId && props.channelId !== '') {\n              server.query({\n                query: getSubscribers,\n                variables: {\n                  channelId: props.channelId\n                }\n              }).then(function (res) {\n                if (res.data.user && res.data.user.findByChannelId) {\n                  var tempSubs = res.data.user.findByChannelId.filter(function (s) {\n                    if (props.channelCreatedBy === user._id) {\n                      return s._id !== user._id;\n                    } else {\n                      return s._id === props.channelCreatedBy;\n                    }\n                  });\n                  setSubscribers(tempSubs);\n                }\n\n                setLoading(false);\n                modalAnimation.setValue(0);\n                Animated.timing(modalAnimation, {\n                  toValue: 1,\n                  duration: 150,\n                  useNativeDriver: true\n                }).start();\n              }).catch(function (err) {\n                Alert(\"Unable to load subscribers.\", \"Check connection.\");\n                setLoading(false);\n                modalAnimation.setValue(0);\n                Animated.timing(modalAnimation, {\n                  toValue: 1,\n                  duration: 150,\n                  useNativeDriver: true\n                }).start();\n              });\n              server.query({\n                query: getGroups,\n                variables: {\n                  userId: user._id,\n                  channelId: props.channelId\n                }\n              }).then(function (res) {\n                if (res.data && res.data.group.getGroups) {\n                  setGroups(res.data.group.getGroups);\n                }\n              }).catch(function (err) {\n                console.log(err);\n              });\n            } else {\n              setLoading(false);\n              modalAnimation.setValue(0);\n              Animated.timing(modalAnimation, {\n                toValue: 1,\n                duration: 150,\n                useNativeDriver: true\n              }).start();\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [props.channelId, modalAnimation]);\n  useEffect(function () {\n    loadSubscribers();\n  }, [props.channelId]);\n  var windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\n  return React.createElement(ScrollView, {\n    style: {\n      width: '100%',\n      height: windowHeight,\n      backgroundColor: 'white',\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    showsVerticalScrollIndicator: false,\n    scrollEnabled: true,\n    scrollEventThrottle: 1,\n    keyboardDismissMode: 'on-drag',\n    overScrollMode: 'always',\n    nestedScrollEnabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      opacity: modalAnimation,\n      width: '100%',\n      height: windowHeight,\n      backgroundColor: 'white',\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, loading ? React.createElement(View, {\n    style: {\n      width: '100%',\n      flex: 1,\n      justifyContent: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 27\n    }\n  }, React.createElement(ActivityIndicator, {\n    color: '#a2a2aa',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  })) : React.createElement(SubscribersList, {\n    groups: groups,\n    channelCreatedBy: props.channelCreatedBy,\n    key: JSON.stringify(subscribers) + JSON.stringify(groups),\n    subscribers: subscribers,\n    cueId: null,\n    channelName: props.filterChoice,\n    channelId: props.channelId,\n    closeModal: function closeModal() {\n      Animated.timing(modalAnimation, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true\n      }).start(function () {\n        return props.closeModal();\n      });\n    },\n    reload: function reload() {\n      return loadSubscribers();\n    },\n    refreshUnreadMessagesCount: function refreshUnreadMessagesCount() {\n      return props.refreshUnreadMessagesCount();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }\n  })));\n};\n\nexport default Subscribers;","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/Subscribers.tsx"],"names":["React","useCallback","useEffect","useState","Alert","View","ScrollView","fetchAPI","getGroups","getSubscribers","SubscribersList","AsyncStorage","Subscribers","props","Animated","Value","modalAnimation","loading","setLoading","subscribers","setSubscribers","groups","setGroups","loadSubscribers","getItem","u","server","user","JSON","parse","_id","channelId","query","variables","then","res","data","findByChannelId","tempSubs","filter","s","channelCreatedBy","setValue","timing","toValue","duration","useNativeDriver","start","catch","err","userId","group","console","log","windowHeight","Dimensions","get","width","height","backgroundColor","borderTopRightRadius","borderTopLeftRadius","opacity","flex","justifyContent","display","flexDirection","stringify","filterChoice","closeModal","refreshUnreadMessagesCount"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { ActivityIndicator, Animated, Dimensions } from 'react-native';\r\nimport Alert from '../components/Alert'\r\nimport { View } from './Themed';\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport { fetchAPI } from '../graphql/FetchAPI';\r\nimport { getGroups, getSubscribers } from '../graphql/QueriesAndMutations';\r\nimport SubscribersList from './SubscribersList';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst Subscribers: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [modalAnimation] = useState(new Animated.Value(1))\r\n    const [loading, setLoading] = useState(true)\r\n    const [subscribers, setSubscribers] = useState<any[]>([])\r\n    const [groups, setGroups] = useState<any[]>([])\r\n\r\n    const loadSubscribers = useCallback(async () => {\r\n        const u = await AsyncStorage.getItem('user')\r\n        let server: any = null\r\n        let user: any = {}\r\n        if (u) {\r\n            user = JSON.parse(u)\r\n            server = fetchAPI(user._id)\r\n        } else {\r\n            server = fetchAPI('')\r\n        }\r\n        setLoading(true)\r\n        if (props.channelId && props.channelId !== '') {\r\n            server.query({\r\n                query: getSubscribers,\r\n                variables: {\r\n                    channelId: props.channelId\r\n                }\r\n            }).then((res: any) => {\r\n                if (res.data.user && res.data.user.findByChannelId) {\r\n                    const tempSubs = res.data.user.findByChannelId.filter((s: any) => {\r\n                        if (props.channelCreatedBy === user._id) {\r\n                            return s._id !== user._id\r\n                        } else {\r\n                            return s._id === props.channelCreatedBy\r\n                        }\r\n                    })\r\n                    setSubscribers(tempSubs)\r\n                }\r\n                setLoading(false)\r\n                modalAnimation.setValue(0)\r\n                Animated.timing(modalAnimation, {\r\n                    toValue: 1,\r\n                    duration: 150,\r\n                    useNativeDriver: true\r\n                }).start();\r\n            }).catch((err: any) => {\r\n                Alert(\"Unable to load subscribers.\", \"Check connection.\")\r\n                setLoading(false)\r\n                modalAnimation.setValue(0)\r\n                Animated.timing(modalAnimation, {\r\n                    toValue: 1,\r\n                    duration: 150,\r\n                    useNativeDriver: true\r\n                }).start();\r\n            })\r\n            server.query({\r\n                query: getGroups,\r\n                variables: {\r\n                    userId: user._id,\r\n                    channelId: props.channelId\r\n                }\r\n            }).then((res: any) => {\r\n                if (res.data && res.data.group.getGroups) {\r\n                    setGroups(res.data.group.getGroups)\r\n                }\r\n            }).catch((err: any) => {\r\n                console.log(err)\r\n            })\r\n\r\n        } else {\r\n            setLoading(false)\r\n            modalAnimation.setValue(0)\r\n            Animated.timing(modalAnimation, {\r\n                toValue: 1,\r\n                duration: 150,\r\n                useNativeDriver: true\r\n            }).start();\r\n        }\r\n    }, [props.channelId, modalAnimation])\r\n\r\n    useEffect(() => {\r\n        loadSubscribers()\r\n    }, [props.channelId])\r\n\r\n    const windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\r\n\r\n    return (\r\n        <ScrollView style={{\r\n            width: '100%',\r\n            height: windowHeight,\r\n            backgroundColor: 'white',\r\n            borderTopRightRadius: 0,\r\n            borderTopLeftRadius: 0\r\n        }}\r\n            showsVerticalScrollIndicator={false}\r\n            scrollEnabled={true}\r\n            scrollEventThrottle={1}\r\n            keyboardDismissMode={'on-drag'}\r\n            overScrollMode={'always'}\r\n            nestedScrollEnabled={true}\r\n        >\r\n            <Animated.View style={{\r\n                opacity: modalAnimation,\r\n                width: '100%',\r\n                height: windowHeight,\r\n                backgroundColor: 'white',\r\n                borderTopRightRadius: 0,\r\n                borderTopLeftRadius: 0\r\n            }}>\r\n                {\r\n                    loading\r\n                        ? <View style={{\r\n                            width: '100%',\r\n                            flex: 1,\r\n                            justifyContent: 'center',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            backgroundColor: 'white'\r\n                        }}>\r\n                            <ActivityIndicator color={'#a2a2aa'} />\r\n                        </View>\r\n                        :\r\n                        <SubscribersList\r\n                            groups={groups}\r\n                            channelCreatedBy={props.channelCreatedBy}\r\n                            key={JSON.stringify(subscribers) + JSON.stringify(groups)}\r\n                            subscribers={subscribers}\r\n                            cueId={null}\r\n                            channelName={props.filterChoice}\r\n                            channelId={props.channelId}\r\n                            closeModal={() => {\r\n                                Animated.timing(modalAnimation, {\r\n                                    toValue: 0,\r\n                                    duration: 150,\r\n                                    useNativeDriver: true\r\n                                }).start(() => props.closeModal())\r\n                            }}\r\n                            reload={() => loadSubscribers()}\r\n                            refreshUnreadMessagesCount={() => props.refreshUnreadMessagesCount()}\r\n                        />\r\n                }\r\n            </Animated.View>\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nexport default Subscribers"]},"metadata":{},"sourceType":"module"}