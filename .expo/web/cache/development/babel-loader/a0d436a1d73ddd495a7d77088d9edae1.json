{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\GradesList.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { View, Text, TouchableOpacity } from \"./Themed\";\nimport _ from 'lodash';\nimport { htmlStringParser } from \"../helpers/HTMLParser\";\nimport { PreferredLanguageText } from \"../helpers/LanguageContext\";\nimport XLSX from \"xlsx\";\nimport * as FileSaver from 'file-saver';\nimport { Chart } from \"react-google-charts\";\nimport { PieChart } from \"react-native-chart-kit\";\n\nvar GradesList = function GradesList(props) {\n  var unparsedScores = JSON.parse(JSON.stringify(props.scores));\n  var unparsedCues = JSON.parse(JSON.stringify(props.cues));\n  var unparsedSubmissionStatistics = JSON.parse(JSON.stringify(props.submissionStatistics));\n\n  var _useState = useState(unparsedScores),\n      _useState2 = _slicedToArray(_useState, 1),\n      scores = _useState2[0];\n\n  var _useState3 = useState(unparsedCues),\n      _useState4 = _slicedToArray(_useState3, 1),\n      cues = _useState4[0];\n\n  var _useState5 = useState(unparsedSubmissionStatistics),\n      _useState6 = _slicedToArray(_useState5, 1),\n      submissionStatistics = _useState6[0];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      exportAoa = _useState8[0],\n      setExportAoa = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showStatistics = _useState10[0],\n      setShowStatistics = _useState10[1];\n\n  useEffect(function () {\n    if (scores.length === 0 || cues.length === 0) {\n      return;\n    }\n\n    var exportAoa = [];\n    var row1 = [\"\"];\n    cues.forEach(function (cue) {\n      var _htmlStringParser = htmlStringParser(cue.cue),\n          title = _htmlStringParser.title;\n\n      row1.push(title + \" (\" + cue.gradeWeight + \"%)\");\n    });\n    row1.push(\"Total\");\n    exportAoa.push(row1);\n    scores.forEach(function (score) {\n      var totalPoints = 0;\n      var totalScore = 0;\n      score.scores.map(function (s) {\n        if (s.graded) {\n          totalPoints += Number(s.gradeWeight) * Number(s.score);\n          totalScore += Number(s.gradeWeight);\n        }\n      });\n      var userRow = [];\n      userRow.push(score.fullName);\n      cues.forEach(function (cue) {\n        var scoreObject = score.scores.find(function (s) {\n          return s.cueId.toString().trim() === cue._id.toString().trim();\n        });\n\n        if (scoreObject && scoreObject.graded) {\n          userRow.push(scoreObject.score);\n        } else {\n          userRow.push('-');\n        }\n      });\n      var pointsToAdd = totalScore !== 0 ? (totalPoints / totalScore).toFixed(2) + \"%\" : '0';\n      userRow.push(pointsToAdd);\n      exportAoa.push(userRow);\n    });\n    setExportAoa(exportAoa);\n  }, [scores, cues]);\n\n  var exportGrades = function exportGrades() {\n    var fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    var fileExtension = '.xlsx';\n    var ws = XLSX.utils.aoa_to_sheet(exportAoa);\n    var wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Grades \");\n    var excelBuffer = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    var data = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(data, \"grades\" + fileExtension);\n  };\n\n  var renderGradeStatsTabs = function renderGradeStatsTabs() {\n    return React.createElement(View, {\n      style: {\n        flexDirection: \"row\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: {\n        justifyContent: \"center\",\n        flexDirection: \"column\"\n      },\n      onPress: function onPress() {\n        setShowStatistics(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: !showStatistics ? styles.allGrayFill : styles.all,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, \"Scores\")), React.createElement(TouchableOpacity, {\n      style: {\n        justifyContent: \"center\",\n        flexDirection: \"column\"\n      },\n      onPress: function onPress() {\n        setShowStatistics(true);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: showStatistics ? styles.allGrayFill : styles.all,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, \"Statistics\")));\n  };\n\n  var screenWidth = Dimensions.get(\"window\").width;\n\n  var renderStatistics = function renderStatistics() {\n    var mapCuesData = {};\n    var mapCuesCounts = {};\n    var mapCuesStatistics = {};\n    cues.map(function (cue) {\n      var filteredStatistic = submissionStatistics.filter(function (stat) {\n        return stat.cueId === cue._id;\n      });\n      if (filteredStatistic.length === 0) return;\n      var _filteredStatistic$ = filteredStatistic[0],\n          min = _filteredStatistic$.min,\n          max = _filteredStatistic$.max,\n          mean = _filteredStatistic$.mean,\n          median = _filteredStatistic$.median,\n          std = _filteredStatistic$.std,\n          submissionCount = _filteredStatistic$.submissionCount;\n      mapCuesStatistics[cue._id] = filteredStatistic[0];\n      mapCuesData[cue._id] = [max, min, mean, median, std];\n      mapCuesCounts[cue._id] = submissionCount;\n    });\n    var statisticsLabels = [\"Max\", \"Min\", \"Mean\", \"Median\", \"Std Dev\"];\n\n    var randomColor = function randomColor() {\n      return ('#' + (Math.random() * 0xffffff << 0).toString(16) + '000000').slice(0, 7);\n    };\n\n    var colors = [\"#d91d56\", \"#ed7d22\", \"#f8d41f\", \"#b8d41f\", \"#53be6d\", \"#f95d6a\", \"#ff7c43\", \"#ffa600\"];\n    var nonZeroGradeWeight = cues.filter(function (cue) {\n      return cue.gradeWeight > 0;\n    });\n    var pieChartData = nonZeroGradeWeight.map(function (cue, index) {\n      var _htmlStringParser2 = htmlStringParser(cue.cue),\n          title = _htmlStringParser2.title;\n\n      var color = \"\";\n\n      if (index < colors.length) {\n        color = colors[index];\n      } else {\n        color = randomColor();\n      }\n\n      return {\n        gradeWeight: cue.gradeWeight,\n        name: title,\n        color: color,\n        legendFontColor: \"#7F7F7F\",\n        legendFontSize: 15\n      };\n    });\n    var data = [[\"\", \"Min\", \"Max\", \"Mean\", \"Median\", \"Standard Deviation\"]];\n    var chartData = submissionStatistics.map(function (stat) {\n      var cueId = stat.cueId,\n          min = stat.min,\n          max = stat.max,\n          mean = stat.mean,\n          median = stat.median,\n          std = stat.std;\n      var cue = cues.filter(function (cue) {\n        return cueId === cue._id;\n      });\n\n      var _htmlStringParser3 = htmlStringParser(cue[0].cue),\n          title = _htmlStringParser3.title;\n\n      var cueStats = [title, min, max, mean, median, std];\n      data.push(cueStats);\n    });\n    var chartConfig = {\n      backgroundColor: '#000000',\n      backgroundGradientFrom: '#1E2923',\n      backgroundGradientTo: '#08130D',\n      fontFamily: \"inter\",\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(26, 255, 146, \" + opacity + \")\";\n      },\n      style: {\n        borderRadius: 16\n      },\n      propsForLabels: {\n        fontFamily: 'overpass; Arial'\n      }\n    };\n    return React.createElement(View, {\n      style: {\n        width: '100%',\n        backgroundColor: 'white',\n        flex: 1,\n        paddingLeft: Dimensions.get(\"window\").width < 768 ? 0 : 50,\n        paddingTop: 30\n      },\n      key: JSON.stringify(scores),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: 'left',\n        fontSize: 13,\n        color: '#202025',\n        fontFamily: 'inter',\n        paddingBottom: 20,\n        paddingLeft: Dimensions.get('window').width < 768 ? 0 : 150\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, \"Grade Weightage\"), React.createElement(PieChart, {\n      data: pieChartData,\n      width: Dimensions.get('window').width < 768 ? 350 : 500,\n      height: Dimensions.get('window').width < 768 ? 150 : 200,\n      chartConfig: chartConfig,\n      accessor: \"gradeWeight\",\n      backgroundColor: \"transparent\",\n      paddingLeft: Dimensions.get('window').width < 768 ? \"10\" : \"50\",\n      hasLegend: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      style: {\n        textAlign: 'left',\n        fontSize: 13,\n        color: '#202025',\n        fontFamily: 'inter',\n        paddingTop: 50,\n        paddingBottom: 20,\n        paddingLeft: Dimensions.get('window').width < 768 ? 0 : 150\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }, \"Submissions\"), React.createElement(Chart, {\n      width: Dimensions.get('window').width < 768 ? '350px' : '600px',\n      height: Dimensions.get('window').width < 768 ? '300px' : '400px',\n      chartType: \"Bar\",\n      loader: React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }\n      }, \"Loading Chart\"),\n      data: data,\n      options: {\n        fontFamily: 'inter'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }), React.createElement(View, {\n      style: {\n        height: 20\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }\n    }));\n  };\n\n  return React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      width: '100%',\n      height: '100%',\n      paddingHorizontal: 20,\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      height: 15,\n      paddingBottom: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: {\n      backgroundColor: \"white\",\n      flexDirection: \"row\",\n      paddingBottom: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    ellipsizeMode: \"tail\",\n    style: {\n      fontSize: 11,\n      paddingBottom: 20,\n      textTransform: \"uppercase\",\n      flex: 1,\n      lineHeight: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 17\n    }\n  }, PreferredLanguageText(\"grades\")), scores.length === 0 || cues.length === 0 || !props.isOwner ? null : React.createElement(Text, {\n    style: {\n      color: \"#a2a2aa\",\n      fontSize: 11,\n      lineHeight: 25,\n      textAlign: \"right\",\n      textTransform: \"uppercase\"\n    },\n    onPress: function onPress() {\n      exportGrades();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 89\n    }\n  }, \"EXPORT\")), renderGradeStatsTabs(), scores.length === 0 || cues.length === 0 ? React.createElement(View, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      width: '100%',\n      color: '#a2a2aa',\n      fontSize: 22,\n      paddingTop: 100,\n      paddingHorizontal: 5,\n      fontFamily: 'inter'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 25\n    }\n  }, cues.length === 0 ? PreferredLanguageText('noGraded') : PreferredLanguageText('noStudents'))) : !showStatistics ? React.createElement(View, {\n    style: {\n      width: '100%',\n      backgroundColor: 'white',\n      flex: 1,\n      paddingTop: 30\n    },\n    key: JSON.stringify(scores),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 40\n    }\n  }, React.createElement(ScrollView, {\n    showsHorizontalScrollIndicator: false,\n    horizontal: true,\n    contentContainerStyle: {\n      height: '100%'\n    },\n    nestedScrollEnabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 25\n    }\n  }, React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    horizontal: false,\n    contentContainerStyle: {\n      height: '100%'\n    },\n    nestedScrollEnabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 29\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 33\n    }\n  }, React.createElement(View, {\n    style: styles.row,\n    key: \"-\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 37\n    }\n  }, React.createElement(View, {\n    style: styles.col,\n    key: '0,0',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 41\n    }\n  }), cues.map(function (cue, col) {\n    var _htmlStringParser4 = htmlStringParser(cue.cue),\n        title = _htmlStringParser4.title;\n\n    return React.createElement(TouchableOpacity, {\n      style: styles.col,\n      key: col.toString(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 56\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: 'center',\n        fontSize: 12,\n        color: '#202025',\n        fontFamily: 'inter'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 53\n      }\n    }, title), React.createElement(Text, {\n      style: {\n        textAlign: 'center',\n        fontSize: 12,\n        color: '#202025'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 53\n      }\n    }, cue.gradeWeight, \"%\"));\n  }), cues.length === 0 ? null : React.createElement(View, {\n    style: styles.col,\n    key: 'total',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 49\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      fontSize: 12,\n      color: '#202025',\n      fontFamily: 'inter'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 53\n    }\n  }, PreferredLanguageText('total')), React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      fontSize: 12,\n      color: '#202025'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 53\n    }\n  }, \"100%\"))), scores.map(function (score, row) {\n    var totalPoints = 0;\n    var totalScore = 0;\n    score.scores.map(function (s) {\n      if (s.graded) {\n        totalPoints += Number(s.gradeWeight) * Number(s.score);\n        totalScore += Number(s.gradeWeight);\n      }\n    });\n    return React.createElement(View, {\n      style: styles.row,\n      key: row,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 52\n      }\n    }, React.createElement(View, {\n      style: styles.col,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 49\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: 'left',\n        fontSize: 12,\n        color: '#202025',\n        fontFamily: 'inter'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 53\n      }\n    }, score.fullName)), cues.map(function (cue, col) {\n      var scoreObject = score.scores.find(function (s) {\n        return s.cueId.toString().trim() === cue._id.toString().trim();\n      });\n      return React.createElement(View, {\n        style: styles.col,\n        key: row.toString() + '-' + col.toString(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 64\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          fontSize: 12,\n          color: '#a2a2aa'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 61\n        }\n      }, scoreObject && scoreObject.graded ? scoreObject.score : '-'));\n    }), cues.length === 0 ? null : React.createElement(View, {\n      style: styles.col,\n      key: 'total',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 57\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: 'center',\n        fontSize: 12,\n        color: '#a2a2aa'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 61\n      }\n    }, totalScore !== 0 ? (totalPoints / totalScore).toFixed(2) : '0', \"%\")));\n  }))))) : renderStatistics());\n};\n\nexport default React.memo(GradesList, function (prev, next) {\n  return _.isEqual(prev.grades, next.grades);\n});\nvar styles = StyleSheet.create({\n  row: {\n    height: 70,\n    borderRadius: 15,\n    marginBottom: 15,\n    flexDirection: 'row',\n    overflow: 'hidden',\n    backgroundColor: '#f4f4f6'\n  },\n  col: {\n    width: 100,\n    justifyContent: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#f4f4f6',\n    padding: 7\n  },\n  allGrayFill: {\n    fontSize: 12,\n    color: \"#fff\",\n    paddingHorizontal: 10,\n    borderRadius: 10,\n    backgroundColor: \"#a2a2aa\",\n    lineHeight: 20\n  },\n  allGrayOutline: {\n    fontSize: 12,\n    color: \"#a2a2aa\",\n    height: 22,\n    paddingHorizontal: 10,\n    backgroundColor: \"white\",\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: \"#a2a2aa\",\n    lineHeight: 20\n  },\n  all: {\n    fontSize: 12,\n    color: \"#a2a2aa\",\n    height: 22,\n    paddingHorizontal: 10,\n    backgroundColor: \"white\",\n    lineHeight: 20\n  }\n});","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/GradesList.tsx"],"names":["React","useState","useEffect","View","Text","TouchableOpacity","_","htmlStringParser","PreferredLanguageText","XLSX","FileSaver","Chart","PieChart","GradesList","props","unparsedScores","JSON","parse","stringify","scores","unparsedCues","cues","unparsedSubmissionStatistics","submissionStatistics","exportAoa","setExportAoa","showStatistics","setShowStatistics","length","row1","forEach","cue","title","push","gradeWeight","score","totalPoints","totalScore","map","s","graded","Number","userRow","fullName","scoreObject","find","cueId","toString","trim","_id","pointsToAdd","toFixed","exportGrades","fileType","fileExtension","ws","utils","aoa_to_sheet","wb","book_new","book_append_sheet","excelBuffer","write","bookType","type","data","Blob","saveAs","renderGradeStatsTabs","flexDirection","justifyContent","styles","allGrayFill","all","screenWidth","Dimensions","get","width","renderStatistics","mapCuesData","mapCuesCounts","mapCuesStatistics","filteredStatistic","filter","stat","min","max","mean","median","std","submissionCount","statisticsLabels","randomColor","Math","random","slice","colors","nonZeroGradeWeight","pieChartData","index","color","name","legendFontColor","legendFontSize","chartData","cueStats","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","fontFamily","opacity","style","borderRadius","propsForLabels","flex","paddingLeft","paddingTop","textAlign","fontSize","paddingBottom","height","paddingHorizontal","borderTopRightRadius","borderTopLeftRadius","textTransform","lineHeight","isOwner","row","col","memo","prev","next","isEqual","grades","StyleSheet","create","marginBottom","overflow","display","padding","allGrayOutline","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, ScrollView, Dimensions } from 'react-native';\r\nimport { View, Text, TouchableOpacity } from './Themed';\r\nimport _ from 'lodash'\r\nimport { htmlStringParser } from '../helpers/HTMLParser';\r\nimport { PreferredLanguageText } from '../helpers/LanguageContext';\r\nimport XLSX from \"xlsx\"\r\nimport * as FileSaver from 'file-saver';\r\n// import { PieChart } from 'react-native-svg-charts'\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n\r\nimport {\r\n    LineChart,\r\n    BarChart,\r\n    PieChart\r\n  } from \"react-native-chart-kit\";\r\n\r\nconst GradesList: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const unparsedScores: any[] = JSON.parse(JSON.stringify(props.scores))\r\n    const unparsedCues: any[] = JSON.parse(JSON.stringify(props.cues))\r\n    const unparsedSubmissionStatistics: any[] = JSON.parse(JSON.stringify(props.submissionStatistics))\r\n    const [scores] = useState<any[]>(unparsedScores)\r\n    const [cues] = useState<any[]>(unparsedCues)\r\n    const [submissionStatistics] = useState<any[]>(unparsedSubmissionStatistics)\r\n    const [exportAoa, setExportAoa] = useState<any[]>()\r\n\r\n    // Statistics\r\n    const [showStatistics, setShowStatistics] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        if (scores.length === 0 || cues.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const exportAoa = [];\r\n\r\n        // Add row 1 with past meetings and total\r\n        let row1 = [\"\"];\r\n\r\n        cues.forEach(cue => {\r\n\r\n            const { title } = htmlStringParser(cue.cue)\r\n\r\n            row1.push(`${title} (${cue.gradeWeight}%)`)\r\n        })\r\n\r\n        row1.push(\"Total\")\r\n\r\n        exportAoa.push(row1);\r\n\r\n        scores.forEach((score: any) => {\r\n\r\n            let totalPoints = 0;\r\n            let totalScore = 0;\r\n            score.scores.map((s: any) => {\r\n                if (s.graded) {\r\n                    totalPoints += (Number(s.gradeWeight) * Number(s.score))\r\n                    totalScore += Number(s.gradeWeight)\r\n                }\r\n            })\r\n\r\n            let userRow = [];\r\n\r\n            userRow.push(score.fullName)\r\n\r\n            cues.forEach(cue => {\r\n\r\n                const scoreObject = score.scores.find((s: any) => {\r\n                    return s.cueId.toString().trim() === cue._id.toString().trim()\r\n                })\r\n\r\n                if (scoreObject && scoreObject.graded) {\r\n                    userRow.push(scoreObject.score)\r\n                } else {\r\n                    userRow.push('-')\r\n                }\r\n\r\n            })\r\n\r\n            const pointsToAdd = totalScore !== 0 ? (totalPoints / totalScore).toFixed(2) + \"%\" : '0'\r\n            // Add Total here\r\n            userRow.push(pointsToAdd)\r\n\r\n            exportAoa.push(userRow)\r\n        \r\n        })\r\n\r\n        setExportAoa(exportAoa)\r\n\r\n       \r\n    }, [scores, cues])\r\n\r\n    const exportGrades = () => {\r\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n\r\n        const ws = XLSX.utils.aoa_to_sheet(exportAoa);\r\n\t\tconst wb = XLSX.utils.book_new();\r\n\t\tXLSX.utils.book_append_sheet(wb, ws, \"Grades \");\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], {type: fileType});\r\n        FileSaver.saveAs(data, \"grades\" + fileExtension);\r\n\r\n    }\r\n\r\n    const renderGradeStatsTabs = () => {\r\n        return (<View style={{ flexDirection: \"row\" }}>\r\n            <TouchableOpacity\r\n                style={{\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"column\"\r\n                }}\r\n                onPress={() => {\r\n                    setShowStatistics(false);\r\n                }}>\r\n                <Text style={!showStatistics ? styles.allGrayFill : styles.all}>\r\n                    Scores \r\n                </Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity\r\n                style={{\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"column\"\r\n                }}\r\n                onPress={() => {\r\n                    setShowStatistics(true);\r\n                }}>\r\n                <Text style={showStatistics ? styles.allGrayFill : styles.all}>Statistics</Text>\r\n            </TouchableOpacity>\r\n    </View>)\r\n    }\r\n\r\n    const screenWidth = Dimensions.get(\"window\").width;\r\n\r\n    const renderStatistics = () => {\r\n        \r\n\r\n        const mapCuesData: any = {};\r\n\r\n        const mapCuesCounts: any = {};\r\n\r\n        const mapCuesStatistics: any = {};\r\n\r\n\r\n        cues.map((cue: any) => {\r\n\r\n            const filteredStatistic = submissionStatistics.filter((stat: any) => stat.cueId === cue._id)\r\n\r\n            if (filteredStatistic.length === 0) return;\r\n\r\n            const { min, max, mean, median, std, submissionCount } = filteredStatistic[0];\r\n\r\n            mapCuesStatistics[cue._id] = filteredStatistic[0]\r\n            mapCuesData[cue._id] = [max, min, mean, median, std]\r\n            mapCuesCounts[cue._id] = submissionCount\r\n\r\n        })\r\n\r\n\r\n        const statisticsLabels = [\"Max\", \"Min\", \"Mean\", \"Median\", \"Std Dev\"]\r\n\r\n\r\n        const randomColor = () => ('#' + ((Math.random() * 0xffffff) << 0).toString(16) + '000000').slice(0, 7)\r\n\r\n        // PIE CHART FOR GRADE WEIGHTS\r\n\r\n        // ADD MORE COLORS HERE LATER\r\n        const colors = [\"#d91d56\", \"#ed7d22\", \"#f8d41f\", \"#b8d41f\", \"#53be6d\", \"#f95d6a\", \"#ff7c43\", \"#ffa600\"]\r\n\r\n        const nonZeroGradeWeight = cues.filter((cue: any) => cue.gradeWeight > 0)\r\n\r\n        const pieChartData = nonZeroGradeWeight.map((cue: any, index: number) => {\r\n\r\n            const { title } = htmlStringParser(cue.cue)\r\n\r\n            let color = \"\";\r\n\r\n            if (index < colors.length) {\r\n                color = colors[index]\r\n            } else {\r\n                // Fallack\r\n                color = randomColor()\r\n            }\r\n\r\n            return {\r\n                gradeWeight: cue.gradeWeight,\r\n                name: title,\r\n                color,\r\n                legendFontColor: \"#7F7F7F\",\r\n                legendFontSize: 15,\r\n                \r\n            }\r\n        })\r\n\r\n        const data = [[\"\", \"Min\", \"Max\", \"Mean\", \"Median\", \"Standard Deviation\"]];\r\n\r\n        const chartData = submissionStatistics.map((stat: any) => {\r\n            const { cueId, min, max, mean, median, std } = stat;\r\n            \r\n            const cue = cues.filter((cue: any) => {\r\n                return cueId === cue._id\r\n            })\r\n\r\n            const { title } = htmlStringParser(cue[0].cue);\r\n\r\n            let cueStats = [title, min, max, mean, median, std];\r\n\r\n            data.push(cueStats)\r\n        })\r\n\r\n        const chartConfig = {\r\n            backgroundColor: '#000000',\r\n            backgroundGradientFrom: '#1E2923',\r\n            backgroundGradientTo: '#08130D',\r\n            fontFamily: \"inter\",\r\n            color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\r\n            style: {\r\n              borderRadius: 16,\r\n            },\r\n            propsForLabels:{\r\n                fontFamily:'overpass; Arial',\r\n            },\r\n          }\r\n\r\n\r\n        return (<View style={{\r\n            width: '100%',\r\n            backgroundColor: 'white',\r\n            flex: 1,\r\n            paddingLeft: Dimensions.get(\"window\").width < 768 ? 0 : 50,\r\n            paddingTop: 30\r\n        }}\r\n            key={JSON.stringify(scores)}\r\n        >\r\n            <Text style={{ textAlign: 'left', fontSize: 13, color: '#202025', fontFamily: 'inter', paddingBottom: 20, paddingLeft: Dimensions.get('window').width < 768 ? 0 : 150}}>\r\n                Grade Weightage \r\n            </Text> \r\n            <PieChart\r\n            data={pieChartData}\r\n            width={Dimensions.get('window').width < 768 ? 350 : 500}\r\n            height={Dimensions.get('window').width < 768 ? 150 : 200}\r\n            chartConfig={chartConfig}\r\n            accessor={\"gradeWeight\"}\r\n            backgroundColor={\"transparent\"}\r\n            paddingLeft={Dimensions.get('window').width < 768 ? \"10\" : \"50\"}\r\n            // center={[10, 50]}\r\n            hasLegend={true}\r\n            />\r\n\r\n\r\n            <Text style={{ textAlign: 'left', fontSize: 13, color: '#202025', fontFamily: 'inter', paddingTop: 50, paddingBottom: 20, paddingLeft: Dimensions.get('window').width < 768 ? 0 : 150}}>\r\n                Submissions\r\n            </Text> \r\n\r\n            {/* <ScrollView\r\n                            showsHorizontalScrollIndicator={false}\r\n                            horizontal={true}\r\n                            contentContainerStyle={{\r\n                                height: '100%'\r\n                            }}\r\n                            nestedScrollEnabled={true}\r\n                        > */}\r\n            <Chart\r\n                width={Dimensions.get('window').width < 768 ? '350px' : '600px'}\r\n                height={Dimensions.get('window').width < 768 ? '300px' : '400px'}\r\n                chartType=\"Bar\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={data}\r\n                options={{\r\n                    // Material design options\r\n                    fontFamily: 'inter'\r\n                }}\r\n            />\r\n            {/* </ScrollView> */}\r\n\r\n            <View style={{ height: 20 }} />\r\n            {/* {Object.keys(mapCuesData).map((cueId: any) => {\r\n            \r\n                // Get name of cue from id\r\n\r\n                \r\n                const filteredCue = cues.filter((cue: any) => cue._id === cueId); \r\n\r\n                const { title } = htmlStringParser(filteredCue[0].cue)\r\n\r\n                const data = {\r\n                    labels: statisticsLabels,\r\n                    datasets: [\r\n                      {\r\n                        data: mapCuesData[cueId],\r\n                        color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`, // optional\r\n                        strokeWidth: 2 // optional\r\n                      }\r\n                    ],\r\n                    // legend: [\"Rainy Days\"] // optional\r\n                  };\r\n\r\n                  const chartConfig = {\r\n                    backgroundGradientFrom: '#Ffffff',\r\n                    backgroundGradientTo: '#ffffff',\r\n                    barPercentage: 1.3,\r\n                    decimalPlaces: 0, // optional, defaults to 2dp\r\n                    color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`,\r\n                    labelColor: (opacity = 1) => `rgba(0, 0, 0, 1)`,\r\n                    propsForDots: {\r\n                        r: \"6\",\r\n                        strokeWidth: \"2\",\r\n                        stroke: \"#fff\",\r\n                    },\r\n                    style: {\r\n                      borderRadius: 16,\r\n                      fontFamily: 'Bogle-Regular',\r\n                    },\r\n                    propsForBackgroundLines: {\r\n                      strokeWidth: '0',\r\n                      stroke: '#fff',\r\n                      strokeDasharray: '0',\r\n                    },\r\n                    propsForLabels: {\r\n                      fontFamily: 'Bogle-Regular',\r\n                    },\r\n                  };\r\n\r\n                return (<View style={{ flexDirection: 'column', alignItems: 'center', paddingTop :30, width: Dimensions.get(\"window\").width < 768 ? \"100%\" : 400}}>\r\n                    <Text style={{ textAlign: 'left', fontSize: 13, color: '#202025', fontFamily: 'inter', paddingBottom: 20,}}>\r\n                        {title}\r\n                    </Text>\r\n\r\n                    <View style={{ flexDirection: 'row',  paddingBottom: 20}}>\r\n                    <Text style={{ textAlign: 'left', fontSize: 12, color: '#a2a2aa', fontFamily: 'inter', marginRight: 10 }}>\r\n                            Max: {mapCuesStatistics[cueId].max}%\r\n                        </Text>\r\n                        <Text style={{ textAlign: 'left', fontSize: 12, color: '#a2a2aa', fontFamily: 'inter', marginRight: 10 }}>\r\n                            Min: {mapCuesStatistics[cueId].min}%\r\n                        </Text>\r\n                        <Text style={{ textAlign: 'left', fontSize: 12, color: '#a2a2aa', fontFamily: 'inter', marginRight: 10 }}>\r\n                            Mean: {mapCuesStatistics[cueId].mean}%\r\n                        </Text>\r\n                        <Text style={{ textAlign: 'left', fontSize: 12, color: '#a2a2aa', fontFamily: 'inter', marginRight: 10 }}>\r\n                            Median: {mapCuesStatistics[cueId].median}%\r\n                        </Text>\r\n                        <Text style={{ textAlign: 'left', fontSize: 12, color: '#a2a2aa', fontFamily: 'inter', marginRight: 10 }}>\r\n                            Std Dev: {mapCuesStatistics[cueId].std}%\r\n                        </Text>\r\n                    </View>\r\n                    \r\n\r\n                    <LineChart \r\n                        data={data}\r\n                        width={Dimensions.get(\"window\").width < 768 ? 300 : 400 }\r\n                        height={300}\r\n                        // chartConfig={chartConfig}\r\n                        chartConfig={{\r\n                            backgroundGradientFrom: \"#fff\",\r\n                            backgroundGradientFromOpacity: 0,\r\n                            backgroundGradientTo: \"#fff\",\r\n                            backgroundGradientToOpacity: 0,\r\n                            color: (opacity = 1) => `rgba(1, 122, 205, 1)`,\r\n                            labelColor: (opacity = 1) => `rgba(0, 0, 0, 1)`,\r\n                            strokeWidth: 2, // optional, default 3\r\n                            barPercentage: 0.5,\r\n                            useShadowColorFromDataset: false, // optional\r\n                            propsForBackgroundLines: {\r\n                                strokeWidth: 1,\r\n                                stroke: '#efefef',\r\n                                strokeDasharray: '0',\r\n                              },\r\n                          }}\r\n                    />\r\n                </View>)\r\n            })\r\n        }         */}\r\n        </View>)\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <View style={{\r\n            backgroundColor: 'white',\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingHorizontal: 20,\r\n            borderTopRightRadius: 0,\r\n            borderTopLeftRadius: 0\r\n        }}>\r\n            <Text style={{ width: '100%', textAlign: 'center', height: 15, paddingBottom: 25 }}>\r\n                {/* <Ionicons name='chevron-down' size={20} color={'#e0e0e0'} /> */}\r\n            </Text>\r\n            <View style={{ backgroundColor: \"white\", flexDirection: \"row\", paddingBottom: 25 }}>\r\n                <Text\r\n                    ellipsizeMode=\"tail\"\r\n                    style={{\r\n                        fontSize: 11,\r\n                        paddingBottom: 20,\r\n                        textTransform: \"uppercase\",\r\n                        // paddingLeft: 20,\r\n                        flex: 1,\r\n                        lineHeight: 25\r\n                    }}>\r\n                    {PreferredLanguageText(\"grades\")}\r\n                </Text>\r\n                {(scores.length === 0 || cues.length === 0 || !props.isOwner) ?  null : <Text\r\n                    style={{\r\n                        color: \"#a2a2aa\",\r\n                        fontSize: 11,\r\n                        lineHeight: 25,\r\n                        // paddingTop: 5,\r\n                        textAlign: \"right\",\r\n                        // paddingRight: 20,\r\n                        textTransform: \"uppercase\"\r\n                    }}\r\n                    onPress={() => {\r\n                        exportGrades()\r\n                    }}>\r\n                    EXPORT\r\n                </Text>}\r\n            </View>\r\n\r\n            {renderGradeStatsTabs()}\r\n\r\n            {/* {scores.length === 0 || cues.length === 0 ?  null : \r\n                                    <View style={{ display: 'flex', flexDirection: 'row', marginVertical: 25 }}>\r\n                                        <TouchableOpacity\r\n                                                        onPress={async () => {\r\n                                                            exportGrades()\r\n                                                        }}\r\n                                                        style={{\r\n                                                            borderRadius: 15,\r\n                                                            backgroundColor: 'white'\r\n                                                        }}>\r\n                                                        {\r\n                                                        \r\n                                                                <Text style={{\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: 35,\r\n                                                                    color: 'white',\r\n                                                                    fontSize: 12,\r\n                                                                    backgroundColor: '#3B64F8',\r\n                                                                    borderRadius: 15,\r\n                                                                    paddingHorizontal: 25,\r\n                                                                    fontFamily: 'inter',\r\n                                                                    overflow: 'hidden',\r\n                                                                    height: 35,\r\n                                                                    textTransform: 'uppercase'\r\n                                                                }}>\r\n                                                                    EXPORT\r\n                                                            </Text> \r\n                                                        }\r\n                                        </TouchableOpacity>\r\n                                    </View>\r\n                                } */}\r\n            {\r\n                scores.length === 0 || cues.length === 0 ?\r\n                    <View style={{ backgroundColor: 'white' }}>\r\n                        <Text style={{ width: '100%', color: '#a2a2aa', fontSize: 22, paddingTop: 100, paddingHorizontal: 5, fontFamily: 'inter' }}>\r\n                            {\r\n                                cues.length === 0 ? PreferredLanguageText('noGraded') : PreferredLanguageText('noStudents')\r\n                            }\r\n                        </Text>\r\n                    </View>\r\n                    :\r\n                    (!showStatistics ? <View style={{\r\n                        width: '100%',\r\n                        backgroundColor: 'white',\r\n                        flex: 1,\r\n                        paddingTop: 30\r\n                    }}\r\n                        key={JSON.stringify(scores)}\r\n                    >\r\n                        <ScrollView\r\n                            showsHorizontalScrollIndicator={false}\r\n                            horizontal={true}\r\n                            contentContainerStyle={{\r\n                                height: '100%'\r\n                            }}\r\n                            nestedScrollEnabled={true}\r\n                        >\r\n                            <ScrollView\r\n                                showsVerticalScrollIndicator={false}\r\n                                horizontal={false}\r\n                                contentContainerStyle={{\r\n                                    height: '100%'\r\n                                }}\r\n                                nestedScrollEnabled={true}\r\n                            >\r\n                                <View>\r\n                            \r\n                                    <View style={styles.row} key={\"-\"}>\r\n                                        <View style={styles.col} key={'0,0'} />\r\n                                        {\r\n                                            cues.map((cue: any, col: number) => {\r\n                                                const { title } = htmlStringParser(cue.cue)\r\n                                                return <TouchableOpacity style={styles.col} key={col.toString()}>\r\n                                                    <Text style={{ textAlign: 'center', fontSize: 12, color: '#202025', fontFamily: 'inter' }}>\r\n                                                        {title}\r\n                                                    </Text>\r\n                                                    <Text style={{ textAlign: 'center', fontSize: 12, color: '#202025' }}>\r\n                                                        {cue.gradeWeight}%\r\n                                                    </Text>\r\n                                                </TouchableOpacity>\r\n                                            })\r\n                                        }\r\n                                        {\r\n                                            cues.length === 0 ? null :\r\n                                                <View style={styles.col} key={'total'}>\r\n                                                    <Text style={{ textAlign: 'center', fontSize: 12, color: '#202025', fontFamily: 'inter' }}>\r\n                                                        {PreferredLanguageText('total')}\r\n                                                    </Text>\r\n                                                    <Text style={{ textAlign: 'center', fontSize: 12, color: '#202025' }}>\r\n                                                        100%\r\n                                                    </Text>\r\n                                                </View>\r\n                                        }\r\n                                    </View>\r\n                                    {\r\n                                        scores.map((score: any, row: number) => {\r\n\r\n                                            let totalPoints = 0;\r\n                                            let totalScore = 0;\r\n                                            score.scores.map((s: any) => {\r\n                                                if (s.graded) {\r\n                                                    totalPoints += (Number(s.gradeWeight) * Number(s.score))\r\n                                                    totalScore += Number(s.gradeWeight)\r\n                                                }\r\n                                            })\r\n\r\n                                            return <View style={styles.row} key={row}>\r\n                                                <View style={styles.col} >\r\n                                                    <Text style={{ textAlign: 'left', fontSize: 12, color: '#202025', fontFamily: 'inter' }}>\r\n                                                        {score.fullName}\r\n                                                    </Text>\r\n                                                    {/* <Text style={{ textAlign: 'left', fontSize: 12, color: '#202025' }}>\r\n                                                        {score.displayName}\r\n                                                    </Text> */}\r\n                                                </View>\r\n                                                {\r\n                                                    cues.map((cue: any, col: number) => {\r\n                                                        const scoreObject = score.scores.find((s: any) => {\r\n                                                            return s.cueId.toString().trim() === cue._id.toString().trim()\r\n                                                        })\r\n                                                        return <View style={styles.col} key={row.toString() + '-' + col.toString()}>\r\n                                                            <Text style={{ textAlign: 'center', fontSize: 12, color: '#a2a2aa' }}>\r\n                                                                {\r\n                                                                    scoreObject && scoreObject.graded ? scoreObject.score : '-'\r\n                                                                }\r\n                                                            </Text>\r\n                                                        </View>\r\n                                                    })\r\n                                                }\r\n                                                {\r\n                                                    cues.length === 0 ? null :\r\n                                                        <View style={styles.col} key={'total'}>\r\n                                                            <Text style={{ textAlign: 'center', fontSize: 12, color: '#a2a2aa' }}>\r\n                                                                {totalScore !== 0 ? (totalPoints / totalScore).toFixed(2) : '0'}%\r\n                                                            </Text>\r\n                                                        </View>\r\n                                                }\r\n                                            </View>\r\n                                        })\r\n                                    }\r\n                                </View>\r\n                            </ScrollView>\r\n                        </ScrollView>\r\n                    </View>:\r\n                    renderStatistics()\r\n                    )\r\n            }\r\n        </View >\r\n    );\r\n}\r\n\r\nexport default React.memo(GradesList, (prev, next) => {\r\n    return _.isEqual(prev.grades, next.grades)\r\n})\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    row: { height: 70, borderRadius: 15, marginBottom: 15, flexDirection: 'row', overflow: 'hidden', backgroundColor: '#f4f4f6', },\r\n    col: { width: 100, justifyContent: 'center', display: 'flex', flexDirection: 'column', backgroundColor: '#f4f4f6', padding: 7 },\r\n    allGrayFill: {\r\n        fontSize: 12,\r\n        color: \"#fff\",\r\n        paddingHorizontal: 10,\r\n        borderRadius: 10,\r\n        backgroundColor: \"#a2a2aa\",\r\n        lineHeight: 20\r\n    },\r\n    allGrayOutline: {\r\n        fontSize: 12,\r\n        color: \"#a2a2aa\",\r\n        height: 22,\r\n        paddingHorizontal: 10,\r\n        backgroundColor: \"white\",\r\n        borderRadius: 10,\r\n        borderWidth: 1,\r\n        borderColor: \"#a2a2aa\",\r\n        lineHeight: 20\r\n    },\r\n    all: {\r\n        fontSize: 12,\r\n        color: \"#a2a2aa\",\r\n        height: 22,\r\n        paddingHorizontal: 10,\r\n        backgroundColor: \"white\",\r\n        lineHeight: 20\r\n    },\r\n})\r\n"]},"metadata":{},"sourceType":"module"}