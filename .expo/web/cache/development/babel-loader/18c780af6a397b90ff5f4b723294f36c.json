{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\Grades.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Alert from \"../components/Alert\";\nimport { View } from \"./Themed\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { fetchAPI } from \"../graphql/FetchAPI\";\nimport { getGrades, getGradesList, getSubmissionStatistics } from \"../graphql/QueriesAndMutations\";\nimport GradesList from \"./GradesList\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { PreferredLanguageText } from \"../helpers/LanguageContext\";\n\nvar Grades = function Grades(props) {\n  var _useState = useState(new Animated.Value(1)),\n      _useState2 = _slicedToArray(_useState, 1),\n      modalAnimation = _useState2[0];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cues = _useState6[0],\n      setCues = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      scores = _useState8[0],\n      setScores = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      submissionStatistics = _useState10[0],\n      setSubmissionStatistics = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isOwner = _useState12[0],\n      setIsOwner = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      viewStatisticsCue = _useState14[0],\n      setViewStatisticsCue = _useState14[1];\n\n  var couldNotLoadSubscribersAlert = PreferredLanguageText('couldNotLoadSubscribers');\n  var checkConnectionAlert = PreferredLanguageText('checkConnection');\n  useEffect(function () {\n    (function _callee() {\n      var u, user;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"user\"));\n\n            case 2:\n              u = _context.sent;\n\n              if (u) {\n                user = JSON.parse(u);\n\n                if (user._id.toString().trim() === props.channelCreatedBy) {\n                  setIsOwner(true);\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [props.channelCreatedBy, props.channelId]);\n  var loadCuesAndScores = useCallback(function () {\n    setLoading(true);\n\n    if (props.channelId && props.channelId !== '') {\n      var server = fetchAPI('');\n      server.query({\n        query: getGrades,\n        variables: {\n          channelId: props.channelId\n        }\n      }).then(function (res) {\n        if (res.data.channel && res.data.channel.getSubmissionCues) {\n          setCues(res.data.channel.getSubmissionCues);\n          server.query({\n            query: getGradesList,\n            variables: {\n              channelId: props.channelId\n            }\n          }).then(function _callee2(res2) {\n            var u, user, score, singleScoreArray;\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (!res2.data.channel.getGrades) {\n                      _context2.next = 8;\n                      break;\n                    }\n\n                    _context2.next = 3;\n                    return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n                  case 3:\n                    u = _context2.sent;\n\n                    if (u) {\n                      user = JSON.parse(u);\n\n                      if (user._id.toString().trim() === props.channelCreatedBy.toString().trim()) {\n                        setScores(res2.data.channel.getGrades);\n                      } else {\n                        score = res2.data.channel.getGrades.find(function (u) {\n                          return u.userId.toString().trim() === user._id.toString().trim();\n                        });\n                        singleScoreArray = [_objectSpread({}, score)];\n                        setScores(singleScoreArray);\n                      }\n                    }\n\n                    setLoading(false);\n                    modalAnimation.setValue(0);\n                    Animated.timing(modalAnimation, {\n                      toValue: 1,\n                      duration: 150,\n                      useNativeDriver: true\n                    }).start();\n\n                  case 8:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }).catch(function (err) {\n            Alert(couldNotLoadSubscribersAlert, checkConnectionAlert);\n            setLoading(false);\n            modalAnimation.setValue(0);\n            Animated.timing(modalAnimation, {\n              toValue: 1,\n              duration: 150,\n              useNativeDriver: true\n            }).start();\n          });\n        } else {\n          setLoading(false);\n          modalAnimation.setValue(0);\n          Animated.timing(modalAnimation, {\n            toValue: 1,\n            duration: 150,\n            useNativeDriver: true\n          }).start();\n        }\n      }).catch(function (err) {\n        Alert(couldNotLoadSubscribersAlert, checkConnectionAlert);\n        setLoading(false);\n        modalAnimation.setValue(0);\n        Animated.timing(modalAnimation, {\n          toValue: 1,\n          duration: 150,\n          useNativeDriver: true\n        }).start();\n      });\n    } else {\n      setLoading(false);\n      modalAnimation.setValue(0);\n      Animated.timing(modalAnimation, {\n        toValue: 1,\n        duration: 150,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [props.channelId, modalAnimation, props.channelCreatedBy]);\n  var loadSubmissionStatistics = useCallback(function () {\n    if (props.channelId && props.channelId !== '') {\n      var server = fetchAPI('');\n      server.query({\n        query: getSubmissionStatistics,\n        variables: {\n          channelId: props.channelId\n        }\n      }).then(function (res) {\n        if (res.data.channel && res.data.channel.getSubmissionCuesStatistics) {\n          setSubmissionStatistics(res.data.channel.getSubmissionCuesStatistics);\n        }\n      });\n    }\n  }, [props.channelId, modalAnimation, props.channelCreatedBy]);\n  useEffect(function () {\n    loadCuesAndScores();\n    loadSubmissionStatistics();\n  }, [props.channelId]);\n  var windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\n  return React.createElement(ScrollView, {\n    style: {\n      width: '100%',\n      height: windowHeight,\n      backgroundColor: 'white',\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    showsVerticalScrollIndicator: false,\n    scrollEnabled: true,\n    scrollEventThrottle: 1,\n    keyboardDismissMode: 'on-drag',\n    overScrollMode: 'always',\n    nestedScrollEnabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      opacity: modalAnimation,\n      width: '100%',\n      height: windowHeight,\n      backgroundColor: 'white',\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, loading ? React.createElement(View, {\n    style: {\n      width: '100%',\n      flex: 1,\n      justifyContent: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: 'white',\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 27\n    }\n  }, React.createElement(ActivityIndicator, {\n    color: '#a2a2aa',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 29\n    }\n  })) : React.createElement(GradesList, {\n    key: JSON.stringify(scores),\n    scores: scores,\n    cues: cues,\n    channelName: props.filterChoice,\n    isOwner: isOwner,\n    channelId: props.channelId,\n    closeModal: function closeModal() {\n      Animated.timing(modalAnimation, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true\n      }).start(function () {\n        return props.closeModal();\n      });\n    },\n    reload: function reload() {\n      return loadCuesAndScores();\n    },\n    submissionStatistics: submissionStatistics,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 25\n    }\n  })));\n};\n\nexport default Grades;","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/Grades.tsx"],"names":["React","useCallback","useEffect","useState","Alert","View","ScrollView","fetchAPI","getGrades","getGradesList","getSubmissionStatistics","GradesList","AsyncStorage","PreferredLanguageText","Grades","props","Animated","Value","modalAnimation","loading","setLoading","cues","setCues","scores","setScores","submissionStatistics","setSubmissionStatistics","isOwner","setIsOwner","viewStatisticsCue","setViewStatisticsCue","couldNotLoadSubscribersAlert","checkConnectionAlert","getItem","u","user","JSON","parse","_id","toString","trim","channelCreatedBy","channelId","loadCuesAndScores","server","query","variables","then","res","data","channel","getSubmissionCues","res2","score","find","userId","singleScoreArray","setValue","timing","toValue","duration","useNativeDriver","start","catch","err","loadSubmissionStatistics","getSubmissionCuesStatistics","windowHeight","Dimensions","get","width","height","backgroundColor","borderTopRightRadius","borderTopLeftRadius","opacity","flex","justifyContent","display","flexDirection","stringify","filterChoice","closeModal"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { ActivityIndicator, Animated, Dimensions } from 'react-native';\r\nimport Alert from '../components/Alert'\r\nimport { View, Text, TouchableOpacity } from './Themed';\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport { fetchAPI } from '../graphql/FetchAPI';\r\nimport { getGrades, getGradesList, getSubmissionStatistics } from '../graphql/QueriesAndMutations';\r\nimport GradesList from './GradesList';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { PreferredLanguageText } from '../helpers/LanguageContext';\r\nimport { htmlStringParser } from '../helpers/HTMLParser';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\n\r\nconst Grades: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [modalAnimation] = useState(new Animated.Value(1))\r\n    const [loading, setLoading] = useState(true)\r\n    const [cues, setCues] = useState<any[]>([])\r\n    const [scores, setScores] = useState<any[]>([])\r\n    const [submissionStatistics, setSubmissionStatistics] = useState<any[]>([])\r\n    const [isOwner, setIsOwner] = useState(false);\r\n    const [viewStatisticsCue, setViewStatisticsCue] = useState<any>({})\r\n\r\n    const couldNotLoadSubscribersAlert = PreferredLanguageText('couldNotLoadSubscribers');\r\n    const checkConnectionAlert = PreferredLanguageText('checkConnection');\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const u = await AsyncStorage.getItem(\"user\");\r\n            if (u) {\r\n                const user = JSON.parse(u);\r\n                if (user._id.toString().trim() === props.channelCreatedBy) {\r\n                    setIsOwner(true);\r\n                }\r\n            }\r\n        })();\r\n    }, [props.channelCreatedBy, props.channelId]);\r\n\r\n    const loadCuesAndScores = useCallback(() => {\r\n        setLoading(true)\r\n        if (props.channelId && props.channelId !== '') {\r\n            const server = fetchAPI('')\r\n            server.query({\r\n                query: getGrades,\r\n                variables: {\r\n                    channelId: props.channelId\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (res.data.channel && res.data.channel.getSubmissionCues) {\r\n                        setCues(res.data.channel.getSubmissionCues)\r\n                        server.query({\r\n                            query: getGradesList,\r\n                            variables: {\r\n                                channelId: props.channelId\r\n                            }\r\n                        }).then(async (res2) => {\r\n                            if (res2.data.channel.getGrades) {\r\n                                const u = await AsyncStorage.getItem('user')\r\n                                if (u) {\r\n                                    const user = JSON.parse(u)\r\n                                    if (user._id.toString().trim() === props.channelCreatedBy.toString().trim()) {\r\n                                        // all scores\r\n                                        setScores(res2.data.channel.getGrades)\r\n                                    } else {\r\n                                        // only user's score\r\n                                        const score = res2.data.channel.getGrades.find((u: any) => {\r\n                                            return u.userId.toString().trim() === user._id.toString().trim()\r\n                                        })\r\n                                        const singleScoreArray = [{ ...score }]\r\n                                        setScores(singleScoreArray)\r\n                                    }\r\n\r\n                                }\r\n                                setLoading(false)\r\n                                modalAnimation.setValue(0)\r\n                                Animated.timing(modalAnimation, {\r\n                                    toValue: 1,\r\n                                    duration: 150,\r\n                                    useNativeDriver: true\r\n                                }).start();\r\n                            }\r\n                        }).catch(err => {\r\n                            Alert(couldNotLoadSubscribersAlert, checkConnectionAlert);\r\n                            setLoading(false)\r\n                            modalAnimation.setValue(0)\r\n                            Animated.timing(modalAnimation, {\r\n                                toValue: 1,\r\n                                duration: 150,\r\n                                useNativeDriver: true\r\n                            }).start();\r\n                        })\r\n                    } else {\r\n                        setLoading(false)\r\n                        modalAnimation.setValue(0)\r\n                        Animated.timing(modalAnimation, {\r\n                            toValue: 1,\r\n                            duration: 150,\r\n                            useNativeDriver: true\r\n                        }).start();\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    Alert(couldNotLoadSubscribersAlert, checkConnectionAlert);\r\n                    setLoading(false)\r\n                    modalAnimation.setValue(0)\r\n                    Animated.timing(modalAnimation, {\r\n                        toValue: 1,\r\n                        duration: 150,\r\n                        useNativeDriver: true\r\n                    }).start();\r\n                })\r\n        } else {\r\n            setLoading(false)\r\n            modalAnimation.setValue(0)\r\n            Animated.timing(modalAnimation, {\r\n                toValue: 1,\r\n                duration: 150,\r\n                useNativeDriver: true\r\n            }).start();\r\n        }\r\n    }, [props.channelId, modalAnimation, props.channelCreatedBy])\r\n\r\n    const loadSubmissionStatistics = useCallback(() => {\r\n\r\n        if (props.channelId && props.channelId !== '') {\r\n            const server = fetchAPI('')\r\n            server.query({\r\n                query: getSubmissionStatistics,\r\n                variables: {\r\n                    channelId: props.channelId\r\n                }\r\n            }).then(res => {\r\n                if (res.data.channel && res.data.channel.getSubmissionCuesStatistics) {\r\n                    setSubmissionStatistics(res.data.channel.getSubmissionCuesStatistics)\r\n                }\r\n            })\r\n\r\n        }\r\n\r\n    }, [props.channelId, modalAnimation, props.channelCreatedBy])\r\n\r\n    useEffect(() => {\r\n        loadCuesAndScores()\r\n        loadSubmissionStatistics()\r\n    }, [props.channelId])\r\n\r\n    \r\n    const windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\r\n    return (\r\n        <ScrollView style={{\r\n            width: '100%',\r\n            height: windowHeight,\r\n            backgroundColor: 'white',\r\n            borderTopRightRadius: 0,\r\n            borderTopLeftRadius: 0\r\n        }}\r\n            showsVerticalScrollIndicator={false}\r\n            scrollEnabled={true}\r\n            scrollEventThrottle={1}\r\n            keyboardDismissMode={'on-drag'}\r\n            overScrollMode={'always'}\r\n            nestedScrollEnabled={true}\r\n        >\r\n            <Animated.View style={{\r\n                opacity: modalAnimation,\r\n                width: '100%',\r\n                height: windowHeight,\r\n                backgroundColor: 'white',\r\n                borderTopRightRadius: 0,\r\n                borderTopLeftRadius: 0\r\n            }}>\r\n                {\r\n                    loading\r\n                        ? <View style={{\r\n                            width: '100%',\r\n                            flex: 1,\r\n                            justifyContent: 'center',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            backgroundColor: 'white',\r\n                            borderTopRightRadius: 0,\r\n                            borderTopLeftRadius: 0\r\n                        }}>\r\n                            <ActivityIndicator color={'#a2a2aa'} />\r\n                        </View>\r\n                        :\r\n                        <GradesList\r\n                            key={JSON.stringify(scores)}\r\n                            scores={scores}\r\n                            cues={cues}\r\n                            channelName={props.filterChoice}\r\n                            isOwner={isOwner}\r\n                            channelId={props.channelId}\r\n                            closeModal={() => {\r\n                                Animated.timing(modalAnimation, {\r\n                                    toValue: 0,\r\n                                    duration: 150,\r\n                                    useNativeDriver: true\r\n                                }).start(() => props.closeModal())\r\n                            }}\r\n                            reload={() => loadCuesAndScores()}\r\n                            submissionStatistics={submissionStatistics}\r\n                        />\r\n                }\r\n            </Animated.View>\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nexport default Grades"]},"metadata":{},"sourceType":"module"}