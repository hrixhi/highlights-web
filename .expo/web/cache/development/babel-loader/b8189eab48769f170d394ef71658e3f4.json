{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\QuizCreate.tsx\";\n\nimport React, { useState, useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { TextInput } from \"./CustomTextInput\";\nimport { Text, TouchableOpacity, View } from \"../components/Themed\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { PreferredLanguageText } from \"../helpers/LanguageContext\";\nimport EquationEditor from 'equation-editor-react';\nimport * as ImagePicker from 'expo-image-picker';\nimport { Picker } from \"@react-native-picker/picker\";\nvar questionTypeOptions = [{\n  label: \"MCQ\",\n  value: \"\"\n}, {\n  label: \"Free response\",\n  value: \"freeResponse\"\n}];\n\nvar QuizCreate = function QuizCreate(props) {\n  var _useState = useState(props.problems ? props.problems : []),\n      _useState2 = _slicedToArray(_useState, 2),\n      problems = _useState2[0],\n      setProblems = _useState2[1];\n\n  var galleryCallback = useCallback(function _callee(index, i) {\n    var gallerySettings, updatedGallerySettings, result, newProbs, _newProbs;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.getMediaLibraryPermissionsAsync());\n\n          case 2:\n            gallerySettings = _context.sent;\n\n            if (gallerySettings.granted) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.getMediaLibraryPermissionsAsync());\n\n          case 8:\n            updatedGallerySettings = _context.sent;\n\n            if (updatedGallerySettings.granted) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              quality: 1,\n              base64: true\n            }));\n\n          case 13:\n            result = _context.sent;\n\n            if (!result.cancelled) {\n              if (i !== null) {\n                newProbs = _toConsumableArray(problems);\n                newProbs[index].options[i].option = \"image:\" + result.uri;\n                setProblems(newProbs);\n                props.setProblems(newProbs);\n              } else {\n                _newProbs = _toConsumableArray(problems);\n                _newProbs[index].question = \"image:\" + result.uri;\n                setProblems(_newProbs);\n                props.setProblems(_newProbs);\n              }\n            }\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [problems, props.setProblems]);\n  return React.createElement(View, {\n    style: {\n      width: '100%',\n      height: '100%',\n      backgroundColor: 'white',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0,\n      paddingTop: 15,\n      flexDirection: 'column',\n      justifyContent: 'flex-start'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, problems.map(function (problem, index) {\n    var questionType = problem.questionType;\n    return React.createElement(View, {\n      style: {\n        borderBottomColor: '#f4f4f6',\n        borderBottomWidth: index === problems.length - 1 ? 0 : 1,\n        marginBottom: 25\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 28\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }, React.createElement(View, {\n      style: {\n        paddingTop: 15\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: '#a2a2aa',\n        fontSize: 15,\n        paddingBottom: 25,\n        marginRight: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }\n    }, index + 1, \".\")), React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        width: '95%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, React.createElement(View, {\n      style: {\n        width: '50%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }, problem.question && problem.question.includes(\"image:\") ? React.createElement(Image, {\n      resizeMode: 'contain',\n      style: {\n        width: 400,\n        height: 400,\n        maxWidth: '100%'\n      },\n      source: {\n        uri: problem.question.split(\"image:\")[1]\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 45\n      }\n    }) : problem.question && problem.question.includes(\"formula:\") ? React.createElement(View, {\n      style: {\n        borderColor: '#f4f4f6',\n        borderWidth: 1,\n        borderRadius: 15,\n        padding: 10,\n        width: '100%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 49\n      }\n    }, React.createElement(EquationEditor, {\n      value: problem.question.split(\"formula:\")[1],\n      onChange: function onChange(eq) {\n        var newProbs = _toConsumableArray(problems);\n\n        newProbs[index].question = \"formula:\" + eq;\n        setProblems(newProbs);\n        props.setProblems(newProbs);\n      },\n      autoCommands: \"pi theta sqrt sum prod alpha beta gamma rho int\",\n      autoOperatorNames: \"sin cos tan arccos arcsin arctan\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 53\n      }\n    })) : React.createElement(TextInput, {\n      value: problem.question,\n      placeholder: PreferredLanguageText('problem') + \" \" + (index + 1).toString(),\n      onChangeText: function onChangeText(val) {\n        var newProbs = _toConsumableArray(problems);\n\n        newProbs[index].question = val;\n        setProblems(newProbs);\n        props.setProblems(newProbs);\n      },\n      placeholderTextColor: '#a2a2aa',\n      hasMultipleLines: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 49\n      }\n    }), React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 37\n      }\n    }, problem.question && problem.question.includes(\"image:\") ? null : React.createElement(TouchableOpacity, {\n      style: {\n        backgroundColor: '#fff'\n      },\n      onPress: function onPress() {\n        if (problem.question && problem.question.includes(\"formula:\")) {\n          var newProbs = _toConsumableArray(problems);\n\n          newProbs[index].question = \"\";\n          setProblems(newProbs);\n          props.setProblems(newProbs);\n        } else {\n          var _newProbs2 = _toConsumableArray(problems);\n\n          _newProbs2[index].question = \"formula:\";\n          setProblems(_newProbs2);\n          props.setProblems(_newProbs2);\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 49\n      }\n    }, React.createElement(Text, {\n      style: {\n        paddingTop: problem.question && problem.question.includes(\"formula:\") ? 10 : 0,\n        color: '#a2a2aa',\n        fontFamily: 'Overpass',\n        fontSize: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 53\n      }\n    }, problem.question && problem.question.includes(\"formula:\") ? \"Switch to Text\" : \"Switch to Formula\")), React.createElement(TouchableOpacity, {\n      style: {\n        backgroundColor: '#fff',\n        paddingLeft: 10\n      },\n      onPress: function onPress() {\n        if (problem.question && problem.question.includes(\"image:\")) {\n          var newProbs = _toConsumableArray(problems);\n\n          newProbs[index].question = \"\";\n          setProblems(newProbs);\n          props.setProblems(newProbs);\n        } else {\n          galleryCallback(index, null);\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 41\n      }\n    }, React.createElement(Text, {\n      style: {\n        paddingTop: problem.question && (problem.question.includes(\"image:\") || problem.question.includes(\"formula:\")) ? 10 : 0,\n        color: '#a2a2aa',\n        fontFamily: 'Overpass',\n        fontSize: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 45\n      }\n    }, problem.question && problem.question.includes(\"image:\") ? \"Remove Image\" : \"Add Image\")))), React.createElement(View, {\n      style: {\n        width: '25%',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'row'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 33\n      }\n    }, React.createElement(TextInput, {\n      value: problem.points,\n      placeholder: PreferredLanguageText('enterPoints'),\n      onChangeText: function onChangeText(val) {\n        var newProbs = _toConsumableArray(problems);\n\n        newProbs[index].points = val;\n        setProblems(newProbs);\n        props.setProblems(newProbs);\n      },\n      placeholderTextColor: '#a2a2aa',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 37\n      }\n    })), React.createElement(View, {\n      style: {\n        width: '25%',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'row'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 33\n      }\n    }, React.createElement(Picker, {\n      style: styles.picker,\n      itemStyle: {\n        fontSize: 15\n      },\n      selectedValue: questionType,\n      onValueChange: function onValueChange(questionType) {\n        var updatedProblems = _toConsumableArray(problems);\n\n        updatedProblems[index].questionType = questionType;\n\n        if (questionType !== \"\") {\n          updatedProblems[index].options = [];\n        }\n\n        setProblems(updatedProblems);\n        props.setProblems(updatedProblems);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 37\n      }\n    }, questionTypeOptions.map(function (item, index) {\n      return React.createElement(Picker.Item, {\n        color: questionType === item.value ? \"#3B64F8\" : \"#202025\",\n        label: item.value === \"\" ? \"MCQ\" : item.label,\n        value: item.value,\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 49\n        }\n      });\n    })))), React.createElement(View, {\n      style: {\n        paddingTop: 15,\n        paddingLeft: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 29\n      }\n    }, React.createElement(Ionicons, {\n      name: \"close-outline\",\n      onPress: function onPress() {\n        var updatedProblems = _toConsumableArray(problems);\n\n        updatedProblems.splice(index, 1);\n        setProblems(updatedProblems);\n        props.setProblems(updatedProblems);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 33\n      }\n    }))), problem.options.map(function (option, i) {\n      return React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          marginTop: 10\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 40\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingTop: 15\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 37\n        }\n      }, React.createElement(\"input\", {\n        style: {\n          paddingRight: 20\n        },\n        type: \"checkbox\",\n        checked: option.isCorrect,\n        onChange: function onChange(e) {\n          var updatedProblems = _toConsumableArray(problems);\n\n          updatedProblems[index].options[i].isCorrect = !updatedProblems[index].options[i].isCorrect;\n          setProblems(updatedProblems);\n          props.setProblems(updatedProblems);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 41\n        }\n      })), React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 37\n        }\n      }, option.option && option.option.includes(\"image:\") ? React.createElement(Image, {\n        resizeMode: 'contain',\n        style: {\n          width: 200,\n          height: 200\n        },\n        source: {\n          uri: option.option.split(\"image:\")[1]\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 49\n        }\n      }) : option.option && option.option.includes(\"formula:\") ? React.createElement(View, {\n        style: {\n          borderColor: '#f4f4f6',\n          borderWidth: 1,\n          borderRadius: 15,\n          padding: 10,\n          width: '50%'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 53\n        }\n      }, React.createElement(EquationEditor, {\n        value: option.option.split(\"formula:\")[1],\n        onChange: function onChange(eq) {\n          var newProbs = _toConsumableArray(problems);\n\n          newProbs[index].options[i].option = \"formula:\" + eq;\n          setProblems(newProbs);\n          props.setProblems(newProbs);\n        },\n        autoCommands: \"pi theta sqrt sum prod alpha beta gamma rho int\",\n        autoOperatorNames: \"sin cos tan arccos arcsin arctan\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 57\n        }\n      })) : React.createElement(View, {\n        style: {\n          width: '100%'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 54\n        }\n      }, React.createElement(TextInput, {\n        value: option.option,\n        placeholder: PreferredLanguageText('option') + ' ' + (i + 1).toString(),\n        onChangeText: function onChangeText(val) {\n          var newProbs = _toConsumableArray(problems);\n\n          newProbs[index].options[i].option = val;\n          setProblems(newProbs);\n          props.setProblems(newProbs);\n        },\n        placeholderTextColor: '#a2a2aa',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 57\n        }\n      })), React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 41\n        }\n      }, option.option && option.option.includes(\"image:\") ? null : React.createElement(TouchableOpacity, {\n        style: {\n          backgroundColor: '#fff'\n        },\n        onPress: function onPress() {\n          if (option.option && option.option.includes(\"formula:\")) {\n            var newProbs = _toConsumableArray(problems);\n\n            newProbs[index].options[i].option = \"\";\n            setProblems(newProbs);\n            props.setProblems(newProbs);\n          } else {\n            var _newProbs3 = _toConsumableArray(problems);\n\n            _newProbs3[index].options[i].option = \"formula:\";\n            setProblems(_newProbs3);\n            props.setProblems(_newProbs3);\n          }\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 53\n        }\n      }, React.createElement(Text, {\n        style: {\n          paddingTop: option.option && option.option.includes(\"formula:\") ? 10 : 0,\n          color: '#a2a2aa',\n          fontFamily: 'Overpass',\n          fontSize: 10\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 57\n        }\n      }, option.option && option.option.includes(\"formula:\") ? \"Switch to Text\" : \"Switch to Formula\")), React.createElement(TouchableOpacity, {\n        style: {\n          backgroundColor: '#fff',\n          paddingLeft: 10\n        },\n        onPress: function onPress() {\n          if (option.option && option.option.includes(\"image:\")) {\n            var newProbs = _toConsumableArray(problems);\n\n            newProbs[index].options[i].option = \"\";\n            setProblems(newProbs);\n            props.setProblems(newProbs);\n          } else {\n            galleryCallback(index, i);\n          }\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 45\n        }\n      }, React.createElement(Text, {\n        style: {\n          paddingTop: option.option && option.option.includes(\"formula:\") ? 10 : 0,\n          color: '#a2a2aa',\n          fontFamily: 'Overpass',\n          fontSize: 10\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 49\n        }\n      }, option.option && option.option.includes(\"image:\") ? \"Remove Image\" : \"Add Image\")))), React.createElement(View, {\n        style: {\n          paddingTop: 15,\n          paddingLeft: 10\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 37\n        }\n      }, React.createElement(Ionicons, {\n        name: \"close-outline\",\n        onPress: function onPress() {\n          var updatedProblems = _toConsumableArray(problems);\n\n          updatedProblems[index].options.splice(i, 1);\n          setProblems(updatedProblems);\n          props.setProblems(updatedProblems);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 41\n        }\n      })));\n    }), questionType === \"\" ? React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        var updatedProblems = _toConsumableArray(problems);\n\n        updatedProblems[index].options.push({\n          option: '',\n          isCorrect: false\n        });\n        setProblems(updatedProblems);\n        props.setProblems(updatedProblems);\n      },\n      style: {\n        backgroundColor: 'white',\n        overflow: 'hidden',\n        height: 35,\n        maxHeight: 70,\n        marginTop: 15,\n        width: '100%',\n        justifyContent: 'flex-start',\n        flexDirection: 'row',\n        marginBottom: 50\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 48\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: 'center',\n        lineHeight: 35,\n        color: '#202025',\n        fontSize: 12,\n        backgroundColor: '#f4f4f6',\n        paddingHorizontal: 25,\n        fontFamily: 'inter',\n        height: 35,\n        width: 150,\n        borderRadius: 15,\n        textTransform: 'uppercase'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 29\n      }\n    }, PreferredLanguageText('addChoice'))) : React.createElement(View, {\n      style: {\n        height: 100\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 47\n      }\n    }));\n  }), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      var updatedProblems = [].concat(_toConsumableArray(problems), [{\n        question: '',\n        options: [],\n        points: '',\n        questionType: ''\n      }]);\n      setProblems(updatedProblems);\n      props.setProblems(updatedProblems);\n    },\n    style: {\n      backgroundColor: 'white',\n      overflow: 'hidden',\n      height: 35,\n      marginTop: 15,\n      width: '100%',\n      justifyContent: 'center',\n      flexDirection: 'row',\n      marginBottom: 50\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      lineHeight: 35,\n      color: '#202025',\n      fontSize: 12,\n      backgroundColor: '#f4f4f6',\n      paddingHorizontal: 25,\n      fontFamily: 'inter',\n      height: 35,\n      width: 200,\n      borderRadius: 15,\n      textTransform: 'uppercase'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 21\n    }\n  }, PreferredLanguageText('addProblem')))));\n};\n\nexport default QuizCreate;\nvar styles = StyleSheet.create({\n  input: {\n    width: '50%',\n    borderBottomColor: '#f4f4f6',\n    borderBottomWidth: 1,\n    fontSize: 15,\n    padding: 15,\n    paddingTop: 12,\n    paddingBottom: 12,\n    marginTop: 5,\n    marginBottom: 20\n  },\n  picker: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    backgroundColor: \"white\",\n    overflow: \"hidden\",\n    fontSize: 12,\n    borderWidth: 1,\n    width: 100,\n    height: 20,\n    marginTop: 10,\n    borderRadius: 3\n  }\n});","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/QuizCreate.tsx"],"names":["React","useState","useCallback","TextInput","Text","TouchableOpacity","View","Ionicons","PreferredLanguageText","EquationEditor","ImagePicker","Picker","questionTypeOptions","label","value","QuizCreate","props","problems","setProblems","galleryCallback","index","i","getMediaLibraryPermissionsAsync","gallerySettings","granted","requestMediaLibraryPermissionsAsync","updatedGallerySettings","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","quality","base64","result","cancelled","newProbs","options","option","uri","question","width","height","backgroundColor","borderTopLeftRadius","borderTopRightRadius","paddingTop","flexDirection","justifyContent","map","problem","questionType","borderBottomColor","borderBottomWidth","length","marginBottom","color","fontSize","paddingBottom","marginRight","includes","maxWidth","split","borderColor","borderWidth","borderRadius","padding","eq","toString","val","fontFamily","paddingLeft","display","alignItems","points","styles","picker","updatedProblems","item","splice","marginTop","paddingRight","isCorrect","e","push","overflow","maxHeight","textAlign","lineHeight","paddingHorizontal","textTransform","StyleSheet","create","input"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { StyleSheet, Image } from 'react-native';\r\nimport { TextInput } from \"./CustomTextInput\";\r\nimport { Text, TouchableOpacity, View } from '../components/Themed';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { PreferredLanguageText } from '../helpers/LanguageContext';\r\nimport EquationEditor from 'equation-editor-react';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { Picker } from \"@react-native-picker/picker\";\r\n\r\nconst questionTypeOptions = [\r\n    {\r\n        label: \"MCQ\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"Free response\",\r\n        value: \"freeResponse\"\r\n    },\r\n]\r\n\r\nconst QuizCreate: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [problems, setProblems] = useState<any[]>(props.problems ? props.problems : [])\r\n\r\n    const galleryCallback = useCallback(async (index: any, i: any) => {\r\n        const gallerySettings = await ImagePicker.getMediaLibraryPermissionsAsync()\r\n        if (!gallerySettings.granted) {\r\n            await ImagePicker.requestMediaLibraryPermissionsAsync()\r\n            const updatedGallerySettings = await ImagePicker.getMediaLibraryPermissionsAsync()\r\n            if (!updatedGallerySettings.granted) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n            quality: 1,\r\n            base64: true\r\n        });\r\n\r\n        if (!result.cancelled) {\r\n            if (i !== null) {\r\n                const newProbs = [...problems];\r\n                newProbs[index].options[i].option = \"image:\" + result.uri;\r\n                setProblems(newProbs)\r\n                props.setProblems(newProbs)\r\n            } else {\r\n                const newProbs = [...problems];\r\n                newProbs[index].question = \"image:\" + result.uri;\r\n                setProblems(newProbs)\r\n                props.setProblems(newProbs)\r\n            }\r\n        }\r\n    }, [problems, props.setProblems])\r\n\r\n    return (\r\n        <View style={{\r\n            width: '100%', height: '100%', backgroundColor: 'white',\r\n            borderTopLeftRadius: 0,\r\n            borderTopRightRadius: 0,\r\n            paddingTop: 15,\r\n            flexDirection: 'column',\r\n            justifyContent: 'flex-start'\r\n        }}>\r\n            {\r\n                problems.map((problem: any, index: any) => {\r\n\r\n                    const { questionType } = problem;\r\n\r\n                    return <View style={{ borderBottomColor: '#f4f4f6', borderBottomWidth: index === (problems.length - 1) ? 0 : 1, marginBottom: 25 }}>\r\n                        <View style={{ flexDirection: 'row' }}>\r\n                            <View style={{ paddingTop: 15 }}>\r\n                                <Text style={{ color: '#a2a2aa', fontSize: 15, paddingBottom: 25, marginRight: 10 }}>\r\n                                    {index + 1}.\r\n                            </Text>\r\n                            </View>\r\n                            <View style={{ flexDirection: 'row', width: '95%' }}>\r\n                                <View style={{ width: '50%' }}>\r\n                                    {\r\n                                        problem.question && problem.question.includes(\"image:\") ?\r\n                                            <Image\r\n                                                resizeMode={'contain'}\r\n                                                style={{\r\n                                                    width: 400,\r\n                                                    height: 400,\r\n                                                    maxWidth: '100%'\r\n                                                }}\r\n                                                source={{\r\n                                                    uri: problem.question.split(\"image:\")[1]\r\n                                                }}\r\n                                            />\r\n                                            :\r\n                                            (problem.question && problem.question.includes(\"formula:\") ?\r\n                                                <View style={{\r\n                                                    borderColor: '#f4f4f6',\r\n                                                    borderWidth: 1,\r\n                                                    borderRadius: 15,\r\n                                                    padding: 10,\r\n                                                    width: '100%'\r\n                                                }}>\r\n                                                    <EquationEditor\r\n                                                        value={problem.question.split(\"formula:\")[1]}\r\n                                                        onChange={(eq) => {\r\n                                                            const newProbs = [...problems];\r\n                                                            newProbs[index].question = \"formula:\" + eq;\r\n                                                            setProblems(newProbs)\r\n                                                            props.setProblems(newProbs)\r\n                                                        }}\r\n                                                        autoCommands=\"pi theta sqrt sum prod alpha beta gamma rho int\"\r\n                                                        autoOperatorNames=\"sin cos tan arccos arcsin arctan\"\r\n                                                    />\r\n                                                </View>\r\n                                                :\r\n                                                <TextInput\r\n                                                    value={problem.question}\r\n                                                    // style={styles.input}\r\n                                                    placeholder={PreferredLanguageText('problem') +  \" \" + (index + 1).toString()}\r\n                                                    onChangeText={val => {\r\n                                                        const newProbs = [...problems];\r\n                                                        newProbs[index].question = val;\r\n                                                        setProblems(newProbs)\r\n                                                        props.setProblems(newProbs)\r\n                                                    }}\r\n                                                    placeholderTextColor={'#a2a2aa'}\r\n                                                    hasMultipleLines={true}\r\n                                                />)\r\n                                    }\r\n                                    <View style={{ flexDirection: 'row',}}>\r\n                                        {\r\n                                            problem.question && problem.question.includes(\"image:\") ? null :\r\n                                                <TouchableOpacity\r\n                                                    style={{\r\n                                                        backgroundColor: '#fff'\r\n                                                    }}\r\n                                                    onPress={() => {\r\n                                                        if (problem.question && problem.question.includes(\"formula:\")) {\r\n                                                            const newProbs = [...problems];\r\n                                                            newProbs[index].question = \"\";\r\n                                                            setProblems(newProbs)\r\n                                                            props.setProblems(newProbs)\r\n                                                        } else {\r\n                                                            const newProbs = [...problems];\r\n                                                            newProbs[index].question = \"formula:\";\r\n                                                            setProblems(newProbs)\r\n                                                            props.setProblems(newProbs)\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    <Text\r\n                                                        style={{\r\n                                                            paddingTop: problem.question && problem.question.includes(\"formula:\")\r\n                                                                ? 10 : 0,\r\n                                                            color: '#a2a2aa',\r\n                                                            fontFamily: 'Overpass',\r\n                                                            fontSize: 10\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            problem.question && problem.question.includes(\"formula:\")\r\n                                                                ? \"Switch to Text\" : \"Switch to Formula\"\r\n                                                        }\r\n                                                    </Text>\r\n                                                </TouchableOpacity>\r\n                                        }\r\n                                        <TouchableOpacity\r\n                                            style={{\r\n                                                backgroundColor: '#fff', paddingLeft: 10\r\n                                            }}\r\n                                            onPress={() => {\r\n                                                if (problem.question && problem.question.includes(\"image:\")) {\r\n                                                    const newProbs = [...problems];\r\n                                                    newProbs[index].question = \"\";\r\n                                                    setProblems(newProbs)\r\n                                                    props.setProblems(newProbs)\r\n                                                } else {\r\n                                                    galleryCallback(index, null)\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            <Text\r\n                                                style={{\r\n                                                    paddingTop: problem.question && (problem.question.includes(\"image:\") || problem.question.includes(\"formula:\"))\r\n                                                        ? 10 : 0,\r\n                                                    color: '#a2a2aa',\r\n                                                    fontFamily: 'Overpass',\r\n                                                    fontSize: 10\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    problem.question && problem.question.includes(\"image:\")\r\n                                                        ? \"Remove Image\" : \"Add Image\"\r\n                                                }\r\n                                            </Text>\r\n                                        </TouchableOpacity>\r\n                                    </View>\r\n                                </View>\r\n                                {/* <View style={{ flex: 1 }} /> */}\r\n                                <View style={{ width: '25%',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        flexDirection: 'row' }}>\r\n                                    <TextInput\r\n                                        value={problem.points}\r\n                                        // style={styles.input}\r\n                                        placeholder={PreferredLanguageText('enterPoints')}\r\n                                        onChangeText={val => {\r\n                                            const newProbs = [...problems];\r\n                                            newProbs[index].points = val;\r\n                                            setProblems(newProbs)\r\n                                            props.setProblems(newProbs)\r\n                                        }}\r\n                                        placeholderTextColor={'#a2a2aa'}\r\n                                    />\r\n                                </View>\r\n                                {/* Add dropdown here */}\r\n                                <View\r\n                                    style={{\r\n                                        width: '25%',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        flexDirection: 'row'\r\n                                    }}>\r\n                                    <Picker\r\n                                        style={styles.picker}\r\n                                        itemStyle={{\r\n                                            fontSize: 15\r\n                                        }}\r\n                                        selectedValue={questionType}\r\n                                        onValueChange={(questionType: any) => {\r\n                                            const updatedProblems = [...problems]\r\n                                            updatedProblems[index].questionType = questionType;\r\n\r\n                                            // Clear Options \r\n                                            if (questionType !== \"\") {\r\n                                                updatedProblems[index].options = []\r\n                                            }\r\n                                            setProblems(updatedProblems)\r\n                                            props.setProblems(updatedProblems)\r\n                                        }}>\r\n                                        {questionTypeOptions.map((item: any, index: number) => {\r\n                                            return (\r\n                                                <Picker.Item\r\n                                                    color={questionType === item.value ? \"#3B64F8\" : \"#202025\"}\r\n                                                    label={item.value === \"\" ? \"MCQ\" : item.label}\r\n                                                    value={item.value}\r\n                                                    key={index}\r\n                                                />\r\n                                            );\r\n                                        })}\r\n                                    </Picker>\r\n                                </View>\r\n\r\n                            </View>\r\n                            <View style={{ paddingTop: 15, paddingLeft: 10 }}>\r\n                                <Ionicons\r\n                                    name='close-outline'\r\n                                    onPress={() => {\r\n                                        const updatedProblems = [...problems]\r\n                                        updatedProblems.splice(index, 1);\r\n                                        setProblems(updatedProblems)\r\n                                        props.setProblems(updatedProblems)\r\n                                    }}\r\n                                />\r\n                            </View>\r\n                        </View>\r\n                        \r\n                        {\r\n                            problem.options.map((option: any, i: any) => {\r\n                                return <View style={{ flexDirection: 'row', marginTop: 10 }}>\r\n                                    <View style={{ paddingTop: 15 }}>\r\n                                        <input\r\n                                            style={{ paddingRight: 20 }}\r\n                                            type='checkbox'\r\n                                            checked={option.isCorrect}\r\n                                            onChange={(e) => {\r\n                                                const updatedProblems = [...problems]\r\n                                                updatedProblems[index].options[i].isCorrect = !updatedProblems[index].options[i].isCorrect;\r\n                                                setProblems(updatedProblems)\r\n                                                props.setProblems(updatedProblems)\r\n                                            }}\r\n                                        />\r\n                                    </View>\r\n                                    <View style={{ width: '50%'}}>\r\n                                        {\r\n                                            option.option && option.option.includes(\"image:\") ?\r\n                                                <Image\r\n                                                    resizeMode={'contain'}\r\n                                                    style={{\r\n                                                        width: 200,\r\n                                                        height: 200\r\n                                                    }}\r\n                                                    source={{\r\n                                                        uri: option.option.split(\"image:\")[1]\r\n                                                    }}\r\n                                                />\r\n                                                :\r\n                                                (option.option && option.option.includes(\"formula:\") ?\r\n                                                    <View style={{\r\n                                                        borderColor: '#f4f4f6',\r\n                                                        borderWidth: 1,\r\n                                                        borderRadius: 15,\r\n                                                        padding: 10,\r\n                                                        width: '50%'\r\n                                                    }}>\r\n                                                        <EquationEditor\r\n                                                            value={option.option.split(\"formula:\")[1]}\r\n                                                            onChange={(eq) => {\r\n                                                                const newProbs = [...problems];\r\n                                                                newProbs[index].options[i].option = \"formula:\" + eq;\r\n                                                                setProblems(newProbs)\r\n                                                                props.setProblems(newProbs)\r\n                                                            }}\r\n                                                            autoCommands=\"pi theta sqrt sum prod alpha beta gamma rho int\"\r\n                                                            autoOperatorNames=\"sin cos tan arccos arcsin arctan\"\r\n                                                        />\r\n                                                    </View> :\r\n                                                     <View style={{ width: '100%' }}>\r\n                                                        <TextInput\r\n                                                            value={option.option}\r\n                                                            // style={styles.input}\r\n                                                            placeholder={PreferredLanguageText('option') + ' ' + (i + 1).toString()}\r\n                                                            onChangeText={val => {\r\n                                                                const newProbs = [...problems];\r\n                                                                newProbs[index].options[i].option = val;\r\n                                                                setProblems(newProbs)\r\n                                                                props.setProblems(newProbs)\r\n                                                            }}\r\n                                                            placeholderTextColor={'#a2a2aa'}\r\n                                                        />\r\n                                                    </View>)\r\n                                        }\r\n                                        <View style={{ flexDirection: 'row' }}>\r\n                                            {\r\n                                                option.option && option.option.includes(\"image:\") ? null :\r\n                                                    <TouchableOpacity\r\n                                                        style={{ backgroundColor: '#fff' }}\r\n                                                        onPress={() => {\r\n                                                            if (option.option && option.option.includes(\"formula:\")) {\r\n                                                                const newProbs = [...problems];\r\n                                                                newProbs[index].options[i].option = \"\";\r\n                                                                setProblems(newProbs)\r\n                                                                props.setProblems(newProbs)\r\n                                                            } else {\r\n                                                                const newProbs = [...problems];\r\n                                                                newProbs[index].options[i].option = \"formula:\";\r\n                                                                setProblems(newProbs)\r\n                                                                props.setProblems(newProbs)\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        <Text\r\n                                                            style={{\r\n                                                                paddingTop: option.option && option.option.includes(\"formula:\")\r\n                                                                    ? 10 : 0,\r\n                                                                color: '#a2a2aa',\r\n                                                                fontFamily: 'Overpass',\r\n                                                                fontSize: 10\r\n                                                            }}\r\n                                                        >\r\n                                                            {\r\n                                                                option.option && option.option.includes(\"formula:\")\r\n                                                                    ? \"Switch to Text\" : \"Switch to Formula\"\r\n                                                            }\r\n                                                        </Text>\r\n                                                    </TouchableOpacity>\r\n                                            }\r\n                                            <TouchableOpacity\r\n                                                style={{\r\n                                                    backgroundColor: '#fff', paddingLeft: 10\r\n                                                }}\r\n                                                onPress={() => {\r\n                                                    if (option.option && option.option.includes(\"image:\")) {\r\n                                                        const newProbs = [...problems];\r\n                                                        newProbs[index].options[i].option = \"\";\r\n                                                        setProblems(newProbs)\r\n                                                        props.setProblems(newProbs)\r\n                                                    } else {\r\n                                                        galleryCallback(index, i)\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                <Text\r\n                                                    style={{\r\n                                                        paddingTop: option.option && option.option.includes(\"formula:\")\r\n                                                            ? 10 : 0,\r\n                                                        color: '#a2a2aa',\r\n                                                        fontFamily: 'Overpass',\r\n                                                        fontSize: 10\r\n                                                    }}\r\n                                                >\r\n                                                    {\r\n                                                        option.option && option.option.includes(\"image:\")\r\n                                                            ? \"Remove Image\" : \"Add Image\"\r\n                                                    }\r\n                                                </Text>\r\n                                            </TouchableOpacity>\r\n                                        </View>\r\n                                    </View>\r\n                                    <View style={{ paddingTop: 15, paddingLeft: 10 }}>\r\n                                        <Ionicons\r\n                                            name='close-outline'\r\n                                            onPress={() => {\r\n                                                const updatedProblems = [...problems]\r\n                                                updatedProblems[index].options.splice(i, 1);\r\n                                                setProblems(updatedProblems)\r\n                                                props.setProblems(updatedProblems)\r\n                                            }}\r\n                                        />\r\n                                    </View>\r\n                                </View>\r\n                            })\r\n                        }\r\n                        {/* Only show Add Choice if questionType is MCQ (\"\") */}\r\n                        {questionType === \"\" ? <TouchableOpacity\r\n                            onPress={() => {\r\n                                const updatedProblems = [...problems]\r\n                                updatedProblems[index].options.push({\r\n                                    option: '',\r\n                                    isCorrect: false\r\n                                })\r\n                                setProblems(updatedProblems)\r\n                                props.setProblems(updatedProblems)\r\n                            }}\r\n                            style={{\r\n                                backgroundColor: 'white',\r\n                                overflow: 'hidden',\r\n                                height: 35,\r\n                                maxHeight: 70,\r\n                                marginTop: 15,\r\n                                width: '100%',\r\n                                justifyContent: 'flex-start', flexDirection: 'row',\r\n                                marginBottom: 50\r\n                            }}>\r\n                            <Text style={{\r\n                                textAlign: 'center',\r\n                                lineHeight: 35,\r\n                                color: '#202025',\r\n                                fontSize: 12,\r\n                                backgroundColor: '#f4f4f6',\r\n                                paddingHorizontal: 25,\r\n                                fontFamily: 'inter',\r\n                                height: 35,\r\n                                width: 150,\r\n                                borderRadius: 15,\r\n                                textTransform: 'uppercase'\r\n                            }}>\r\n                                {PreferredLanguageText('addChoice')}\r\n                            </Text>\r\n                        </TouchableOpacity> : <View style={{ height: 100 }}  />}\r\n                    </View>\r\n                })\r\n            }\r\n            <View>\r\n                <TouchableOpacity\r\n                    onPress={() => {\r\n                        const updatedProblems = [...problems, { question: '', options: [], points: '', questionType: '' }]\r\n                        setProblems(updatedProblems)\r\n                        props.setProblems(updatedProblems)\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: 'white',\r\n                        overflow: 'hidden',\r\n                        height: 35,\r\n                        marginTop: 15,\r\n                        width: '100%', justifyContent: 'center', flexDirection: 'row',\r\n                        marginBottom: 50\r\n                    }}>\r\n                    <Text style={{\r\n                        textAlign: 'center',\r\n                        lineHeight: 35,\r\n                        color: '#202025',\r\n                        fontSize: 12,\r\n                        backgroundColor: '#f4f4f6',\r\n                        paddingHorizontal: 25,\r\n                        fontFamily: 'inter',\r\n                        height: 35,\r\n                        width: 200,\r\n                        borderRadius: 15,\r\n                        textTransform: 'uppercase'\r\n                    }}>\r\n                        {PreferredLanguageText('addProblem')}\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </View >\r\n    );\r\n}\r\n\r\nexport default QuizCreate;\r\n\r\nconst styles = StyleSheet.create({\r\n    input: {\r\n        width: '50%',\r\n        borderBottomColor: '#f4f4f6',\r\n        borderBottomWidth: 1,\r\n        fontSize: 15,\r\n        padding: 15,\r\n        paddingTop: 12,\r\n        paddingBottom: 12,\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    picker: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        backgroundColor: \"white\",\r\n        overflow: \"hidden\",\r\n        fontSize: 12,\r\n        borderWidth: 1,\r\n        width: 100,\r\n        height: 20,\r\n        marginTop: 10,\r\n        borderRadius: 3\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}