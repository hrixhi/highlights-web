{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\ThreadsList.tsx\";\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Alert from \"../components/Alert\";\nimport { View, Text, TouchableOpacity } from \"./Themed\";\nimport _ from 'lodash';\nimport ThreadCard from \"./ThreadCard\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { fetchAPI } from \"../graphql/FetchAPI\";\nimport { deleteThread, getThreadWithReplies, markThreadsAsRead } from \"../graphql/QueriesAndMutations\";\nimport NewMessage from \"./NewMessage\";\nimport ThreadReplyCard from \"./ThreadReplyCard\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Collapse } from 'react-collapse';\nimport { PreferredLanguageText } from \"../helpers/LanguageContext\";\n\nvar ThreadsList = function ThreadsList(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var unparsedThreads = JSON.parse(JSON.stringify(props.threads));\n\n  var _useState3 = useState(unparsedThreads.reverse()),\n      _useState4 = _slicedToArray(_useState3, 1),\n      threads = _useState4[0];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      threadWithReplies = _useState6[0],\n      setThreadWithReplies = _useState6[1];\n\n  var styles = styleObject();\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showThreadCues = _useState8[0],\n      setShowThreadCues = _useState8[1];\n\n  var _useState9 = useState('All'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      filterChoice = _useState10[0],\n      setFilterChoice = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      showPost = _useState12[0],\n      setShowPost = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      threadId = _useState14[0],\n      setThreadId = _useState14[1];\n\n  var _useState15 = useState(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      showComments = _useState16[0],\n      setShowComments = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      isOwner = _useState18[0],\n      setIsOwner = _useState18[1];\n\n  var categories = [];\n  var categoryObject = {};\n  var filteredThreads = [];\n  threads.map(function (item) {\n    if (item.category !== '' && !categoryObject[item.category]) {\n      categoryObject[item.category] = 'category';\n    }\n  });\n  Object.keys(categoryObject).map(function (key) {\n    categories.push(key);\n  });\n\n  if (filterChoice === 'All') {\n    filteredThreads = threads;\n  } else {\n    filteredThreads = threads.filter(function (item) {\n      return item.category === filterChoice;\n    });\n  }\n\n  var unableToLoadThreadAlert = PreferredLanguageText('unableToLoadThread');\n  var checkConnectionAlert = PreferredLanguageText('checkConnection');\n  var somethingWentWrongAlert = PreferredLanguageText('somethingWentWrong');\n  var loadCueDiscussions = useCallback(function _callee(tId) {\n    var u, user, server;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            u = _context.sent;\n\n            if (u) {\n              user = JSON.parse(u);\n              setThreadId(tId);\n              setLoading(true);\n              setShowThreadCues(true);\n              server = fetchAPI('');\n              server.query({\n                query: getThreadWithReplies,\n                variables: {\n                  threadId: tId\n                }\n              }).then(function (res) {\n                setThreadWithReplies(res.data.thread.getThreadWithReplies);\n                setLoading(false);\n              }).catch(function (err) {\n                Alert(unableToLoadThreadAlert, checkConnectionAlert);\n                setLoading(false);\n              });\n              server.mutate({\n                mutation: markThreadsAsRead,\n                variables: {\n                  userId: user._id,\n                  threadId: tId\n                }\n              }).then(function (res) {\n                props.refreshUnreadDiscussionCount();\n              }).catch(function (e) {\n                return console.log(e);\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  useEffect(function () {\n    (function _callee2() {\n      var u, user;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"user\"));\n\n            case 2:\n              u = _context2.sent;\n\n              if (u) {\n                user = JSON.parse(u);\n\n                if (user._id.toString().trim() === props.channelCreatedBy.toString().trim()) {\n                  setIsOwner(true);\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  var deletePost = useCallback(function (threadId) {\n    if (!isOwner) {\n      return;\n    }\n\n    var server = fetchAPI('');\n    server.mutate({\n      mutation: deleteThread,\n      variables: {\n        threadId: threadId\n      }\n    }).then(function (res) {\n      if (res.data && res.data.thread.delete) {\n        props.reload();\n      } else {\n        Alert(somethingWentWrongAlert);\n      }\n    }).catch(function (e) {\n      return Alert(somethingWentWrongAlert);\n    });\n  }, [isOwner]);\n\n  if (showPost) {\n    return React.createElement(View, {\n      style: {\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'white',\n        paddingHorizontal: 20,\n        borderTopRightRadius: props.cueId ? 0 : 30,\n        borderTopLeftRadius: props.cueId ? 0 : 30\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 16\n      }\n    }, React.createElement(Text, {\n      style: {\n        width: '100%',\n        textAlign: 'center',\n        height: 15,\n        paddingBottom: 25\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }), React.createElement(NewMessage, {\n      cueId: props.cueId,\n      channelId: props.channelId,\n      parentId: null,\n      back: function back() {\n        props.reload();\n        setShowPost(false);\n        setThreadId('');\n      },\n      placeholder: \"Post\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  var windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\n  return React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      width: '100%',\n      height: props.cueId ? 'auto' : windowHeight - 50,\n      paddingHorizontal: 20,\n      borderTopRightRadius: props.cueId ? 0 : 30,\n      borderTopLeftRadius: props.cueId ? 0 : 30,\n      borderBottomColor: '#f4f4f6',\n      borderBottomWidth: props.cueId ? 0 : 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      height: 15,\n      paddingBottom: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }), showThreadCues ? React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      flexDirection: 'row',\n      paddingBottom: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, React.createElement(TouchableOpacity, {\n    key: Math.random(),\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    },\n    onPress: function onPress() {\n      props.reload();\n      setThreadWithReplies([]);\n      setShowThreadCues(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: {\n      width: '100%',\n      lineHeight: 23\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 29\n    }\n  }, React.createElement(Ionicons, {\n    name: \"chevron-back-outline\",\n    size: 23,\n    color: '#202025',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 33\n    }\n  })))) : React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      flexDirection: 'row',\n      paddingBottom: 25,\n      maxWidth: 500\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, !props.cueId ? React.createElement(Text, {\n    ellipsizeMode: \"tail\",\n    style: {\n      fontSize: 11,\n      paddingBottom: 20,\n      textTransform: \"uppercase\",\n      flex: 1,\n      lineHeight: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 35\n    }\n  }, PreferredLanguageText('discussion')) : React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setShowComments(!showComments);\n    },\n    style: {\n      flex: 1,\n      flexDirection: 'row',\n      paddingBottom: 40\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 35\n    }\n  }, React.createElement(Text, {\n    style: {\n      lineHeight: 23,\n      marginRight: 10,\n      color: '#a2a2aa',\n      fontSize: 11,\n      textTransform: 'uppercase'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 37\n    }\n  }, PreferredLanguageText('comments')), React.createElement(Text, {\n    style: {\n      lineHeight: 21\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 37\n    }\n  }, React.createElement(Ionicons, {\n    size: 14,\n    name: showComments ? 'caret-down-outline' : 'caret-forward-outline',\n    color: \"#a2a2aa\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 41\n    }\n  }))), showComments ? React.createElement(TouchableOpacity, {\n    key: Math.random(),\n    style: {\n      width: '20%',\n      backgroundColor: 'white'\n    },\n    onPress: function onPress() {\n      return setShowPost(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 33\n    }\n  }, React.createElement(Text, {\n    style: {\n      width: '100%',\n      textAlign: 'right',\n      lineHeight: 23,\n      marginRight: 20,\n      color: '#a2a2aa',\n      fontSize: 11\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 37\n    }\n  }, \"NEW POST\")) : null), React.createElement(Collapse, {\n    isOpened: showComments,\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }, threads.length === 0 ? React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: {\n      width: '100%',\n      color: '#a2a2aa',\n      fontSize: 22,\n      paddingTop: 100,\n      paddingBottom: 100,\n      paddingHorizontal: 5,\n      fontFamily: 'inter',\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 29\n    }\n  }, !props.cueId ? PreferredLanguageText('noPosts') : PreferredLanguageText('noComments'))) : loading ? React.createElement(View, {\n    style: {\n      width: '100%',\n      justifyContent: 'center',\n      flex: 1,\n      flexDirection: 'column',\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 33\n    }\n  }, React.createElement(ActivityIndicator, {\n    color: '#a2a2aa',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 37\n    }\n  })) : React.createElement(View, {\n    style: {\n      width: '100%',\n      height: props.cueId ? 'auto' : windowHeight - 100,\n      backgroundColor: 'white',\n      flex: 1\n    },\n    key: JSON.stringify(filteredThreads),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 33\n    }\n  }, !showThreadCues ? React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    horizontal: false,\n    contentContainerStyle: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 45\n    }\n  }, filteredThreads.map(function (thread, index) {\n    return React.createElement(View, {\n      style: styles.col,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 64\n      }\n    }, React.createElement(ThreadCard, {\n      fadeAnimation: props.fadeAnimation,\n      thread: thread,\n      onPress: function onPress() {\n        return loadCueDiscussions(thread._id);\n      },\n      channelCreatedBy: props.channelCreatedBy,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 61\n      }\n    }));\n  })) : React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    keyboardDismissMode: 'on-drag',\n    style: {\n      flex: 1,\n      paddingTop: 12\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 45\n    }\n  }, threadWithReplies.map(function (thread, index) {\n    return React.createElement(View, {\n      style: {\n        width: '100%',\n        maxWidth: 500,\n        paddingBottom: 10,\n        backgroundColor: 'white'\n      },\n      key: Math.random(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 64\n      }\n    }, React.createElement(ThreadReplyCard, {\n      index: index,\n      deleteThread: function deleteThread() {\n        return deletePost(thread._id);\n      },\n      isOwner: isOwner,\n      channelCreatedBy: props.channelCreatedBy,\n      thread: thread,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 61\n      }\n    }));\n  }), React.createElement(View, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 49\n    }\n  }, React.createElement(NewMessage, {\n    cueId: props.cueId,\n    channelId: props.channelId,\n    parentId: threadId,\n    back: function back() {\n      props.reload();\n      setShowPost(false);\n      setThreadId('');\n    },\n    placeholder: PreferredLanguageText('reply') + \"...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 53\n    }\n  }))), showThreadCues ? null : React.createElement(View, {\n    style: {\n      width: '100%',\n      height: 60,\n      backgroundColor: 'white',\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 45\n    }\n  }, props.cueId === null ? React.createElement(ScrollView, {\n    contentContainerStyle: {\n      height: 20,\n      width: '100%',\n      paddingTop: 15\n    },\n    style: {},\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 57\n    }\n  }, categories.length === 0 ? null : React.createElement(TouchableOpacity, {\n    style: filterChoice === 'All' ? styles.cusCategoryOutline : styles.cusCategory,\n    onPress: function onPress() {\n      return setFilterChoice('All');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 69\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#a2a2aa',\n      lineHeight: 20,\n      fontSize: 12\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 73\n    }\n  }, PreferredLanguageText('all'))), categories.map(function (category) {\n    return React.createElement(TouchableOpacity, {\n      key: Math.random(),\n      style: filterChoice === category ? styles.cusCategoryOutline : styles.cusCategory,\n      onPress: function onPress() {\n        return setFilterChoice(category);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 76\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: '#a2a2aa',\n        lineHeight: 20,\n        fontSize: 12\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 73\n      }\n    }, category));\n  })) : null))));\n};\n\nexport default React.memo(ThreadsList, function (prev, next) {\n  return _.isEqual(prev.threads, next.threads);\n});\n\nvar styleObject = function styleObject() {\n  return StyleSheet.create({\n    screen: {\n      flex: 1\n    },\n    marginSmall: {\n      height: 10\n    },\n    row: {\n      flexDirection: 'row',\n      display: 'flex',\n      width: '100%',\n      backgroundColor: 'white'\n    },\n    col: {\n      width: '100%',\n      height: 70,\n      marginBottom: 15,\n      backgroundColor: 'white'\n    },\n    colorBar: {\n      width: '100%',\n      height: '10%',\n      flexDirection: 'row'\n    },\n    channelOption: {\n      width: '33.333%'\n    },\n    channelText: {\n      textAlign: 'center',\n      overflow: 'hidden'\n    },\n    cusCategory: {\n      fontSize: 15,\n      backgroundColor: 'white',\n      paddingHorizontal: 10,\n      height: 22\n    },\n    cusCategoryOutline: {\n      fontSize: 15,\n      backgroundColor: 'white',\n      paddingHorizontal: 10,\n      height: 22,\n      borderRadius: 10,\n      borderWidth: 1,\n      borderColor: '#a2a2aa',\n      color: 'white'\n    }\n  });\n};","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/ThreadsList.tsx"],"names":["React","useCallback","useEffect","useState","Alert","View","Text","TouchableOpacity","_","ThreadCard","Ionicons","fetchAPI","deleteThread","getThreadWithReplies","markThreadsAsRead","NewMessage","ThreadReplyCard","AsyncStorage","Collapse","PreferredLanguageText","ThreadsList","props","loading","setLoading","unparsedThreads","JSON","parse","stringify","threads","reverse","threadWithReplies","setThreadWithReplies","styles","styleObject","showThreadCues","setShowThreadCues","filterChoice","setFilterChoice","showPost","setShowPost","threadId","setThreadId","showComments","setShowComments","isOwner","setIsOwner","categories","categoryObject","filteredThreads","map","item","category","Object","keys","key","push","filter","unableToLoadThreadAlert","checkConnectionAlert","somethingWentWrongAlert","loadCueDiscussions","tId","getItem","u","user","server","query","variables","then","res","data","thread","catch","err","mutate","mutation","userId","_id","refreshUnreadDiscussionCount","e","console","log","toString","trim","channelCreatedBy","deletePost","delete","reload","width","height","backgroundColor","paddingHorizontal","borderTopRightRadius","cueId","borderTopLeftRadius","textAlign","paddingBottom","channelId","windowHeight","Dimensions","get","borderBottomColor","borderBottomWidth","flexDirection","Math","random","flex","lineHeight","maxWidth","fontSize","textTransform","marginRight","color","length","paddingTop","fontFamily","justifyContent","index","col","fadeAnimation","display","cusCategoryOutline","cusCategory","memo","prev","next","isEqual","StyleSheet","create","screen","marginSmall","row","marginBottom","colorBar","channelOption","channelText","overflow","borderRadius","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { StyleSheet, ActivityIndicator, ScrollView, Dimensions } from 'react-native';\r\nimport Alert from '../components/Alert'\r\nimport { View, Text, TouchableOpacity } from './Themed';\r\nimport _ from 'lodash'\r\nimport ThreadCard from './ThreadCard';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { fetchAPI } from '../graphql/FetchAPI';\r\nimport { deleteThread, getThreadWithReplies, markThreadsAsRead } from '../graphql/QueriesAndMutations';\r\nimport NewMessage from './NewMessage';\r\nimport ThreadReplyCard from './ThreadReplyCard';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Collapse } from 'react-collapse';\r\nimport { PreferredLanguageText } from '../helpers/LanguageContext';\r\n\r\n\r\nconst ThreadsList: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const unparsedThreads: any[] = JSON.parse(JSON.stringify(props.threads))\r\n    const [threads] = useState<any[]>(unparsedThreads.reverse())\r\n    const [threadWithReplies, setThreadWithReplies] = useState<any[]>([])\r\n    const styles = styleObject()\r\n    const [showThreadCues, setShowThreadCues] = useState(false)\r\n    const [filterChoice, setFilterChoice] = useState('All')\r\n    const [showPost, setShowPost] = useState(false)\r\n    const [threadId, setThreadId] = useState('')\r\n    const [showComments, setShowComments] = useState(true)\r\n    const [isOwner, setIsOwner] = useState(false)\r\n    const categories: any[] = []\r\n    const categoryObject: any = {}\r\n    let filteredThreads: any[] = []\r\n    threads.map((item) => {\r\n        if (item.category !== '' && !categoryObject[item.category]) {\r\n            categoryObject[item.category] = 'category'\r\n        }\r\n    })\r\n    Object.keys(categoryObject).map((key) => {\r\n        categories.push(key)\r\n    })\r\n    if (filterChoice === 'All') {\r\n        filteredThreads = threads\r\n    } else {\r\n        filteredThreads = threads.filter((item) => {\r\n            return item.category === filterChoice\r\n        })\r\n    }\r\n\r\n    const unableToLoadThreadAlert = PreferredLanguageText('unableToLoadThread')\r\n    const checkConnectionAlert = PreferredLanguageText('checkConnection')\r\n    const somethingWentWrongAlert = PreferredLanguageText('somethingWentWrong');\r\n\r\n\r\n    const loadCueDiscussions = useCallback(async (tId) => {\r\n        const u = await AsyncStorage.getItem('user')\r\n        if (u) {\r\n            const user = JSON.parse(u)\r\n            setThreadId(tId)\r\n            setLoading(true)\r\n            setShowThreadCues(true)\r\n            const server = fetchAPI('')\r\n            server.query({\r\n                query: getThreadWithReplies,\r\n                variables: {\r\n                    threadId: tId\r\n                }\r\n            })\r\n                .then(res => {\r\n                    setThreadWithReplies(res.data.thread.getThreadWithReplies)\r\n                    setLoading(false)\r\n                })\r\n                .catch(err => {\r\n                    Alert(unableToLoadThreadAlert, checkConnectionAlert)\r\n                    setLoading(false)\r\n                })\r\n            server.mutate({\r\n                mutation: markThreadsAsRead,\r\n                variables: {\r\n                    userId: user._id,\r\n                    threadId: tId\r\n                }\r\n            }).then(res => {\r\n                props.refreshUnreadDiscussionCount()\r\n            })\r\n                .catch(e => console.log(e))\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        (\r\n            async () => {\r\n                const u = await AsyncStorage.getItem(\"user\")\r\n                if (u) {\r\n                    const user = JSON.parse(u)\r\n                    if (user._id.toString().trim() === props.channelCreatedBy.toString().trim()) {\r\n                        setIsOwner(true)\r\n                    }\r\n                }\r\n            }\r\n        )()\r\n    }, [])\r\n\r\n    const deletePost = useCallback((threadId: string) => {\r\n        if (!isOwner) {\r\n            return;\r\n        }\r\n        const server = fetchAPI('')\r\n        server.mutate({\r\n            mutation: deleteThread,\r\n            variables: {\r\n                threadId\r\n            }\r\n        }).then((res) => {\r\n            if (res.data && res.data.thread.delete) {\r\n                props.reload()\r\n            } else {\r\n                Alert(somethingWentWrongAlert)\r\n            }\r\n        }).catch(e => Alert(somethingWentWrongAlert))\r\n    }, [isOwner])\r\n\r\n    if (showPost) {\r\n        return <View style={{\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundColor: 'white',\r\n            paddingHorizontal: 20,\r\n            borderTopRightRadius: props.cueId ? 0 : 30,\r\n            borderTopLeftRadius: props.cueId ? 0 : 30\r\n        }}>\r\n            <Text style={{ width: '100%', textAlign: 'center', height: 15, paddingBottom: 25 }}>\r\n                {/* <Ionicons name='chevron-down' size={20} color={'#e0e0e0'} /> */}\r\n            </Text>\r\n            <NewMessage\r\n                cueId={props.cueId}\r\n                channelId={props.channelId}\r\n                parentId={null}\r\n                back={() => {\r\n                    props.reload()\r\n                    setShowPost(false)\r\n                    setThreadId('')\r\n                }}\r\n                placeholder='Post'\r\n            />\r\n        </View>\r\n    }\r\n\r\n    const windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\r\n    return (\r\n        <View style={{\r\n            backgroundColor: 'white',\r\n            width: '100%',\r\n            height: props.cueId ? 'auto' : windowHeight - 50,\r\n            paddingHorizontal: 20,\r\n            borderTopRightRadius: props.cueId ? 0 : 30,\r\n            borderTopLeftRadius: props.cueId ? 0 : 30,\r\n            // marginBottom: props.cueId ? 0 : 25,\r\n            borderBottomColor: '#f4f4f6',\r\n            borderBottomWidth: props.cueId ? 0 : 1\r\n        }}>\r\n            <Text style={{ width: '100%', textAlign: 'center', height: 15, paddingBottom: 25 }}>\r\n                {/* <Ionicons name='chevron-down' size={20} color={'#e0e0e0'} /> */}\r\n            </Text>\r\n            {\r\n                showThreadCues ?\r\n                    <View style={{ backgroundColor: 'white', flexDirection: 'row', paddingBottom: 15 }}>\r\n                        <TouchableOpacity\r\n                            key={Math.random()}\r\n                            style={{\r\n                                flex: 1,\r\n                                backgroundColor: 'white'\r\n                            }}\r\n                            onPress={() => {\r\n                                props.reload()\r\n                                setThreadWithReplies([])\r\n                                setShowThreadCues(false)\r\n                            }}>\r\n                            <Text style={{\r\n                                width: '100%',\r\n                                lineHeight: 23\r\n                            }}>\r\n                                <Ionicons name='chevron-back-outline' size={23} color={'#202025'} />\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                    :\r\n                    <View style={{ backgroundColor: 'white', flexDirection: 'row', paddingBottom: 25, maxWidth: 500 }}>\r\n                        {\r\n                            !props.cueId\r\n                                ? <Text\r\n                                    ellipsizeMode=\"tail\"\r\n                                    style={{\r\n                                        fontSize: 11,\r\n                                        paddingBottom: 20,\r\n                                        textTransform: \"uppercase\",\r\n                                        // paddingLeft: 10,\r\n                                        flex: 1,\r\n                                        lineHeight: 25\r\n                                    }}>\r\n                                    {PreferredLanguageText('discussion')}\r\n                                </Text>\r\n                                : <TouchableOpacity\r\n                                    onPress={() => setShowComments(!showComments)}\r\n                                    style={{\r\n                                        flex: 1,\r\n                                        flexDirection: 'row',\r\n                                        // paddingTop: 40,\r\n                                        paddingBottom: 40\r\n                                    }}>\r\n                                    <Text style={{\r\n                                        lineHeight: 23,\r\n                                        marginRight: 10,\r\n                                        color: '#a2a2aa',\r\n                                        fontSize: 11,\r\n                                        textTransform: 'uppercase'\r\n                                    }}>\r\n                                        {PreferredLanguageText('comments')}\r\n                                    </Text>\r\n                                    <Text style={{ lineHeight: 21 }}>\r\n                                        <Ionicons size={14} name={showComments ? 'caret-down-outline' : 'caret-forward-outline'} color='#a2a2aa' />\r\n                                    </Text>\r\n                                </TouchableOpacity>\r\n                        }\r\n                        {\r\n                            showComments ?\r\n                                <TouchableOpacity\r\n                                    key={Math.random()}\r\n                                    style={{\r\n                                        width: '20%',\r\n                                        backgroundColor: 'white'\r\n                                    }}\r\n                                    onPress={() => setShowPost(true)}>\r\n                                    <Text style={{\r\n                                        width: '100%',\r\n                                        textAlign: 'right',\r\n                                        lineHeight: 23,\r\n                                        marginRight: 20,\r\n                                        color: '#a2a2aa',\r\n                                        fontSize: 11,\r\n                                    }}>\r\n                                        NEW POST\r\n                                        {/* <Ionicons name='create-outline' size={20} color={'#202025'} /> */}\r\n                                    </Text>\r\n                                </TouchableOpacity> : null\r\n                        }\r\n                    </View>\r\n            }\r\n            <Collapse isOpened={showComments} style={{ flex: 1 }}>\r\n                {\r\n                    threads.length === 0 ?\r\n                        <View style={{ backgroundColor: 'white', flex: 1 }}>\r\n                            <Text style={{ width: '100%', color: '#a2a2aa', fontSize: 22, paddingTop: 100, paddingBottom: 100, paddingHorizontal: 5, fontFamily: 'inter', flex: 1 }}>\r\n                                {\r\n                                    !props.cueId ? PreferredLanguageText('noPosts') : PreferredLanguageText('noComments')\r\n                                }\r\n                            </Text>\r\n                        </View>\r\n                        : (\r\n                            loading ?\r\n                                <View style={{\r\n                                    width: '100%',\r\n                                    justifyContent: 'center',\r\n                                    flex: 1,\r\n                                    flexDirection: 'column',\r\n                                    backgroundColor: 'white'\r\n                                }}>\r\n                                    <ActivityIndicator color={'#a2a2aa'} />\r\n                                </View> :\r\n                                <View style={{\r\n                                    width: '100%',\r\n                                    height: props.cueId ? 'auto' : windowHeight - 100,\r\n                                    // borderWidth: 1,\r\n                                    backgroundColor: 'white',\r\n                                    flex: 1\r\n                                }}\r\n                                    key={JSON.stringify(filteredThreads)}\r\n                                >\r\n                                    {\r\n                                        !showThreadCues ?\r\n                                            <ScrollView\r\n                                                showsVerticalScrollIndicator={false}\r\n                                                horizontal={false}\r\n                                                // style={{ height: '100%' }}\r\n                                                contentContainerStyle={{\r\n                                                    // borderWidth: 2,\r\n                                                    width: '100%',\r\n                                                    // height: windowHeight - 200,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    filteredThreads.map((thread: any, index) => {\r\n                                                        return <View style={styles.col} key={index}>\r\n                                                            <ThreadCard\r\n                                                                fadeAnimation={props.fadeAnimation}\r\n                                                                thread={thread}\r\n                                                                onPress={() => loadCueDiscussions(thread._id)}\r\n                                                                channelCreatedBy={props.channelCreatedBy}\r\n                                                            />\r\n                                                        </View>\r\n                                                    })\r\n                                                }\r\n                                            </ScrollView>\r\n                                            :\r\n                                            <ScrollView\r\n                                                showsVerticalScrollIndicator={false}\r\n                                                keyboardDismissMode={'on-drag'}\r\n                                                style={{ flex: 1, paddingTop: 12 }}>\r\n                                                {\r\n                                                    threadWithReplies.map((thread, index) => {\r\n                                                        return <View style={{ width: '100%', maxWidth: 500, paddingBottom: 10, backgroundColor: 'white' }} key={Math.random()}>\r\n                                                            <ThreadReplyCard\r\n                                                                index={index}\r\n                                                                deleteThread={() => deletePost(thread._id)}\r\n                                                                isOwner={isOwner}\r\n                                                                channelCreatedBy={props.channelCreatedBy}\r\n                                                                thread={thread} />\r\n                                                        </View>\r\n                                                    })\r\n                                                }\r\n                                                <View style={{ backgroundColor: 'white' }}>\r\n                                                    <NewMessage\r\n                                                        cueId={props.cueId}\r\n                                                        channelId={props.channelId}\r\n                                                        parentId={threadId}\r\n                                                        back={() => {\r\n                                                            props.reload()\r\n                                                            setShowPost(false)\r\n                                                            setThreadId('')\r\n                                                        }}\r\n                                                        placeholder={`${PreferredLanguageText('reply')}...`}\r\n                                                    />\r\n                                                </View>\r\n                                            </ScrollView>\r\n                                    }\r\n                                    {\r\n                                        showThreadCues ? null :\r\n                                            <View style={{\r\n                                                width: '100%',\r\n                                                height: 60,\r\n                                                backgroundColor: 'white',\r\n                                                display: 'flex',\r\n                                                justifyContent: 'center',\r\n                                                flexDirection: 'column'\r\n                                            }}>\r\n                                                {\r\n                                                    props.cueId === null ?\r\n                                                        <ScrollView\r\n                                                            contentContainerStyle={{\r\n                                                                height: 20, width: '100%',\r\n                                                                paddingTop: 15\r\n                                                            }}\r\n                                                            style={{}}\r\n                                                            horizontal={true}\r\n                                                            showsHorizontalScrollIndicator={false}\r\n                                                        >\r\n                                                            {\r\n                                                                categories.length === 0 ? null :\r\n                                                                    <TouchableOpacity\r\n                                                                        style={filterChoice === 'All' ? styles.cusCategoryOutline : styles.cusCategory}\r\n                                                                        onPress={() => setFilterChoice('All')}>\r\n                                                                        <Text\r\n                                                                            style={{\r\n                                                                                color: '#a2a2aa',\r\n                                                                                lineHeight: 20,\r\n                                                                                fontSize: 12\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            {PreferredLanguageText('all')}\r\n                                                                        </Text>\r\n                                                                    </TouchableOpacity>\r\n                                                            }\r\n                                                            {\r\n                                                                categories.map((category: string) => {\r\n                                                                    return <TouchableOpacity\r\n                                                                        key={Math.random()}\r\n                                                                        style={filterChoice === category ? styles.cusCategoryOutline : styles.cusCategory}\r\n                                                                        onPress={() => setFilterChoice(category)}>\r\n                                                                        <Text\r\n                                                                            style={{\r\n                                                                                color: '#a2a2aa',\r\n                                                                                lineHeight: 20,\r\n                                                                                fontSize: 12\r\n                                                                            }}>\r\n                                                                            {category}\r\n                                                                        </Text>\r\n                                                                    </TouchableOpacity>\r\n                                                                })\r\n                                                            }\r\n                                                        </ScrollView> : null\r\n                                                }\r\n                                            </View>\r\n                                    }\r\n                                </View>\r\n                        )\r\n                }\r\n            </Collapse>\r\n        </View >\r\n    );\r\n}\r\n\r\nexport default React.memo(ThreadsList, (prev, next) => {\r\n    return _.isEqual(prev.threads, next.threads)\r\n})\r\n\r\nconst styleObject = () => {\r\n    return StyleSheet.create({\r\n        screen: {\r\n            flex: 1\r\n        },\r\n        marginSmall: {\r\n            height: 10\r\n        },\r\n        row: {\r\n            flexDirection: 'row',\r\n            display: 'flex',\r\n            width: '100%',\r\n            backgroundColor: 'white'\r\n        },\r\n        col: {\r\n            width: '100%',\r\n            height: 70,\r\n            marginBottom: 15,\r\n            backgroundColor: 'white'\r\n        },\r\n        colorBar: {\r\n            width: '100%',\r\n            height: '10%',\r\n            flexDirection: 'row'\r\n        },\r\n        channelOption: {\r\n            width: '33.333%'\r\n        },\r\n        channelText: {\r\n            textAlign: 'center',\r\n            overflow: 'hidden'\r\n        },\r\n        cusCategory: {\r\n            fontSize: 15,\r\n            backgroundColor: 'white',\r\n            paddingHorizontal: 10,\r\n            height: 22\r\n        },\r\n        cusCategoryOutline: {\r\n            fontSize: 15,\r\n            backgroundColor: 'white',\r\n            paddingHorizontal: 10,\r\n            height: 22,\r\n            borderRadius: 10,\r\n            borderWidth: 1,\r\n            borderColor: '#a2a2aa',\r\n            color: 'white'\r\n        }\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}