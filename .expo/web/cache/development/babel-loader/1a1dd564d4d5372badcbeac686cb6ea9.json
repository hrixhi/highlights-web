{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\Quiz.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport EquationEditor from 'equation-editor-react';\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { TextInput as CustomTextInput } from \"./CustomTextInput\";\nimport { Text, View } from \"./Themed\";\n\nvar Quiz = function Quiz(props) {\n  var _useState = useState(props.problems),\n      _useState2 = _slicedToArray(_useState, 2),\n      problems = _useState2[0],\n      setProblems = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      solutions = _useState4[0],\n      setSolutions = _useState4[1];\n\n  var _useState5 = useState(Math.random()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      updateKey = _useState6[0],\n      setUpdateKey = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      shuffledProblems = _useState8[0],\n      setShuffledProblems = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1];\n\n  useEffect(function () {\n    if (props.solutions && props.solutions.length !== 0) {\n      setSolutions(props.solutions);\n    } else {\n      var solutionInit = [];\n      problems.map(function (problem) {\n        if (!problem.questionType) {\n          var arr = [];\n          problem.options.map(function (i) {\n            arr.push({\n              options: i.option,\n              isSelected: false\n            });\n          });\n          solutionInit.push({\n            selected: arr\n          });\n        } else {\n          solutionInit.push({\n            response: ''\n          });\n        }\n      });\n      setSolutions(solutionInit);\n      props.setSolutions(solutionInit);\n    }\n  }, [problems, props.solutions, props.setSolutions]);\n  useEffect(function () {\n    if (props.shuffleQuiz && !props.isOwner) {\n      setLoading(true);\n      var updatedProblemsWithIndex = problems.map(function (prob, index) {\n        var updated = _objectSpread(_objectSpread({}, prob), {}, {\n          problemIndex: index\n        });\n\n        return updated;\n      });\n      setProblems(updatedProblemsWithIndex);\n      var shuffledArray = shuffle(updatedProblemsWithIndex);\n      setShuffledProblems(shuffledArray);\n    } else {\n      var _updatedProblemsWithIndex = problems.map(function (prob, index) {\n        var updated = _objectSpread(_objectSpread({}, prob), {}, {\n          problemIndex: index\n        });\n\n        return updated;\n      });\n\n      setProblems(_updatedProblemsWithIndex);\n    }\n\n    setLoading(false);\n  }, [props.shuffleQuiz]);\n\n  function shuffle(input) {\n    var array = _toConsumableArray(input);\n\n    var currentIndex = array.length,\n        randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      var _ref = [array[randomIndex], array[currentIndex]];\n      array[currentIndex] = _ref[0];\n      array[randomIndex] = _ref[1];\n    }\n\n    return array;\n  }\n\n  if (problems.length !== solutions.length) {\n    return null;\n  }\n\n  var displayProblems = props.shuffleQuiz && !props.isOwner && !props.submitted ? shuffledProblems : problems;\n  if (loading || props.loading) return React.createElement(View, {\n    style: {\n      width: \"100%\",\n      flex: 1,\n      justifyContent: \"center\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      backgroundColor: \"white\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 44\n    }\n  }, React.createElement(ActivityIndicator, {\n    color: \"#a2a2aa\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }));\n  return React.createElement(View, {\n    style: {\n      width: '100%',\n      height: '100%',\n      backgroundColor: 'white',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0,\n      paddingTop: 15,\n      flexDirection: 'column',\n      justifyContent: 'flex-start'\n    },\n    key: solutions.toString() + updateKey.toString(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, displayProblems.map(function (problem, index) {\n    var problemIndex = problem.problemIndex;\n    if (problemIndex === undefined || problemIndex === null) return;\n    return React.createElement(View, {\n      style: {\n        borderBottomColor: '#f4f4f6',\n        borderBottomWidth: index === problems.length - 1 ? 0 : 1,\n        marginBottom: 25\n      },\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 28\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, React.createElement(View, {\n      style: {\n        paddingTop: 15\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: '#a2a2aa',\n        fontSize: 15,\n        paddingBottom: 25,\n        marginRight: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }\n    }, index + 1, \".\")), problem.question && problem.question.includes(\"image:\") ? React.createElement(Image, {\n      resizeMode: 'contain',\n      style: {\n        width: 400,\n        height: 400\n      },\n      source: {\n        uri: problem.question.split(\"image:\")[1]\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 38\n      }\n    }) : problem.question && problem.question.includes(\"formula:\") ? React.createElement(View, {\n      style: {\n        borderColor: '#f4f4f6',\n        borderWidth: 1,\n        borderRadius: 15,\n        padding: 10,\n        width: '80%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 45\n      }\n    }, React.createElement(EquationEditor, {\n      value: problem.question.split(\"formula:\")[1],\n      onChange: function onChange() {\n        setUpdateKey(Math.random());\n      },\n      autoCommands: \"pi theta sqrt sum prod alpha beta gamma rho int\",\n      autoOperatorNames: \"sin cos tan arccos arcsin arctan\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 49\n      }\n    })) : React.createElement(TextInput, {\n      editable: false,\n      value: problem.question,\n      style: {\n        fontSize: 15,\n        padding: 15,\n        paddingTop: 12,\n        paddingBottom: 12,\n        marginTop: 5,\n        marginBottom: 20,\n        width: '80%'\n      },\n      placeholder: 'Problem ' + (index + 1).toString(),\n      placeholderTextColor: '#a2a2aa',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 45\n      }\n    }), React.createElement(TextInput, {\n      editable: false,\n      value: problem.points + ' Points',\n      style: {\n        fontSize: 15,\n        padding: 15,\n        paddingTop: 12,\n        paddingBottom: 12,\n        marginTop: 5,\n        marginBottom: 20,\n        width: '20%'\n      },\n      placeholder: 'Enter points',\n      placeholderTextColor: '#a2a2aa',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    })), !problem.questionType && problem.options.map(function (option, i) {\n      var color = '#202025';\n\n      if (props.isOwner && option.isCorrect) {\n        color = '#3B64F8';\n      } else if (props.submitted && option.isCorrect) {\n        color = '#3B64F8';\n      } else if (props.submitted && !option.isCorrect && solutions[problemIndex].selected[i].isSelected) {\n        color = '#D91D56';\n      }\n\n      return React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        key: solutions.toString() + i.toString(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 40\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingTop: 15\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 37\n        }\n      }, React.createElement(\"input\", {\n        disabled: props.submitted || props.isOwner || props.hasEnded,\n        style: {\n          paddingRight: 20\n        },\n        type: \"checkbox\",\n        checked: props.isOwner ? option.isCorrect : solutions[problemIndex].selected[i].isSelected,\n        onChange: function onChange(e) {\n          var updatedSolution = _toConsumableArray(solutions);\n\n          updatedSolution[problemIndex].selected[i].isSelected = !updatedSolution[problemIndex].selected[i].isSelected;\n          setSolutions(updatedSolution);\n          props.setSolutions(updatedSolution);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 41\n        }\n      })), option.option && option.option.includes(\"image:\") ? React.createElement(Image, {\n        resizeMode: 'contain',\n        style: {\n          width: 200,\n          height: 200\n        },\n        source: {\n          uri: option.option.split(\"image:\")[1]\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 46\n        }\n      }) : option.option && option.option.includes(\"formula:\") ? React.createElement(View, {\n        style: {\n          borderColor: '#f4f4f6',\n          borderWidth: 1,\n          borderRadius: 15,\n          padding: 10,\n          width: '30%'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 53\n        }\n      }, React.createElement(EquationEditor, {\n        value: option.option.split(\"formula:\")[1],\n        onChange: function onChange() {\n          setUpdateKey(Math.random());\n        },\n        autoCommands: \"pi theta sqrt sum prod alpha beta gamma rho int\",\n        autoOperatorNames: \"sin cos tan arccos arcsin arctan\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 57\n        }\n      })) : React.createElement(TextInput, {\n        editable: false,\n        value: option.option,\n        style: {\n          width: '50%',\n          fontSize: 15,\n          padding: 15,\n          paddingTop: 12,\n          paddingBottom: 12,\n          marginTop: 5,\n          marginBottom: 20,\n          color: color\n        },\n        placeholder: 'Option ' + (i + 1).toString(),\n        placeholderTextColor: '#a2a2aa',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 53\n        }\n      }));\n    }), problem.questionType === \"freeResponse\" ? React.createElement(View, {\n      style: {\n        width: '80%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 29\n      }\n    }, React.createElement(CustomTextInput, {\n      editable: !props.submitted && !props.graded && !props.isOwner && !props.hasEnded,\n      value: solutions[problemIndex].response,\n      onChange: function onChange(e) {\n        var updatedSolution = _toConsumableArray(solutions);\n\n        updatedSolution[problemIndex].response = e.target.value;\n        setSolutions(updatedSolution);\n        props.setSolutions(updatedSolution);\n      },\n      placeholder: \"Answer\",\n      hasMultipleLines: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 33\n      }\n    })) : null);\n  }));\n};\n\nexport default Quiz;\nvar styles = StyleSheet.create({\n  input: {\n    width: '50%',\n    fontSize: 15,\n    padding: 15,\n    paddingTop: 12,\n    paddingBottom: 12,\n    marginTop: 5,\n    marginBottom: 20\n  }\n});","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/Quiz.tsx"],"names":["EquationEditor","React","useEffect","useState","TextInput","CustomTextInput","Text","View","Quiz","props","problems","setProblems","solutions","setSolutions","Math","random","updateKey","setUpdateKey","shuffledProblems","setShuffledProblems","loading","setLoading","length","solutionInit","map","problem","questionType","arr","options","i","push","option","isSelected","selected","response","shuffleQuiz","isOwner","updatedProblemsWithIndex","prob","index","updated","problemIndex","shuffledArray","shuffle","input","array","currentIndex","randomIndex","floor","displayProblems","submitted","width","flex","justifyContent","display","flexDirection","backgroundColor","height","borderTopLeftRadius","borderTopRightRadius","paddingTop","toString","undefined","borderBottomColor","borderBottomWidth","marginBottom","color","fontSize","paddingBottom","marginRight","question","includes","uri","split","borderColor","borderWidth","borderRadius","padding","marginTop","points","isCorrect","hasEnded","paddingRight","e","updatedSolution","graded","target","value","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import EquationEditor from 'equation-editor-react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Image, StyleSheet, TextInput, ActivityIndicator } from 'react-native';\r\nimport { TextInput as CustomTextInput } from './CustomTextInput'\r\nimport { Text, View } from './Themed';\r\n\r\nconst Quiz: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [problems, setProblems] = useState<any[]>(props.problems)\r\n    const [solutions, setSolutions] = useState<any>([])\r\n    const [updateKey, setUpdateKey] = useState(Math.random())\r\n    const [shuffledProblems, setShuffledProblems] = useState<any[]>([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Over here the solutions objeect for modification is first set and updated based on changes...\r\n    useEffect(() => {\r\n        if (props.solutions && props.solutions.length !== 0) {\r\n            setSolutions(props.solutions)\r\n        } else {\r\n            const solutionInit: any = []\r\n            problems.map((problem: any) => {\r\n\r\n                if (!problem.questionType) {\r\n                    const arr: any = []\r\n\r\n                    problem.options.map((i: any) => {\r\n                        arr.push({\r\n                            options: i.option,\r\n                            isSelected: false\r\n                        })\r\n                    })\r\n\r\n                    solutionInit.push({\r\n                        selected: arr\r\n                    })\r\n                } else {\r\n                    solutionInit.push({\r\n                        response: ''\r\n                    })\r\n                }\r\n                \r\n                \r\n            })\r\n            setSolutions(solutionInit)\r\n            props.setSolutions(solutionInit)\r\n        }\r\n    }, [problems, props.solutions, props.setSolutions])\r\n\r\n    useEffect(() => {\r\n        if (props.shuffleQuiz && !props.isOwner) {\r\n            setLoading(true)\r\n            const updatedProblemsWithIndex = problems.map((prob: any, index: number) => {\r\n                const updated = { ...prob, problemIndex: index };\r\n                return updated\r\n            })\r\n\r\n            setProblems(updatedProblemsWithIndex)\r\n\r\n            const shuffledArray = shuffle(updatedProblemsWithIndex);\r\n          \r\n            setShuffledProblems(shuffledArray)\r\n            \r\n        } else {\r\n            const updatedProblemsWithIndex = problems.map((prob: any, index: number) => {\r\n                const updated = { ...prob, problemIndex: index };\r\n                return updated\r\n            })\r\n\r\n            setProblems(updatedProblemsWithIndex)\r\n        }\r\n        setLoading(false)\r\n\r\n    }, [props.shuffleQuiz])\r\n\r\n    function shuffle(input: any[]) {\r\n\r\n        const array = [...input];\r\n\r\n        var currentIndex = array.length,  randomIndex;\r\n      \r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n      \r\n          // Pick a remaining element...\r\n          randomIndex = Math.floor(Math.random() * currentIndex);\r\n          currentIndex--;\r\n      \r\n          // And swap it with the current element.\r\n          [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n        }\r\n      \r\n        return array;\r\n      }\r\n      \r\n\r\n    if (problems.length !== solutions.length) {\r\n        return null\r\n    }\r\n\r\n    let displayProblems = props.shuffleQuiz && !props.isOwner && !props.submitted ? shuffledProblems : problems;\r\n\r\n    if (loading || props.loading) return  (<View\r\n        style={{\r\n            width: \"100%\",\r\n            flex: 1,\r\n            justifyContent: \"center\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            backgroundColor: \"white\"\r\n        }}>\r\n        <ActivityIndicator color={\"#a2a2aa\"} />\r\n    </View>)\r\n\r\n    return (\r\n        <View style={{\r\n            width: '100%', height: '100%', backgroundColor: 'white',\r\n            borderTopLeftRadius: 0,\r\n            borderTopRightRadius: 0,\r\n            paddingTop: 15,\r\n            flexDirection: 'column',\r\n            justifyContent: 'flex-start'\r\n        }}\r\n            key={solutions.toString() + updateKey.toString()}\r\n        >\r\n            {\r\n                displayProblems.map((problem: any, index: any) => {\r\n\r\n                    const { problemIndex } = problem;\r\n\r\n                    if (problemIndex === undefined || problemIndex === null) return;\r\n\r\n                    return <View style={{ borderBottomColor: '#f4f4f6', borderBottomWidth: index === (problems.length - 1) ? 0 : 1, marginBottom: 25 }} key={index}>\r\n                        <View style={{ flexDirection: 'row' }}>\r\n                            <View style={{ paddingTop: 15 }}>\r\n                                <Text style={{ color: '#a2a2aa', fontSize: 15, paddingBottom: 25, marginRight: 10 }}>\r\n                                    {index + 1}.\r\n                            </Text>\r\n                            </View>\r\n                            {\r\n                                problem.question && problem.question.includes(\"image:\") ?\r\n                                    (<Image\r\n                                        resizeMode={'contain'}\r\n                                        style={{\r\n                                            width: 400,\r\n                                            height: 400\r\n                                        }}\r\n                                        source={{\r\n                                            uri: problem.question.split(\"image:\")[1]\r\n                                        }}\r\n                                    />) :\r\n                                    (\r\n                                        problem.question && problem.question.includes(\"formula:\") ? (\r\n                                            <View style={{\r\n                                                borderColor: '#f4f4f6',\r\n                                                borderWidth: 1,\r\n                                                borderRadius: 15,\r\n                                                padding: 10,\r\n                                                width: '80%'\r\n                                            }}>\r\n                                                <EquationEditor\r\n                                                    value={problem.question.split(\"formula:\")[1]}\r\n                                                    onChange={() => { setUpdateKey(Math.random()) }}\r\n                                                    autoCommands=\"pi theta sqrt sum prod alpha beta gamma rho int\"\r\n                                                    autoOperatorNames=\"sin cos tan arccos arcsin arctan\"\r\n                                                />\r\n                                            </View>\r\n                                        ) :\r\n                                            <TextInput\r\n                                                editable={false}\r\n                                                value={problem.question}\r\n                                                style={{\r\n                                                    fontSize: 15,\r\n                                                    padding: 15,\r\n                                                    paddingTop: 12,\r\n                                                    paddingBottom: 12,\r\n                                                    marginTop: 5,\r\n                                                    marginBottom: 20,\r\n                                                    width: '80%'\r\n                                                }}\r\n                                                placeholder={'Problem ' + (index + 1).toString()}\r\n                                                placeholderTextColor={'#a2a2aa'}\r\n                                            />\r\n                                    )\r\n                            }\r\n                            <TextInput\r\n                                editable={false}\r\n                                value={problem.points + ' Points'}\r\n                                style={{\r\n                                    fontSize: 15,\r\n                                    padding: 15,\r\n                                    paddingTop: 12,\r\n                                    paddingBottom: 12,\r\n                                    marginTop: 5,\r\n                                    marginBottom: 20,\r\n                                    width: '20%'\r\n                                }}\r\n                                placeholder={'Enter points'}\r\n                                placeholderTextColor={'#a2a2aa'}\r\n                            />\r\n                        </View>\r\n                        {\r\n                            !problem.questionType && problem.options.map((option: any, i: any) => {\r\n\r\n                                let color = '#202025'\r\n                                if (props.isOwner && option.isCorrect) {\r\n                                    color = '#3B64F8'\r\n                                } else if (props.submitted && option.isCorrect ) {\r\n                                    color = '#3B64F8'\r\n                                } else if (props.submitted && !option.isCorrect && solutions[problemIndex].selected[i].isSelected)  {\r\n                                    color = '#D91D56'\r\n                                }\r\n\r\n\r\n                                return <View style={{ flexDirection: 'row' }} key={solutions.toString() + i.toString()}>\r\n                                    <View style={{ paddingTop: 15 }}>\r\n                                        <input\r\n                                            disabled={props.submitted || props.isOwner || props.hasEnded}\r\n                                            style={{ paddingRight: 20 }}\r\n                                            type='checkbox'\r\n                                            // value={props.isOwner ? String(option.isCorrect) : String(solutions[index].selected[i].isSelected)}\r\n                                            checked={props.isOwner ? option.isCorrect : solutions[problemIndex].selected[i].isSelected}\r\n                                            onChange={(e) => {\r\n                                                const updatedSolution = [...solutions]\r\n                                                updatedSolution[problemIndex].selected[i].isSelected = !updatedSolution[problemIndex].selected[i].isSelected;\r\n                                                setSolutions(updatedSolution)\r\n                                                props.setSolutions(updatedSolution)\r\n                                            }}\r\n                                        />\r\n                                    </View>\r\n                                    {\r\n                                        option.option && option.option.includes(\"image:\") ?\r\n                                            (<Image\r\n                                                resizeMode={'contain'}\r\n                                                style={{\r\n                                                    width: 200,\r\n                                                    height: 200\r\n                                                }}\r\n                                                source={{\r\n                                                    uri: option.option.split(\"image:\")[1]\r\n                                                }}\r\n                                            />) :\r\n                                            (\r\n                                                option.option && option.option.includes(\"formula:\") ?\r\n                                                    <View style={{\r\n                                                        borderColor: '#f4f4f6',\r\n                                                        borderWidth: 1,\r\n                                                        borderRadius: 15,\r\n                                                        padding: 10,\r\n                                                        width: '30%'\r\n                                                    }}>\r\n                                                        <EquationEditor\r\n                                                            value={option.option.split(\"formula:\")[1]}\r\n                                                            onChange={() => { setUpdateKey(Math.random()) }}\r\n                                                            autoCommands=\"pi theta sqrt sum prod alpha beta gamma rho int\"\r\n                                                            autoOperatorNames=\"sin cos tan arccos arcsin arctan\"\r\n                                                        />\r\n                                                    </View> :\r\n                                                    <TextInput\r\n                                                        editable={false}\r\n                                                        value={option.option}\r\n                                                        style={{\r\n                                                            width: '50%',\r\n                                                            fontSize: 15,\r\n                                                            padding: 15,\r\n                                                            paddingTop: 12,\r\n                                                            paddingBottom: 12,\r\n                                                            marginTop: 5,\r\n                                                            marginBottom: 20,\r\n                                                            color\r\n                                                        }}\r\n                                                        placeholder={'Option ' + (i + 1).toString()}\r\n                                                        placeholderTextColor={'#a2a2aa'}\r\n                                                    />\r\n                                            )\r\n                                    }\r\n                                </View>\r\n                            })\r\n                        }\r\n                        {\r\n                            problem.questionType === \"freeResponse\" ? \r\n\r\n                            <View style={{ width: '80%',  }}>\r\n                                <CustomTextInput \r\n                                    editable={!props.submitted && !props.graded && !props.isOwner && !props.hasEnded}\r\n                                    value={solutions[problemIndex].response}\r\n                                    onChange={(e: any) => {\r\n                                        const updatedSolution = [...solutions]\r\n                                        updatedSolution[problemIndex].response = e.target.value;\r\n                                        setSolutions(updatedSolution)\r\n                                        props.setSolutions(updatedSolution)\r\n                                    }}\r\n                                    placeholder='Answer'\r\n                                    hasMultipleLines={true}\r\n\r\n                                />\r\n                            \r\n                            </View>\r\n                            :\r\n                            null\r\n\r\n                        }\r\n                    </View>\r\n                })\r\n            }\r\n\r\n\r\n            {/* Add Submit button here */}\r\n        </View >\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n\r\nconst styles = StyleSheet.create({\r\n    input: {\r\n        width: '50%',\r\n        // borderBottomColor: '#f4f4f6',\r\n        // borderBottomWidth: 1,\r\n        fontSize: 15,\r\n        padding: 15,\r\n        paddingTop: 12,\r\n        paddingBottom: 12,\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}