{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\ChannelControls.tsx\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TextInput } from \"./CustomTextInput\";\nimport { Text, View, TouchableOpacity } from \"./Themed\";\nimport { fetchAPI } from \"../graphql/FetchAPI\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { checkChannelStatus, createChannel, createUser, getOrganisation, getRole, subscribe, updateUser } from \"../graphql/QueriesAndMutations\";\nimport Alert from \"../components/Alert\";\nimport { uniqueNamesGenerator, colors } from 'unique-names-generator';\nimport { PreferredLanguageText } from \"../helpers/LanguageContext\";\n\nvar ChannelControls = function ChannelControls(props) {\n  var _useState = useState('Subscribe'),\n      _useState2 = _slicedToArray(_useState, 2),\n      option = _useState2[0],\n      setOption = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      passwordRequired = _useState8[0],\n      setPasswordRequired = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      displayName = _useState10[0],\n      setDisplayName = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      fullName = _useState12[0],\n      setFullName = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      userFound = _useState14[0],\n      setUserFound = _useState14[1];\n\n  var _useState15 = useState(null),\n      _useState16 = _slicedToArray(_useState15, 2),\n      school = _useState16[0],\n      setSchool = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      role = _useState18[0],\n      setRole = _useState18[1];\n\n  var _useState19 = useState(true),\n      _useState20 = _slicedToArray(_useState19, 2),\n      isSubmitDisabled = _useState20[0],\n      setIsSubmitDisabled = _useState20[1];\n\n  var incorrectPasswordAlert = PreferredLanguageText('incorrectPassword');\n  var alreadySubscribedAlert = PreferredLanguageText('alreadySubscribed');\n  var somethingWrongAlert = PreferredLanguageText('somethingWentWrong');\n  var checkConnectionAlert = PreferredLanguageText('checkConnection');\n  var doesNotExistAlert = PreferredLanguageText('doesNotExists');\n  var invalidChannelNameAlert = PreferredLanguageText('invalidChannelName');\n  var nameAlreadyInUseAlert = PreferredLanguageText('nameAlreadyInUse');\n  var changesNotSavedAlert = PreferredLanguageText('changesNotSaved');\n  useEffect(function () {\n    if (option === \"Subscribe\") {\n      if (!passwordRequired && name) {\n        setIsSubmitDisabled(false);\n        return;\n      } else if (passwordRequired && name && password) {\n        setIsSubmitDisabled(false);\n        return;\n      }\n    } else {\n      if (name) {\n        setIsSubmitDisabled(false);\n        return;\n      }\n    }\n\n    setIsSubmitDisabled(true);\n  }, [name, password, passwordRequired, option]);\n  var handleSubscribe = useCallback(function _callee() {\n    var uString, user, server;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            uString = _context.sent;\n            user = JSON.parse(uString);\n            server = fetchAPI('');\n            server.mutate({\n              mutation: subscribe,\n              variables: {\n                userId: user._id,\n                name: name,\n                password: password\n              }\n            }).then(function (res) {\n              if (res.data.subscription && res.data.subscription.subscribe) {\n                var subscriptionStatus = res.data.subscription.subscribe;\n\n                switch (subscriptionStatus) {\n                  case \"subscribed\":\n                    props.closeModal();\n                    break;\n\n                  case \"incorrect-password\":\n                    Alert(incorrectPasswordAlert);\n                    break;\n\n                  case \"already-subbed\":\n                    Alert(alreadySubscribedAlert);\n                    break;\n\n                  case \"error\":\n                    Alert(somethingWrongAlert, checkConnectionAlert);\n                    break;\n\n                  default:\n                    Alert(somethingWrongAlert, checkConnectionAlert);\n                    break;\n                }\n              }\n            }).catch(function (err) {\n              Alert(somethingWrongAlert, checkConnectionAlert);\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [name, password, props.closeModal]);\n  var handleSubmit = useCallback(function _callee3() {\n    var uString, user, server, _server, u, parsedUser, _server2;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            uString = _context3.sent;\n            user = JSON.parse(uString);\n\n            if (!(option === 'Subscribe')) {\n              _context3.next = 10;\n              break;\n            }\n\n            if (!(name.toString().trim() === '')) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 7:\n            if (passwordRequired === true) {\n              handleSubscribe();\n            } else {\n              server = fetchAPI('');\n              server.query({\n                query: checkChannelStatus,\n                variables: {\n                  name: name\n                }\n              }).then(function (res) {\n                if (res.data.channel && res.data.channel.getChannelStatus) {\n                  var channelStatus = res.data.channel.getChannelStatus;\n\n                  switch (channelStatus) {\n                    case \"public\":\n                      handleSubscribe();\n                      break;\n\n                    case \"private\":\n                      setPasswordRequired(true);\n                      break;\n\n                    case \"non-existant\":\n                      Alert(doesNotExistAlert);\n                      break;\n\n                    default:\n                      Alert(somethingWrongAlert, checkConnectionAlert);\n                      break;\n                  }\n                }\n              }).catch(function (err) {\n                Alert(somethingWrongAlert, checkConnectionAlert);\n              });\n            }\n\n            _context3.next = 24;\n            break;\n\n          case 10:\n            if (!(option === 'Create')) {\n              _context3.next = 17;\n              break;\n            }\n\n            if (!(name.toString().trim() === '')) {\n              _context3.next = 13;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 13:\n            _server = fetchAPI('');\n\n            _server.mutate({\n              mutation: createChannel,\n              variables: {\n                name: name,\n                password: password,\n                createdBy: user._id\n              }\n            }).then(function (res) {\n              if (res.data.channel.create) {\n                var channelCreateStatus = res.data.channel.create;\n\n                switch (channelCreateStatus) {\n                  case \"created\":\n                    props.closeModal();\n                    break;\n\n                  case \"invalid-name\":\n                    Alert(invalidChannelNameAlert);\n                    break;\n\n                  case \"exists\":\n                    Alert(nameAlreadyInUseAlert);\n                    break;\n\n                  case \"error\":\n                    Alert(somethingWrongAlert, checkConnectionAlert);\n                    break;\n\n                  default:\n                    Alert(somethingWrongAlert, checkConnectionAlert);\n                    break;\n                }\n              }\n            }).catch(function (err) {\n              Alert(somethingWrongAlert, checkConnectionAlert);\n            });\n\n            _context3.next = 24;\n            break;\n\n          case 17:\n            if (!(option === 'Profile')) {\n              _context3.next = 24;\n              break;\n            }\n\n            if (!(displayName.toString().trim() === '' || fullName.toString().trim() === '')) {\n              _context3.next = 20;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 20:\n            _context3.next = 22;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 22:\n            u = _context3.sent;\n\n            if (u) {\n              parsedUser = JSON.parse(u);\n              parsedUser[\"displayName\"] = displayName.toString().trim();\n              parsedUser[\"fullName\"] = fullName.toString().trim();\n              _server2 = fetchAPI('');\n\n              _server2.mutate({\n                mutation: updateUser,\n                variables: {\n                  userId: parsedUser._id,\n                  displayName: displayName,\n                  fullName: fullName\n                }\n              }).then(function _callee2(res) {\n                var updatedValue;\n                return _regeneratorRuntime.async(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (!(res.data.user && res.data.user.update)) {\n                          _context2.next = 5;\n                          break;\n                        }\n\n                        updatedValue = JSON.stringify(parsedUser);\n                        _context2.next = 4;\n                        return _regeneratorRuntime.awrap(AsyncStorage.setItem('user', updatedValue));\n\n                      case 4:\n                        props.closeModal();\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }).catch(function (err) {\n                Alert(changesNotSavedAlert, checkConnectionAlert);\n              });\n            }\n\n          case 24:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [option, name, password, props.closeModal, passwordRequired, displayName, fullName]);\n  var loadUser = useCallback(function _callee5() {\n    var u, server, parsedUser, _server3, _fullName, _displayName, notificationId;\n\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            u = _context5.sent;\n            server = fetchAPI('');\n\n            if (u) {\n              parsedUser = JSON.parse(u);\n              setDisplayName(parsedUser.displayName);\n              setFullName(parsedUser.fullName);\n              setUserFound(true);\n              _server3 = fetchAPI('');\n\n              _server3.query({\n                query: getOrganisation,\n                variables: {\n                  userId: parsedUser._id\n                }\n              }).then(function (res) {\n                if (res.data && res.data.school.findByUserId) {\n                  setSchool(res.data.school.findByUserId);\n                }\n              });\n\n              _server3.query({\n                query: getRole,\n                variables: {\n                  userId: parsedUser._id\n                }\n              }).then(function (res) {\n                if (res.data && res.data.user.getRole) {\n                  setRole(res.data.user.getRole);\n                }\n              });\n            } else {\n              _fullName = uniqueNamesGenerator({\n                dictionaries: [colors]\n              }) + Math.floor(Math.random() * (999 - 100 + 1) + 100).toString();\n              _displayName = _fullName;\n              notificationId = 'NOT_SET';\n              server.mutate({\n                mutation: createUser,\n                variables: {\n                  fullName: _fullName,\n                  displayName: _displayName,\n                  notificationId: notificationId\n                }\n              }).then(function _callee4(res) {\n                var u, sU;\n                return _regeneratorRuntime.async(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        u = res.data.user.create;\n\n                        if (u.__typename) {\n                          delete u.__typename;\n                        }\n\n                        sU = JSON.stringify(u);\n                        _context4.next = 5;\n                        return _regeneratorRuntime.awrap(AsyncStorage.setItem('user', sU));\n\n                      case 5:\n                        setDisplayName(u.displayName);\n                        setFullName(u.fullName);\n                        setUserFound(true);\n\n                      case 8:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }).catch(function (err) {\n                Alert(\"Unable to register user.\", \"Check connection.\");\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  useEffect(function () {\n    loadUser();\n  }, []);\n\n  if (!userFound) {\n    return React.createElement(View, {\n      style: styles.screen,\n      key: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 16\n      }\n    }, React.createElement(View, {\n      style: {\n        width: '100%',\n        backgroundColor: 'white'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.colorBar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 22,\n        color: '#a2a2aa'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 21\n      }\n    }, PreferredLanguageText('internetRequired')))));\n  }\n\n  return React.createElement(View, {\n    style: styles.screen,\n    key: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      width: '100%',\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 11,\n      paddingBottom: 25,\n      textTransform: \"uppercase\",\n      flex: 1,\n      lineHeight: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }\n  }, PreferredLanguageText('channels')), React.createElement(View, {\n    style: styles.colorBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: option === 'Subscribe' ? styles.allOutline : styles.all,\n    onPress: function onPress() {\n      setOption('Subscribe');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#a2a2aa',\n      lineHeight: 20,\n      fontSize: 12\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 25\n    }\n  }, PreferredLanguageText('subscribe'))), role === 'student' && school && school.allowStudentChannelCreation === false ? null : React.createElement(TouchableOpacity, {\n    style: option === 'Create' ? styles.allOutline : styles.all,\n    onPress: function onPress() {\n      setOption('Create');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 29\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#a2a2aa',\n      lineHeight: 20,\n      fontSize: 12\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 33\n    }\n  }, PreferredLanguageText('create')))), option === 'Profile' ? React.createElement(View, {\n    style: {\n      width: '100%',\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#202025',\n      fontSize: 14,\n      paddingBottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 29\n    }\n  }, \"Display Name\"), React.createElement(TextInput, {\n    value: displayName,\n    placeholder: '',\n    onChangeText: function onChangeText(val) {\n      return setDisplayName(val);\n    },\n    placeholderTextColor: '#a2a2aa',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 29\n    }\n  }), React.createElement(Text, {\n    style: {\n      color: '#202025',\n      fontSize: 14,\n      paddingBottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 29\n    }\n  }, \"Full Name\"), React.createElement(TextInput, {\n    value: fullName,\n    placeholder: '',\n    onChangeText: function onChangeText(val) {\n      return setFullName(val);\n    },\n    placeholderTextColor: '#a2a2aa',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 29\n    }\n  })) : React.createElement(View, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#202025',\n      fontSize: 14,\n      paddingBottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 29\n    }\n  }, PreferredLanguageText('channel') + ' ' + PreferredLanguageText('name')), React.createElement(TextInput, {\n    value: name,\n    placeholder: '',\n    onChangeText: function onChangeText(val) {\n      setName(val);\n      setPasswordRequired(false);\n    },\n    placeholderTextColor: '#a2a2aa',\n    required: true,\n    footerMessage: 'case sensitive',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 29\n    }\n  })), option === 'Subscribe' && passwordRequired || option === 'Create' ? React.createElement(View, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#202025',\n      fontSize: 14,\n      paddingBottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 29\n    }\n  }, PreferredLanguageText('enrolmentPassword')), React.createElement(TextInput, {\n    value: password,\n    placeholder: option === 'Subscribe' ? '' : \"(\" + PreferredLanguageText('optional') + \")\",\n    onChangeText: function onChangeText(val) {\n      return setPassword(val);\n    },\n    placeholderTextColor: '#a2a2aa',\n    secureTextEntry: true,\n    required: option === \"Subscribe\" ? true : false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 29\n    }\n  })) : option === 'Subscribe' && !passwordRequired ? React.createElement(View, {\n    style: {\n      height: 115,\n      width: '100%',\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 33\n    }\n  }) : null, React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white',\n      justifyContent: 'center',\n      display: 'flex',\n      flexDirection: 'row',\n      height: 50,\n      paddingTop: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 17\n    }\n  }, option === 'About' ? null : React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return handleSubmit();\n    },\n    style: {\n      backgroundColor: 'white',\n      borderRadius: 15,\n      overflow: 'hidden',\n      height: 35,\n      marginTop: 15\n    },\n    disabled: isSubmitDisabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 29\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      lineHeight: 35,\n      color: 'white',\n      fontSize: 12,\n      backgroundColor: '#3B64F8',\n      paddingHorizontal: 25,\n      fontFamily: 'inter',\n      height: 35,\n      textTransform: 'uppercase'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 33\n    }\n  }, option === 'Subscribe' ? PreferredLanguageText('subscribe') : PreferredLanguageText('create'))))));\n};\n\nexport default ChannelControls;\nvar styles = StyleSheet.create({\n  screen: {\n    padding: 15,\n    paddingHorizontal: 20,\n    width: '100%',\n    height: Dimensions.get('window').height - 50,\n    backgroundColor: 'white'\n  },\n  outline: {\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#a2a2aa'\n  },\n  all: {\n    fontSize: 15,\n    color: '#a2a2aa',\n    height: 22,\n    paddingHorizontal: 10,\n    backgroundColor: 'white'\n  },\n  allOutline: {\n    fontSize: 15,\n    color: '#a2a2aa',\n    height: 22,\n    paddingHorizontal: 10,\n    backgroundColor: 'white',\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#a2a2aa'\n  },\n  colorBar: {\n    width: '100%',\n    flexDirection: 'row',\n    backgroundColor: 'white',\n    marginBottom: '15%',\n    lineHeight: 18,\n    paddingTop: 20\n  },\n  input: {\n    width: '100%',\n    borderBottomColor: '#f4f4f6',\n    borderBottomWidth: 1,\n    fontSize: 15,\n    padding: 15,\n    paddingTop: 13,\n    paddingBottom: 13,\n    marginTop: 5,\n    marginBottom: 20\n  }\n});","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/ChannelControls.tsx"],"names":["React","useState","useEffect","useCallback","TextInput","Text","View","TouchableOpacity","fetchAPI","AsyncStorage","checkChannelStatus","createChannel","createUser","getOrganisation","getRole","subscribe","updateUser","Alert","uniqueNamesGenerator","colors","PreferredLanguageText","ChannelControls","props","option","setOption","name","setName","password","setPassword","passwordRequired","setPasswordRequired","displayName","setDisplayName","fullName","setFullName","userFound","setUserFound","school","setSchool","role","setRole","isSubmitDisabled","setIsSubmitDisabled","incorrectPasswordAlert","alreadySubscribedAlert","somethingWrongAlert","checkConnectionAlert","doesNotExistAlert","invalidChannelNameAlert","nameAlreadyInUseAlert","changesNotSavedAlert","handleSubscribe","getItem","uString","user","JSON","parse","server","mutate","mutation","variables","userId","_id","then","res","data","subscription","subscriptionStatus","closeModal","catch","err","handleSubmit","toString","trim","query","channel","getChannelStatus","channelStatus","createdBy","create","channelCreateStatus","u","parsedUser","update","updatedValue","stringify","setItem","loadUser","findByUserId","dictionaries","Math","floor","random","notificationId","__typename","sU","styles","screen","width","backgroundColor","colorBar","fontSize","color","paddingBottom","textTransform","flex","lineHeight","allOutline","all","allowStudentChannelCreation","val","height","justifyContent","display","flexDirection","paddingTop","borderRadius","overflow","marginTop","textAlign","paddingHorizontal","fontFamily","StyleSheet","padding","Dimensions","get","outline","borderWidth","borderColor","marginBottom","input","borderBottomColor","borderBottomWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Dimensions, StyleSheet } from 'react-native';\r\nimport { TextInput } from \"./CustomTextInput\";\r\nimport { Text, View, TouchableOpacity } from './Themed';\r\nimport { fetchAPI } from '../graphql/FetchAPI';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { checkChannelStatus, createChannel, createUser, getOrganisation, getRole, subscribe, updateUser } from '../graphql/QueriesAndMutations';\r\nimport Alert from '../components/Alert'\r\nimport { uniqueNamesGenerator, colors } from 'unique-names-generator'\r\nimport { PreferredLanguageText } from '../helpers/LanguageContext';\r\n\r\nconst ChannelControls: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [option, setOption] = useState('Subscribe')\r\n    const [name, setName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [passwordRequired, setPasswordRequired] = useState(false)\r\n    const [displayName, setDisplayName] = useState('')\r\n    const [fullName, setFullName] = useState('')\r\n    const [userFound, setUserFound] = useState(false)\r\n    const [school, setSchool] = useState<any>(null)\r\n    const [role, setRole] = useState('')\r\n\r\n    const [isSubmitDisabled, setIsSubmitDisabled] = useState(true);\r\n\r\n    // Alert messages\r\n    const incorrectPasswordAlert = PreferredLanguageText('incorrectPassword');\r\n    const alreadySubscribedAlert = PreferredLanguageText('alreadySubscribed');\r\n    const somethingWrongAlert = PreferredLanguageText('somethingWentWrong');\r\n    const checkConnectionAlert = PreferredLanguageText('checkConnection')\r\n    const doesNotExistAlert = PreferredLanguageText('doesNotExists');\r\n    const invalidChannelNameAlert = PreferredLanguageText('invalidChannelName');\r\n    const nameAlreadyInUseAlert = PreferredLanguageText('nameAlreadyInUse');\r\n    const changesNotSavedAlert = PreferredLanguageText('changesNotSaved')\r\n\r\n\r\n    useEffect(() => {\r\n        if (option === \"Subscribe\") {\r\n            if (!passwordRequired && name) {\r\n                setIsSubmitDisabled(false);\r\n                return;\r\n            } else if (passwordRequired && name && password) {\r\n                setIsSubmitDisabled(false);\r\n                return;\r\n            }\r\n\r\n        } else {\r\n            if (name) {\r\n                setIsSubmitDisabled(false)\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        setIsSubmitDisabled(true);\r\n\r\n    }, [name, password, passwordRequired, option])\r\n\r\n    const handleSubscribe = useCallback(async () => {\r\n\r\n        const uString: any = await AsyncStorage.getItem('user')\r\n        const user = JSON.parse(uString)\r\n\r\n        const server = fetchAPI('')\r\n        server.mutate({\r\n            mutation: subscribe,\r\n            variables: {\r\n                userId: user._id,\r\n                name,\r\n                password\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.data.subscription && res.data.subscription.subscribe) {\r\n                    const subscriptionStatus = res.data.subscription.subscribe\r\n                    switch (subscriptionStatus) {\r\n                        case \"subscribed\":\r\n                            props.closeModal()\r\n                            break;\r\n                        case \"incorrect-password\":\r\n                            Alert(incorrectPasswordAlert)\r\n                            break;\r\n                        case \"already-subbed\":\r\n                            Alert(alreadySubscribedAlert)\r\n                            break;\r\n                        case \"error\":\r\n                            Alert(somethingWrongAlert, checkConnectionAlert)\r\n                            break;\r\n                        default:\r\n                            Alert(somethingWrongAlert, checkConnectionAlert)\r\n                            break;\r\n                    }\r\n                }\r\n            })\r\n            .catch(err => {\r\n                Alert(somethingWrongAlert, checkConnectionAlert)\r\n            })\r\n\r\n    }, [name, password, props.closeModal])\r\n\r\n    const handleSubmit = useCallback(async () => {\r\n\r\n        const uString: any = await AsyncStorage.getItem('user')\r\n        const user = JSON.parse(uString)\r\n\r\n        if (option === 'Subscribe') {\r\n\r\n            if (name.toString().trim() === '') {\r\n                return\r\n            }\r\n\r\n            if (passwordRequired === true) {\r\n                handleSubscribe()\r\n            } else {\r\n                const server = fetchAPI('')\r\n                server.query({\r\n                    query: checkChannelStatus,\r\n                    variables: {\r\n                        name\r\n                    }\r\n                }).then(res => {\r\n                    if (res.data.channel && res.data.channel.getChannelStatus) {\r\n                        const channelStatus = res.data.channel.getChannelStatus\r\n                        switch (channelStatus) {\r\n                            case \"public\":\r\n                                handleSubscribe()\r\n                                break;\r\n                            case \"private\":\r\n                                setPasswordRequired(true)\r\n                                break;\r\n                            case \"non-existant\":\r\n                                Alert(doesNotExistAlert)\r\n                                break;\r\n                            default:\r\n                                Alert(somethingWrongAlert, checkConnectionAlert)\r\n                                break\r\n                        }\r\n                    }\r\n                }).catch(err => {\r\n                    Alert(somethingWrongAlert, checkConnectionAlert)\r\n                })\r\n            }\r\n        } else if (option === 'Create') {\r\n\r\n            if (name.toString().trim() === '') {\r\n                return\r\n            }\r\n\r\n            const server = fetchAPI('')\r\n            server.mutate({\r\n                mutation: createChannel,\r\n                variables: {\r\n                    name,\r\n                    password,\r\n                    createdBy: user._id\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (res.data.channel.create) {\r\n                        const channelCreateStatus = res.data.channel.create\r\n                        switch (channelCreateStatus) {\r\n                            case \"created\":\r\n                                props.closeModal()\r\n                                break;\r\n                            case \"invalid-name\":\r\n                                Alert(invalidChannelNameAlert)\r\n                                break;\r\n                            case \"exists\":\r\n                                Alert(nameAlreadyInUseAlert)\r\n                                break;\r\n                            case \"error\":\r\n                                Alert(somethingWrongAlert, checkConnectionAlert)\r\n                                break;\r\n                            default:\r\n                                Alert(somethingWrongAlert, checkConnectionAlert)\r\n                                break;\r\n                        }\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    Alert(somethingWrongAlert, checkConnectionAlert)\r\n                })\r\n        } else if (option === 'Profile') {\r\n            if (displayName.toString().trim() === '' || fullName.toString().trim() === '') {\r\n                return;\r\n            }\r\n            const u = await AsyncStorage.getItem('user')\r\n            if (u) {\r\n                const parsedUser = JSON.parse(u)\r\n                parsedUser[\"displayName\"] = displayName.toString().trim()\r\n                parsedUser[\"fullName\"] = fullName.toString().trim()\r\n                const server = fetchAPI('')\r\n                server.mutate({\r\n                    mutation: updateUser,\r\n                    variables: {\r\n                        userId: parsedUser._id,\r\n                        displayName,\r\n                        fullName\r\n                    }\r\n                }).then(async (res) => {\r\n                    if (res.data.user && res.data.user.update) {\r\n                        const updatedValue = JSON.stringify(parsedUser)\r\n                        await AsyncStorage.setItem('user', updatedValue)\r\n                        props.closeModal()\r\n                    }\r\n                }).catch(err => {\r\n                    Alert(changesNotSavedAlert, checkConnectionAlert)\r\n                })\r\n            }\r\n        }\r\n\r\n    }, [option, name, password, props.closeModal, passwordRequired, displayName, fullName])\r\n\r\n    const loadUser = useCallback(async () => {\r\n        const u = await AsyncStorage.getItem('user')\r\n        const server = fetchAPI('')\r\n        if (u) {\r\n            const parsedUser = JSON.parse(u)\r\n            setDisplayName(parsedUser.displayName)\r\n            setFullName(parsedUser.fullName)\r\n            setUserFound(true)\r\n            const server = fetchAPI('')\r\n            server.query({\r\n                query: getOrganisation,\r\n                variables: {\r\n                    userId: parsedUser._id\r\n                }\r\n            }).then(res => {\r\n                if (res.data && res.data.school.findByUserId) {\r\n                    setSchool(res.data.school.findByUserId)\r\n                }\r\n            })\r\n            server.query({\r\n                query: getRole,\r\n                variables: {\r\n                    userId: parsedUser._id\r\n                }\r\n            }).then(res => {\r\n                if (res.data && res.data.user.getRole) {\r\n                    setRole(res.data.user.getRole)\r\n                }\r\n            })\r\n        } else {\r\n            const fullName = uniqueNamesGenerator({\r\n                dictionaries: [colors]\r\n            }) + Math.floor(Math.random() * (999 - 100 + 1) + 100).toString();\r\n            const displayName = fullName\r\n            const notificationId = 'NOT_SET';\r\n            server.mutate({\r\n                mutation: createUser,\r\n                variables: {\r\n                    fullName,\r\n                    displayName,\r\n                    notificationId\r\n                }\r\n            })\r\n                .then(async res => {\r\n                    const u = res.data.user.create\r\n                    if (u.__typename) {\r\n                        delete u.__typename\r\n                    }\r\n                    const sU = JSON.stringify(u)\r\n                    await AsyncStorage.setItem('user', sU)\r\n                    setDisplayName(u.displayName)\r\n                    setFullName(u.fullName)\r\n                    setUserFound(true)\r\n                })\r\n                .catch(err => {\r\n                    Alert(\"Unable to register user.\", \"Check connection.\")\r\n                })\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        loadUser()\r\n    }, [])\r\n\r\n    if (!userFound) {\r\n        return <View style={styles.screen} key={1}>\r\n            <View style={{ width: '100%', backgroundColor: 'white' }}>\r\n                <View style={styles.colorBar}>\r\n                    <Text style={{\r\n                        fontSize: 22, color: '#a2a2aa',\r\n                        // \r\n                    }}>\r\n                        {PreferredLanguageText('internetRequired')}\r\n                    </Text>\r\n                </View>\r\n            </View>\r\n        </View>\r\n    }\r\n\r\n    return (\r\n        <View style={styles.screen} key={1}>\r\n            <View style={{ width: '100%', backgroundColor: 'white' }}>\r\n                <Text\r\n                    style={{\r\n                        fontSize: 11,\r\n                        paddingBottom: 25,\r\n                        textTransform: \"uppercase\",\r\n                        // paddingLeft: 10,\r\n                        flex: 1,\r\n                        lineHeight: 25\r\n                    }}>\r\n                    {PreferredLanguageText('channels')}\r\n                </Text>\r\n                {/* <Text style={{ paddingVertical: 15, fontSize: 14, color: '#a2a2a2' }}>\r\n                    Users can store personal content in the 'My Cues' channel.{'\\n\\n'}\r\n                </Text> */}\r\n                <View style={styles.colorBar}>\r\n                    <TouchableOpacity\r\n                        style={option === 'Subscribe' ? styles.allOutline : styles.all}\r\n                        onPress={() => {\r\n                            setOption('Subscribe')\r\n                        }}>\r\n                        <Text style={{ color: '#a2a2aa', lineHeight: 20, fontSize: 12 }}>\r\n                            {PreferredLanguageText('subscribe')}\r\n                        </Text>\r\n                    </TouchableOpacity>\r\n                    {\r\n                        role === 'student' && (school && school.allowStudentChannelCreation === false) ?\r\n                            null :\r\n                            <TouchableOpacity\r\n                                style={option === 'Create' ? styles.allOutline : styles.all}\r\n                                onPress={() => {\r\n                                    setOption('Create')\r\n                                }}>\r\n                                <Text style={{ color: '#a2a2aa', lineHeight: 20, fontSize: 12 }}>\r\n                                    {PreferredLanguageText('create')}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                    }\r\n                    {/* <TouchableOpacity\r\n                        style={option === 'Profile' ? styles.allOutline : styles.all}\r\n                        onPress={() => {\r\n                            setOption('Profile')\r\n                        }}>\r\n                        <Text style={{ color: '#a2a2aa', lineHeight: 20 }}>\r\n                            Profile\r\n                        </Text>\r\n                    </TouchableOpacity> */}\r\n                </View>\r\n                {\r\n                    option === 'Profile' ?\r\n                        <View style={{ width: '100%', backgroundColor: 'white' }}>\r\n                            <Text style={{ color: '#202025', fontSize: 14, paddingBottom: 10 }}>\r\n                                Display Name\r\n                            </Text>\r\n                            <TextInput\r\n                                value={displayName}\r\n                                placeholder={''}\r\n                                onChangeText={val => setDisplayName(val)}\r\n                                placeholderTextColor={'#a2a2aa'}\r\n                            />\r\n                            <Text style={{ color: '#202025', fontSize: 14, paddingBottom: 10 }}>\r\n                                Full Name\r\n                            </Text>\r\n                            <TextInput\r\n                                value={fullName}\r\n                                placeholder={''}\r\n                                onChangeText={val => setFullName(val)}\r\n                                placeholderTextColor={'#a2a2aa'}\r\n                            />\r\n                        </View>\r\n                        :\r\n                        <View style={{ backgroundColor: 'white' }}>\r\n                            <Text style={{ color: '#202025', fontSize: 14, paddingBottom: 10 }}>\r\n                                {PreferredLanguageText('channel') + ' ' + PreferredLanguageText('name')}\r\n                            </Text>\r\n                            <TextInput\r\n                                value={name}\r\n                                placeholder={''}\r\n                                onChangeText={val => {\r\n                                    setName(val)\r\n                                    setPasswordRequired(false)\r\n                                }}\r\n                                placeholderTextColor={'#a2a2aa'}\r\n                                required={true}\r\n                                footerMessage={'case sensitive'}\r\n                            />\r\n                        </View>\r\n                }\r\n                {\r\n                    (option === 'Subscribe' && passwordRequired) || option === 'Create' ?\r\n                        <View style={{ backgroundColor: 'white' }}>\r\n                            <Text style={{ color: '#202025', fontSize: 14, paddingBottom: 10 }}>\r\n                                {PreferredLanguageText('enrolmentPassword')}\r\n                            </Text>\r\n                            <TextInput\r\n                                value={password}\r\n                                placeholder={option === 'Subscribe' ? '' : `(${PreferredLanguageText('optional')})`}\r\n                                onChangeText={val => setPassword(val)}\r\n                                placeholderTextColor={'#a2a2aa'}\r\n                                secureTextEntry={true}\r\n                                required={option === \"Subscribe\" ? true : false}\r\n                            />\r\n                        </View>\r\n                        : (\r\n                            option === 'Subscribe' && !passwordRequired ?\r\n                                <View\r\n                                    style={{ height: 115, width: '100%', backgroundColor: 'white' }}\r\n                                /> : null\r\n                        )\r\n                }\r\n                <View\r\n                    style={{\r\n                        flex: 1,\r\n                        backgroundColor: 'white',\r\n                        justifyContent: 'center',\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        height: 50,\r\n                        paddingTop: 25\r\n                    }}>\r\n                    {\r\n                        option === 'About' ? null :\r\n                            <TouchableOpacity\r\n                                onPress={() => handleSubmit()}\r\n                                style={{\r\n                                    backgroundColor: 'white',\r\n                                    borderRadius: 15,\r\n                                    overflow: 'hidden',\r\n                                    height: 35,\r\n                                    marginTop: 15\r\n                                }}\r\n                                disabled={isSubmitDisabled}\r\n                            >\r\n                                <Text style={{\r\n                                    textAlign: 'center',\r\n                                    lineHeight: 35,\r\n                                    color: 'white',\r\n                                    fontSize: 12,\r\n                                    backgroundColor: '#3B64F8',\r\n                                    paddingHorizontal: 25,\r\n                                    fontFamily: 'inter',\r\n                                    height: 35,\r\n                                    textTransform: 'uppercase'\r\n                                }}>\r\n                                    {option === 'Subscribe' ? PreferredLanguageText('subscribe') : PreferredLanguageText('create')}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                    }\r\n                </View>\r\n            </View>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default ChannelControls;\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        padding: 15,\r\n        paddingHorizontal: 20,\r\n        width: '100%',\r\n        height: Dimensions.get('window').height - 50,\r\n        backgroundColor: 'white',\r\n    },\r\n    outline: {\r\n        borderRadius: 10,\r\n        borderWidth: 1,\r\n        borderColor: '#a2a2aa'\r\n    },\r\n    all: {\r\n        fontSize: 15,\r\n        color: '#a2a2aa',\r\n        height: 22,\r\n        paddingHorizontal: 10,\r\n        backgroundColor: 'white'\r\n    },\r\n    allOutline: {\r\n        fontSize: 15,\r\n        color: '#a2a2aa',\r\n        height: 22,\r\n        paddingHorizontal: 10,\r\n        backgroundColor: 'white',\r\n        borderRadius: 10,\r\n        borderWidth: 1,\r\n        borderColor: '#a2a2aa'\r\n    },\r\n    colorBar: {\r\n        width: '100%',\r\n        flexDirection: 'row',\r\n        backgroundColor: 'white',\r\n        marginBottom: '15%',\r\n        lineHeight: 18,\r\n        paddingTop: 20\r\n    },\r\n    input: {\r\n        width: '100%',\r\n        borderBottomColor: '#f4f4f6',\r\n        borderBottomWidth: 1,\r\n        fontSize: 15,\r\n        padding: 15,\r\n        paddingTop: 13,\r\n        paddingBottom: 13,\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}