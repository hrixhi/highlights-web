{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\node_modules\\\\react-native-pell-rich-editor\\\\src\\\\RichEditor.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { actions, messages } from \"./const\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createHTML } from \"./editor\";\nvar PlatformIOS = Platform.OS === 'ios';\n\nvar RichTextEditor = function (_Component) {\n  _inherits(RichTextEditor, _Component);\n\n  var _super = _createSuper(RichTextEditor);\n\n  function RichTextEditor(props) {\n    var _this;\n\n    _classCallCheck(this, RichTextEditor);\n\n    _this = _super.call(this, props);\n\n    _this.setWebHeight = function (height) {\n      var _this$props = _this.props,\n          onHeightChange = _this$props.onHeightChange,\n          useContainer = _this$props.useContainer;\n\n      if (height !== _this.state.height) {\n        useContainer && _this.setState({\n          height: height\n        });\n        onHeightChange && onHeightChange(height);\n      }\n    };\n\n    var that = _assertThisInitialized(_this);\n\n    that.renderWebView = that.renderWebView.bind(that);\n    that.onMessage = that.onMessage.bind(that);\n    that.sendAction = that.sendAction.bind(that);\n    that.registerToolbar = that.registerToolbar.bind(that);\n    that._onKeyboardWillShow = that._onKeyboardWillShow.bind(that);\n    that._onKeyboardWillHide = that._onKeyboardWillHide.bind(that);\n    that.init = that.init.bind(that);\n    that.setRef = that.setRef.bind(that);\n    that._keyOpen = false;\n    _this._focus = false;\n    that.selectionChangeListeners = [];\n    var _props$editorStyle = props.editorStyle;\n    _props$editorStyle = _props$editorStyle === void 0 ? {} : _props$editorStyle;\n    var backgroundColor = _props$editorStyle.backgroundColor,\n        color = _props$editorStyle.color,\n        placeholderColor = _props$editorStyle.placeholderColor,\n        cssText = _props$editorStyle.cssText,\n        contentCSSText = _props$editorStyle.contentCSSText,\n        html = props.html,\n        pasteAsPlainText = props.pasteAsPlainText,\n        onPaste = props.onPaste,\n        onKeyUp = props.onKeyUp,\n        onKeyDown = props.onKeyDown,\n        autoCapitalize = props.autoCapitalize,\n        defaultParagraphSeparator = props.defaultParagraphSeparator,\n        firstFocusEnd = props.firstFocusEnd;\n    that.state = {\n      html: {\n        html: html || createHTML({\n          backgroundColor: backgroundColor,\n          color: color,\n          placeholderColor: placeholderColor,\n          cssText: cssText,\n          contentCSSText: contentCSSText,\n          pasteAsPlainText: pasteAsPlainText,\n          pasteListener: !!onPaste,\n          keyUpListener: !!onKeyUp,\n          keyDownListener: !!onKeyDown,\n          autoCapitalize: autoCapitalize,\n          defaultParagraphSeparator: defaultParagraphSeparator,\n          firstFocusEnd: firstFocusEnd\n        })\n      },\n      keyboardHeight: 0,\n      height: 0,\n      isInit: false\n    };\n    that.focusListeners = [];\n    return _this;\n  }\n\n  _createClass(RichTextEditor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (PlatformIOS) {\n        this.keyboardEventListeners = [Keyboard.addListener('keyboardWillShow', this._onKeyboardWillShow), Keyboard.addListener('keyboardWillHide', this._onKeyboardWillHide)];\n      } else {\n        this.keyboardEventListeners = [Keyboard.addListener('keyboardDidShow', this._onKeyboardWillShow), Keyboard.addListener('keyboardDidHide', this._onKeyboardWillHide)];\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.keyboardEventListeners.forEach(function (eventListener) {\n        return eventListener.remove();\n      });\n    }\n  }, {\n    key: \"_onKeyboardWillShow\",\n    value: function _onKeyboardWillShow(event) {\n      this._keyOpen = true;\n    }\n  }, {\n    key: \"_onKeyboardWillHide\",\n    value: function _onKeyboardWillHide(event) {\n      this._keyOpen = false;\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event) {\n      var _console;\n\n      try {\n        var props = this.props;\n        var message = JSON.parse(event.nativeEvent.data);\n        var data = message.data;\n\n        switch (message.type) {\n          case messages.CONTENT_HTML_RESPONSE:\n            if (this.contentResolve) {\n              this.contentResolve(message.data);\n              this.contentResolve = undefined;\n              this.contentReject = undefined;\n\n              if (this.pendingContentHtml) {\n                clearTimeout(this.pendingContentHtml);\n                this.pendingContentHtml = undefined;\n              }\n            }\n\n            break;\n\n          case messages.LOG:\n            (_console = console).log.apply(_console, ['FROM EDIT:'].concat(_toConsumableArray(data)));\n\n            break;\n\n          case messages.SELECTION_CHANGE:\n            {\n              var items = message.data;\n              this.selectionChangeListeners.map(function (listener) {\n                listener(items);\n              });\n              break;\n            }\n\n          case messages.CONTENT_FOCUSED:\n            {\n              this._focus = true;\n              this.focusListeners.map(function (da) {\n                return da();\n              });\n              props.onFocus && props.onFocus();\n              break;\n            }\n\n          case messages.CONTENT_BLUR:\n            {\n              this._focus = false;\n              props.onBlur && props.onBlur();\n              break;\n            }\n\n          case messages.CONTENT_CHANGE:\n            {\n              props.onChange && props.onChange(data);\n              break;\n            }\n\n          case messages.CONTENT_PASTED:\n            {\n              props.onPaste && props.onPaste(data);\n              break;\n            }\n\n          case messages.CONTENT_KEYUP:\n            {\n              props.onKeyUp && props.onKeyUp(data);\n              break;\n            }\n\n          case messages.CONTENT_KEYDOWN:\n            {\n              props.onKeyDown && props.onKeyDown(data);\n              break;\n            }\n\n          case messages.OFFSET_HEIGHT:\n            this.setWebHeight(data);\n            break;\n\n          default:\n            props.onMessage && props.onMessage(message);\n            break;\n        }\n      } catch (e) {}\n    }\n  }, {\n    key: \"sendAction\",\n    value: function sendAction(type, action, data, options) {\n      var jsonString = JSON.stringify({\n        type: type,\n        name: action,\n        data: data,\n        options: options\n      });\n\n      if (this.webviewBridge) {\n        this.webviewBridge.postMessage(jsonString);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this$props2 = this.props,\n          editorStyle = _this$props2.editorStyle,\n          disabled = _this$props2.disabled;\n\n      if (prevProps.editorStyle !== editorStyle) {\n        editorStyle && this.setContentStyle(editorStyle);\n      }\n\n      if (disabled !== prevProps.disabled) {\n        this.setDisable(disabled);\n      }\n    }\n  }, {\n    key: \"setRef\",\n    value: function setRef(ref) {\n      this.webviewBridge = ref;\n    }\n  }, {\n    key: \"renderWebView\",\n    value: function renderWebView() {\n      var that = this;\n\n      var _that$props = that.props,\n          html = _that$props.html,\n          editorStyle = _that$props.editorStyle,\n          useContainer = _that$props.useContainer,\n          rest = _objectWithoutProperties(_that$props, [\"html\", \"editorStyle\", \"useContainer\"]);\n\n      var viewHTML = that.state.html;\n      var opacity = that.state.isInit ? 1 : 0;\n      return React.createElement(React.Fragment, null, React.createElement(WebView, _extends({\n        useWebKit: true,\n        scrollEnabled: false,\n        hideKeyboardAccessoryView: true,\n        keyboardDisplayRequiresUserAction: false\n      }, rest, {\n        ref: that.setRef,\n        onMessage: that.onMessage,\n        originWhitelist: ['*'],\n        dataDetectorTypes: 'none',\n        domStorageEnabled: false,\n        bounces: false,\n        javaScriptEnabled: true,\n        source: viewHTML,\n        opacity: opacity,\n        onLoad: that.init,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }\n      })), Platform.OS === 'android' && React.createElement(TextInput, {\n        ref: function ref(_ref) {\n          return that._input = _ref;\n        },\n        style: styles._input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 47\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var height = this.state.height;\n      var _this$props3 = this.props,\n          useContainer = _this$props3.useContainer,\n          style = _this$props3.style,\n          _this$props3$initialH = _this$props3.initialHeight,\n          initialHeight = _this$props3$initialH === void 0 ? 0 : _this$props3$initialH;\n      return useContainer ? React.createElement(View, {\n        style: [style, {\n          height: height || initialHeight\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }\n      }, this.renderWebView()) : this.renderWebView();\n    }\n  }, {\n    key: \"registerToolbar\",\n    value: function registerToolbar(listener) {\n      this.selectionChangeListeners = [].concat(_toConsumableArray(this.selectionChangeListeners), [listener]);\n    }\n  }, {\n    key: \"setContentFocusHandler\",\n    value: function setContentFocusHandler(listener) {\n      this.focusListeners.push(listener);\n    }\n  }, {\n    key: \"setContentHTML\",\n    value: function setContentHTML(html) {\n      this.sendAction(actions.content, 'setHtml', html);\n    }\n  }, {\n    key: \"setPlaceholder\",\n    value: function setPlaceholder(placeholder) {\n      this.sendAction(actions.content, 'setPlaceholder', placeholder);\n    }\n  }, {\n    key: \"setContentStyle\",\n    value: function setContentStyle(styles) {\n      this.sendAction(actions.content, 'setContentStyle', styles);\n    }\n  }, {\n    key: \"setDisable\",\n    value: function setDisable(dis) {\n      this.sendAction(actions.content, 'setDisable', !!dis);\n    }\n  }, {\n    key: \"blurContentEditor\",\n    value: function blurContentEditor() {\n      this.sendAction(actions.content, 'blur');\n    }\n  }, {\n    key: \"focusContentEditor\",\n    value: function focusContentEditor() {\n      this.showAndroidKeyboard();\n      this.sendAction(actions.content, 'focus');\n    }\n  }, {\n    key: \"showAndroidKeyboard\",\n    value: function showAndroidKeyboard() {\n      var that = this;\n\n      if (Platform.OS === 'android') {\n        !that._keyOpen && that._input.focus();\n        that.webviewBridge.requestFocus && that.webviewBridge.requestFocus();\n      }\n    }\n  }, {\n    key: \"insertImage\",\n    value: function insertImage(attributes, style) {\n      this.sendAction(actions.insertImage, 'result', attributes, style);\n    }\n  }, {\n    key: \"insertVideo\",\n    value: function insertVideo(attributes, style) {\n      this.sendAction(actions.insertVideo, 'result', attributes, style);\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(text) {\n      this.sendAction(actions.insertText, 'result', text);\n    }\n  }, {\n    key: \"insertHTML\",\n    value: function insertHTML(html) {\n      this.sendAction(actions.insertHTML, 'result', html);\n    }\n  }, {\n    key: \"insertLink\",\n    value: function insertLink(title, url) {\n      if (url) {\n        this.showAndroidKeyboard();\n        this.sendAction(actions.insertLink, 'result', {\n          title: title,\n          url: url\n        });\n      }\n    }\n  }, {\n    key: \"setFontSize\",\n    value: function setFontSize(size) {\n      this.sendAction(actions.fontSize, 'result', size);\n    }\n  }, {\n    key: \"setFontName\",\n    value: function setFontName(name) {\n      this.sendAction(actions.fontName, 'result', name);\n    }\n  }, {\n    key: \"commandDOM\",\n    value: function commandDOM(command) {\n      if (command) {\n        this.sendAction(actions.content, 'commandDOM', command);\n      }\n    }\n  }, {\n    key: \"command\",\n    value: function command(_command) {\n      if (_command) {\n        this.sendAction(actions.content, 'command', _command);\n      }\n    }\n  }, {\n    key: \"dismissKeyboard\",\n    value: function dismissKeyboard() {\n      this._focus ? this.blurContentEditor() : Keyboard.dismiss();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var that = this;\n      var _that$props2 = that.props,\n          initialFocus = _that$props2.initialFocus,\n          initialContentHTML = _that$props2.initialContentHTML,\n          placeholder = _that$props2.placeholder,\n          editorInitializedCallback = _that$props2.editorInitializedCallback,\n          disabled = _that$props2.disabled;\n      initialContentHTML && that.setContentHTML(initialContentHTML);\n      placeholder && that.setPlaceholder(placeholder);\n      that.setDisable(disabled);\n      editorInitializedCallback();\n      initialFocus && !disabled && that.focusContentEditor();\n      that.sendAction(actions.init);\n      that.setState({\n        isInit: true\n      });\n    }\n  }, {\n    key: \"getContentHtml\",\n    value: function getContentHtml() {\n      var _this2 = this;\n\n      return _regeneratorRuntime.async(function getContentHtml$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                _this2.contentResolve = resolve;\n                _this2.contentReject = reject;\n\n                _this2.sendAction(actions.content, 'postHtml');\n\n                _this2.pendingContentHtml = setTimeout(function () {\n                  if (_this2.contentReject) {\n                    _this2.contentReject('timeout');\n                  }\n                }, 5000);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"isKeyboardOpen\",\n    get: function get() {\n      return this._keyOpen;\n    }\n  }]);\n\n  return RichTextEditor;\n}(Component);\n\nRichTextEditor.defaultProps = {\n  contentInset: {},\n  style: {},\n  placeholder: '',\n  initialContentHTML: '',\n  initialFocus: false,\n  disabled: false,\n  useContainer: true,\n  pasteAsPlainText: false,\n  autoCapitalize: 'off',\n  defaultParagraphSeparator: 'div',\n  editorInitializedCallback: function editorInitializedCallback() {}\n};\nexport { RichTextEditor as default };\nvar styles = StyleSheet.create({\n  _input: {\n    position: 'absolute',\n    width: 1,\n    height: 1,\n    zIndex: -999,\n    bottom: -999,\n    left: -999\n  }\n});","map":{"version":3,"sources":["D:/p_projects/highlights-web/node_modules/react-native-pell-rich-editor/src/RichEditor.js"],"names":["React","Component","WebView","actions","messages","createHTML","PlatformIOS","Platform","OS","RichTextEditor","props","setWebHeight","height","onHeightChange","useContainer","state","setState","that","renderWebView","bind","onMessage","sendAction","registerToolbar","_onKeyboardWillShow","_onKeyboardWillHide","init","setRef","_keyOpen","_focus","selectionChangeListeners","editorStyle","backgroundColor","color","placeholderColor","cssText","contentCSSText","html","pasteAsPlainText","onPaste","onKeyUp","onKeyDown","autoCapitalize","defaultParagraphSeparator","firstFocusEnd","pasteListener","keyUpListener","keyDownListener","keyboardHeight","isInit","focusListeners","keyboardEventListeners","Keyboard","addListener","forEach","eventListener","remove","event","message","JSON","parse","nativeEvent","data","type","CONTENT_HTML_RESPONSE","contentResolve","undefined","contentReject","pendingContentHtml","clearTimeout","LOG","console","log","SELECTION_CHANGE","items","map","listener","CONTENT_FOCUSED","da","onFocus","CONTENT_BLUR","onBlur","CONTENT_CHANGE","onChange","CONTENT_PASTED","CONTENT_KEYUP","CONTENT_KEYDOWN","OFFSET_HEIGHT","e","action","options","jsonString","stringify","name","webviewBridge","postMessage","prevProps","prevState","snapshot","disabled","setContentStyle","setDisable","ref","rest","viewHTML","opacity","_input","styles","style","initialHeight","push","content","placeholder","dis","showAndroidKeyboard","focus","requestFocus","attributes","insertImage","insertVideo","text","insertText","insertHTML","title","url","insertLink","size","fontSize","fontName","command","blurContentEditor","dismiss","initialFocus","initialContentHTML","editorInitializedCallback","setContentHTML","setPlaceholder","focusContentEditor","Promise","resolve","reject","setTimeout","defaultProps","contentInset","StyleSheet","create","position","width","zIndex","bottom","left"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {WebView} from 'react-native-webview';\nimport {actions, messages} from './const';\nimport {Dimensions, Keyboard, Platform, StyleSheet, TextInput, View} from 'react-native';\nimport {createHTML} from './editor';\n\nconst PlatformIOS = Platform.OS === 'ios';\n\nexport default class RichTextEditor extends Component {\n    // static propTypes = {\n    //     initialContentHTML: PropTypes.string,\n    //     editorInitializedCallback: PropTypes.func,\n    //     onChange: PropTypes.func,\n    //     onHeightChange: PropTypes.func,\n    //     initialFocus: PropTypes.bool,\n    //     disabled: PropTypes.bool,\n    //     onPaste: PropTypes.func,\n    //     onKeyUp: PropTypes.func,\n    //     onKeyDown: PropTypes.func,\n    //     onFocus: PropTypes.func,\n    // };\n\n    static defaultProps = {\n        contentInset: {},\n        style: {},\n        placeholder: '',\n        initialContentHTML: '',\n        initialFocus: false,\n        disabled: false,\n        useContainer: true,\n        pasteAsPlainText: false,\n        autoCapitalize: 'off',\n        defaultParagraphSeparator: 'div',\n        editorInitializedCallback: () => {},\n    };\n\n    constructor(props) {\n        super(props);\n        let that = this;\n        that.renderWebView = that.renderWebView.bind(that);\n        that.onMessage = that.onMessage.bind(that);\n        that.sendAction = that.sendAction.bind(that);\n        that.registerToolbar = that.registerToolbar.bind(that);\n        that._onKeyboardWillShow = that._onKeyboardWillShow.bind(that);\n        that._onKeyboardWillHide = that._onKeyboardWillHide.bind(that);\n        that.init = that.init.bind(that);\n        that.setRef = that.setRef.bind(that);\n        that._keyOpen = false;\n        this._focus = false;\n        that.selectionChangeListeners = [];\n        const {\n            editorStyle: {backgroundColor, color, placeholderColor, cssText, contentCSSText} = {},\n            html,\n            pasteAsPlainText,\n            onPaste,\n            onKeyUp,\n            onKeyDown,\n            autoCapitalize,\n            defaultParagraphSeparator,\n            firstFocusEnd,\n        } = props;\n        that.state = {\n            html: {\n                html:\n                    html ||\n                    createHTML({\n                        backgroundColor,\n                        color,\n                        placeholderColor,\n                        cssText,\n                        contentCSSText,\n                        pasteAsPlainText,\n                        pasteListener: !!onPaste,\n                        keyUpListener: !!onKeyUp,\n                        keyDownListener: !!onKeyDown,\n                        autoCapitalize,\n                        defaultParagraphSeparator,\n                        firstFocusEnd,\n                    }),\n            },\n            keyboardHeight: 0,\n            height: 0,\n            isInit: false,\n        };\n        that.focusListeners = [];\n    }\n\n    componentDidMount() {\n        if (PlatformIOS) {\n            this.keyboardEventListeners = [\n                Keyboard.addListener('keyboardWillShow', this._onKeyboardWillShow),\n                Keyboard.addListener('keyboardWillHide', this._onKeyboardWillHide),\n            ];\n        } else {\n            this.keyboardEventListeners = [\n                Keyboard.addListener('keyboardDidShow', this._onKeyboardWillShow),\n                Keyboard.addListener('keyboardDidHide', this._onKeyboardWillHide),\n            ];\n        }\n    }\n\n    componentWillUnmount() {\n        this.keyboardEventListeners.forEach((eventListener) => eventListener.remove());\n    }\n\n    _onKeyboardWillShow(event) {\n        this._keyOpen = true;\n        // console.log('!!!!', event);\n        /*const newKeyboardHeight = event.endCoordinates.height;\n        if (this.state.keyboardHeight === newKeyboardHeight) {\n            return;\n        }\n        if (newKeyboardHeight) {\n            this.setEditorAvailableHeightBasedOnKeyboardHeight(newKeyboardHeight);\n        }\n        this.setState({keyboardHeight: newKeyboardHeight});*/\n    }\n\n    _onKeyboardWillHide(event) {\n        this._keyOpen = false;\n        // this.setState({keyboardHeight: 0});\n    }\n\n    /*setEditorAvailableHeightBasedOnKeyboardHeight(keyboardHeight) {\n        const {top = 0, bottom = 0} = this.props.contentInset;\n        const {marginTop = 0, marginBottom = 0} = this.props.style;\n        const spacing = marginTop + marginBottom + top + bottom;\n\n        const editorAvailableHeight = Dimensions.get('window').height - keyboardHeight - spacing;\n        // this.setEditorHeight(editorAvailableHeight);\n    }*/\n\n    onMessage(event) {\n        try {\n            const props = this.props;\n            const message = JSON.parse(event.nativeEvent.data);\n            const data = message.data;\n            switch (message.type) {\n                case messages.CONTENT_HTML_RESPONSE:\n                    if (this.contentResolve) {\n                        this.contentResolve(message.data);\n                        this.contentResolve = undefined;\n                        this.contentReject = undefined;\n                        if (this.pendingContentHtml) {\n                            clearTimeout(this.pendingContentHtml);\n                            this.pendingContentHtml = undefined;\n                        }\n                    }\n                    break;\n                case messages.LOG:\n                    console.log('FROM EDIT:', ...data);\n                    break;\n                case messages.SELECTION_CHANGE: {\n                    const items = message.data;\n                    this.selectionChangeListeners.map((listener) => {\n                        listener(items);\n                    });\n                    break;\n                }\n                case messages.CONTENT_FOCUSED: {\n                    this._focus = true;\n                    this.focusListeners.map((da) => da()); // Subsequent versions will be deleted\n                    props.onFocus && props.onFocus();\n                    break;\n                }\n                case messages.CONTENT_BLUR: {\n                    this._focus = false;\n                    props.onBlur && props.onBlur();\n                    break;\n                }\n                case messages.CONTENT_CHANGE: {\n                    props.onChange && props.onChange(data);\n                    break;\n                }\n                case messages.CONTENT_PASTED: {\n                    props.onPaste && props.onPaste(data);\n                    break;\n                }\n                case messages.CONTENT_KEYUP: {\n                    props.onKeyUp && props.onKeyUp(data);\n                    break;\n                }\n                case messages.CONTENT_KEYDOWN: {\n                    props.onKeyDown && props.onKeyDown(data);\n                    break;\n                }\n                case messages.OFFSET_HEIGHT:\n                    this.setWebHeight(data);\n                    break;\n                default:\n                    props.onMessage && props.onMessage(message);\n                    break;\n            }\n        } catch (e) {\n            //alert('NON JSON MESSAGE');\n        }\n    }\n\n    setWebHeight = (height) => {\n        // console.log(height);\n        const {onHeightChange, useContainer} = this.props;\n        if (height !== this.state.height) {\n            useContainer && this.setState({height});\n            onHeightChange && onHeightChange(height);\n        }\n    };\n\n    /**\n     * @param {String} type\n     * @param {String} action\n     * @param {any} data\n     * @param [options]\n     * @private\n     */\n    sendAction(type, action, data, options) {\n        let jsonString = JSON.stringify({type, name: action, data, options});\n        if (this.webviewBridge) {\n            this.webviewBridge.postMessage(jsonString);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {editorStyle, disabled} = this.props;\n        if (prevProps.editorStyle !== editorStyle) {\n            editorStyle && this.setContentStyle(editorStyle);\n        }\n        if (disabled !== prevProps.disabled) {\n            this.setDisable(disabled);\n        }\n    }\n\n    setRef(ref) {\n        this.webviewBridge = ref;\n    }\n\n    renderWebView() {\n        let that = this;\n        const {html, editorStyle, useContainer, ...rest} = that.props;\n        const {html: viewHTML} = that.state;\n        // webview dark theme bug\n        const opacity = that.state.isInit ? 1 : 0;\n        return (\n            <>\n                <WebView\n                    useWebKit={true}\n                    scrollEnabled={false}\n                    hideKeyboardAccessoryView={true}\n                    keyboardDisplayRequiresUserAction={false}\n                    {...rest}\n                    ref={that.setRef}\n                    onMessage={that.onMessage}\n                    originWhitelist={['*']}\n                    dataDetectorTypes={'none'}\n                    domStorageEnabled={false}\n                    bounces={false}\n                    javaScriptEnabled={true}\n                    source={viewHTML}\n                    opacity={opacity}\n                    onLoad={that.init}\n                />\n                {Platform.OS === 'android' && <TextInput ref={(ref) => (that._input = ref)} style={styles._input} />}\n            </>\n        );\n    }\n\n    render() {\n        let {height} = this.state;\n\n        // useContainer is an optional prop with default value of true\n        // If set to true, it will use a View wrapper with styles and height.\n        // If set to false, it will not use a View wrapper\n        const {useContainer, style, initialHeight = 0} = this.props;\n        return useContainer ? (\n            <View style={[style, {height: height || initialHeight}]}>{this.renderWebView()}</View>\n        ) : (\n            this.renderWebView()\n        );\n    }\n\n    //-------------------------------------------------------------------------------\n    //--------------- Public API\n\n    registerToolbar(listener) {\n        this.selectionChangeListeners = [...this.selectionChangeListeners, listener];\n    }\n\n    /**\n     * Subsequent versions will be deleted, please use onFocus\n     * @deprecated remove\n     * @param listener\n     */\n    setContentFocusHandler(listener) {\n        this.focusListeners.push(listener);\n    }\n\n    setContentHTML(html) {\n        this.sendAction(actions.content, 'setHtml', html);\n    }\n\n    setPlaceholder(placeholder) {\n        this.sendAction(actions.content, 'setPlaceholder', placeholder);\n    }\n\n    setContentStyle(styles) {\n        this.sendAction(actions.content, 'setContentStyle', styles);\n    }\n\n    setDisable(dis) {\n        this.sendAction(actions.content, 'setDisable', !!dis);\n    }\n\n    blurContentEditor() {\n        this.sendAction(actions.content, 'blur');\n    }\n\n    focusContentEditor() {\n        this.showAndroidKeyboard();\n        this.sendAction(actions.content, 'focus');\n    }\n\n    /**\n     * open android keyboard\n     * @platform android\n     */\n    showAndroidKeyboard() {\n        let that = this;\n        if (Platform.OS === 'android') {\n            !that._keyOpen && that._input.focus();\n            that.webviewBridge.requestFocus && that.webviewBridge.requestFocus();\n        }\n    }\n\n    /**\n     * @param attributes\n     * @param [style]\n     */\n    insertImage(attributes, style) {\n        this.sendAction(actions.insertImage, 'result', attributes, style);\n    }\n\n    /**\n     * @param attributes\n     * @param [style]\n     */\n    insertVideo(attributes, style) {\n        this.sendAction(actions.insertVideo, 'result', attributes, style);\n    }\n\n    insertText(text) {\n        this.sendAction(actions.insertText, 'result', text);\n    }\n\n    insertHTML(html) {\n        this.sendAction(actions.insertHTML, 'result', html);\n    }\n\n    insertLink(title, url) {\n        if (url) {\n            this.showAndroidKeyboard();\n            this.sendAction(actions.insertLink, 'result', {title, url});\n        }\n    }\n\n    setFontSize(size) {\n        this.sendAction(actions.fontSize, 'result', size);\n    }\n\n    setFontName(name) {\n        this.sendAction(actions.fontName, 'result', name);\n    }\n\n    commandDOM(command) {\n        if (command) {\n            this.sendAction(actions.content, 'commandDOM', command);\n        }\n    }\n\n    command(command) {\n        if (command) {\n            this.sendAction(actions.content, 'command', command);\n        }\n    }\n\n    dismissKeyboard() {\n        this._focus ? this.blurContentEditor() : Keyboard.dismiss();\n    }\n\n    get isKeyboardOpen() {\n        return this._keyOpen;\n    }\n\n    init() {\n        let that = this;\n        const {initialFocus, initialContentHTML, placeholder, editorInitializedCallback, disabled} = that.props;\n        initialContentHTML && that.setContentHTML(initialContentHTML);\n        placeholder && that.setPlaceholder(placeholder);\n        that.setDisable(disabled);\n        editorInitializedCallback();\n\n        // initial request focus\n        initialFocus && !disabled && that.focusContentEditor();\n        // no visible ?\n        that.sendAction(actions.init);\n        that.setState({isInit: true});\n    }\n\n    /**\n     * @deprecated please use onChange\n     * @returns {Promise}\n     */\n    async getContentHtml() {\n        return new Promise((resolve, reject) => {\n            this.contentResolve = resolve;\n            this.contentReject = reject;\n            this.sendAction(actions.content, 'postHtml');\n\n            this.pendingContentHtml = setTimeout(() => {\n                if (this.contentReject) {\n                    this.contentReject('timeout');\n                }\n            }, 5000);\n        });\n    }\n}\n\nconst styles = StyleSheet.create({\n    _input: {\n        position: 'absolute',\n        width: 1,\n        height: 1,\n        zIndex: -999,\n        bottom: -999,\n        left: -999,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}