{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\Update.tsx\";\n\nimport React, { useCallback, useEffect, useRef, useState, Fragment } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"../components/Alert\";\nimport { View, TouchableOpacity, Text } from \"../components/Themed\";\nimport UpdateControls from \"./UpdateControls\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { fetchAPI } from \"../graphql/FetchAPI\";\nimport { getCueThreads, getStatuses } from \"../graphql/QueriesAndMutations\";\nimport ThreadsList from \"./ThreadsList\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport SubscribersList from \"./SubscribersList\";\nimport { PreferredLanguageText } from \"../helpers/LanguageContext\";\n\nvar Update = function Update(props) {\n  var _useState = useState(new Animated.Value(1)),\n      _useState2 = _slicedToArray(_useState, 1),\n      modalAnimation = _useState2[0];\n\n  var _useState3 = useState(props.cueId),\n      _useState4 = _slicedToArray(_useState3, 1),\n      cueId = _useState4[0];\n\n  var _useState5 = useState(props.createdBy),\n      _useState6 = _slicedToArray(_useState5, 1),\n      createdBy = _useState6[0];\n\n  var _useState7 = useState(props.channelCreatedBy),\n      _useState8 = _slicedToArray(_useState7, 1),\n      channelCreatedBy = _useState8[0];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      threads = _useState10[0],\n      setThreads = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      subscribers = _useState12[0],\n      setSubscribers = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loading = _useState14[0],\n      setLoading = _useState14[1];\n\n  var scroll2 = useRef();\n  var scroll3 = useRef();\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      channelOwner = _useState16[0],\n      setChannelOwner = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      viewStatus = _useState18[0],\n      setViewStatus = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      isOwner = _useState20[0],\n      setIsOwner = _useState20[1];\n\n  var _useState21 = useState(props.cue.submission ? props.cue.submission : false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      submission = _useState22[0],\n      setSubmission = _useState22[1];\n\n  var _useState23 = useState(props.cue.channelId && props.cue.channelId !== '' ? true : false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      showOriginal = _useState24[0],\n      _setShowOriginal = _useState24[1];\n\n  var _useState25 = useState(false),\n      _useState26 = _slicedToArray(_useState25, 2),\n      isQuiz = _useState26[0],\n      setIsQuiz = _useState26[1];\n\n  var unableToLoadStatusesAlert = PreferredLanguageText('unableToLoadStatuses');\n  var checkConnectionAlert = PreferredLanguageText('checkConnection');\n  var unableToLoadCommentsAlert = PreferredLanguageText('unableToLoadComments');\n  useEffect(function () {\n    if (props.cue.channelId && props.cue.channelId !== '') {\n      var data1 = props.cue.original;\n\n      if (data1 && data1[0] && data1[0] === '{' && data1[data1.length - 1] === '}') {\n        var obj = JSON.parse(data1);\n\n        if (obj.quizId) {\n          setIsQuiz(true);\n        }\n      }\n    }\n  }, [props.cue]);\n  useEffect(function () {\n    (function _callee() {\n      var u, parsedUser;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n            case 2:\n              u = _context.sent;\n\n              if (u && props.cue.createdBy) {\n                parsedUser = JSON.parse(u);\n\n                if (parsedUser._id.toString().trim() === props.cue.createdBy.toString().trim()) {\n                  setIsOwner(true);\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [props.cue]);\n  var loadThreadsAndStatuses = useCallback(function _callee3() {\n    var u, parsedUser, server;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            u = _context3.sent;\n            parsedUser = {};\n\n            if (u) {\n              parsedUser = JSON.parse(u);\n            }\n\n            if (Number.isNaN(Number(cueId))) {\n              setLoading(true);\n              server = fetchAPI(parsedUser._id);\n              server.query({\n                query: getCueThreads,\n                variables: {\n                  cueId: cueId\n                }\n              }).then(function _callee2(res) {\n                var u, _parsedUser, filteredThreads;\n\n                return _regeneratorRuntime.async(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n                      case 2:\n                        u = _context2.sent;\n\n                        if (u) {\n                          _parsedUser = JSON.parse(u);\n                          filteredThreads = [];\n\n                          if (_parsedUser._id.toString().trim() === channelCreatedBy.toString().trim()) {\n                            filteredThreads = res.data.thread.findByCueId;\n                          } else {\n                            filteredThreads = res.data.thread.findByCueId.filter(function (thread) {\n                              return !thread.isPrivate || thread.userId === _parsedUser._id;\n                            });\n                          }\n\n                          setThreads(filteredThreads);\n\n                          if (_parsedUser._id.toString().trim() === channelCreatedBy.toString().trim()) {\n                            setChannelOwner(true);\n                            server.query({\n                              query: getStatuses,\n                              variables: {\n                                cueId: cueId\n                              }\n                            }).then(function (res2) {\n                              if (res2.data.status && res2.data.status.findByCueId) {\n                                var subs = [];\n                                var statuses = res2.data.status.findByCueId;\n                                statuses.map(function (status) {\n                                  subs.push({\n                                    displayName: status.displayName,\n                                    _id: status.userId,\n                                    fullName: status.status,\n                                    submission: status.submission,\n                                    comment: status.comment,\n                                    score: status.score,\n                                    graded: status.graded,\n                                    userId: status.userId,\n                                    submittedAt: status.submittedAt\n                                  });\n                                });\n                                setSubscribers(subs);\n                                setLoading(false);\n                              } else {\n                                setLoading(false);\n                              }\n                            }).catch(function (err) {\n                              Alert(unableToLoadStatusesAlert, checkConnectionAlert);\n                              setLoading(false);\n                            });\n                          } else {\n                            setLoading(false);\n                          }\n                        } else {\n                          setThreads(res.data.thread.findByCueId);\n                          setLoading(false);\n                        }\n\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }).catch(function (err) {\n                Alert(unableToLoadCommentsAlert, checkConnectionAlert);\n                setLoading(false);\n              });\n            } else {\n              setLoading(false);\n            }\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [cueId, modalAnimation, createdBy, channelCreatedBy]);\n  useEffect(function () {\n    loadThreadsAndStatuses();\n  }, [props.cueId, props.channelId]);\n  var windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\n  return React.createElement(View, {\n    style: {\n      width: '100%',\n      height: windowHeight,\n      backgroundColor: '#f4f4f6',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, loading ? React.createElement(View, {\n    style: {\n      width: '100%',\n      flex: 1,\n      justifyContent: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: 'white',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 23\n    }\n  }, React.createElement(ActivityIndicator, {\n    color: '#a2a2aa',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 25\n    }\n  })) : React.createElement(Animated.View, {\n    style: {\n      width: '100%',\n      height: windowHeight,\n      opacity: modalAnimation,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    key: JSON.stringify(threads),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, !viewStatus ? React.createElement(ScrollView, {\n    nestedScrollEnabled: true,\n    horizontal: false,\n    style: {\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    contentContainerStyle: {\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0,\n      minHeight: windowHeight\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 40\n    }\n  }, React.createElement(UpdateControls, {\n    channelId: props.channelId,\n    customCategories: props.customCategories,\n    cue: props.cue,\n    cueIndex: props.cueIndex,\n    cueKey: props.cueKey,\n    channelOwner: channelOwner,\n    createdBy: createdBy,\n    closeModal: function closeModal() {\n      Animated.timing(modalAnimation, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true\n      }).start(function () {\n        return props.closeModal();\n      });\n    },\n    reloadCueListAfterUpdate: function reloadCueListAfterUpdate() {\n      return props.reloadCueListAfterUpdate();\n    },\n    changeViewStatus: function changeViewStatus() {\n      return setViewStatus(true);\n    },\n    viewStatus: viewStatus,\n    showOriginal: showOriginal,\n    setShowOriginal: function setShowOriginal(val) {\n      return _setShowOriginal(val);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }), !Number.isNaN(Number(cueId)) || !props.channelId || props.cue.original && props.cue.original.includes(\"quizId\") ? React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 41\n    }\n  }) : React.createElement(ScrollView, {\n    ref: scroll2,\n    contentContainerStyle: {\n      width: '100%',\n      height: '100%'\n    },\n    contentOffset: {\n      x: 0,\n      y: 1\n    },\n    showsVerticalScrollIndicator: false,\n    overScrollMode: 'always',\n    alwaysBounceVertical: true,\n    scrollEnabled: true,\n    scrollEventThrottle: 1,\n    keyboardDismissMode: 'on-drag',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 37\n    }\n  }, React.createElement(ThreadsList, {\n    channelCreatedBy: props.channelCreatedBy,\n    key: JSON.stringify(threads),\n    threads: threads,\n    cueId: cueId,\n    channelId: props.channelId,\n    channelName: props.filterChoice,\n    closeModal: function closeModal() {\n      return props.closeModal();\n    },\n    reload: function reload() {\n      return loadThreadsAndStatuses();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 41\n    }\n  }))) : React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 31\n    }\n  }, React.createElement(Text, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      height: 15,\n      paddingBottom: 30,\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 33\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      paddingLeft: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 33\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    onPress: function onPress() {\n      setViewStatus(false);\n\n      _setShowOriginal(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 37\n    }\n  }, React.createElement(Text, {\n    style: showOriginal ? styles.allGrayFill : styles.all,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 41\n    }\n  }, PreferredLanguageText('viewShared'))), isOwner && submission || isQuiz ? null : React.createElement(TouchableOpacity, {\n    style: {\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    onPress: function onPress() {\n      setViewStatus(false);\n\n      _setShowOriginal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 45\n    }\n  }, React.createElement(Text, {\n    style: !showOriginal && !viewStatus ? styles.allGrayFill : styles.all,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 49\n    }\n  }, submission ? PreferredLanguageText('mySubmission') : PreferredLanguageText('myNotes'))), !isOwner ? null : React.createElement(TouchableOpacity, {\n    style: {\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    onPress: function onPress() {\n      setViewStatus(true);\n\n      _setShowOriginal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 45\n    }\n  }, React.createElement(Text, {\n    style: viewStatus ? styles.allGrayFill : styles.all,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 49\n    }\n  }, \"Status\"))), channelOwner ? React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      width: '100%',\n      height: windowHeight - 52,\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0,\n      paddingTop: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 41\n    }\n  }, React.createElement(ScrollView, {\n    ref: scroll3,\n    contentContainerStyle: {\n      width: '100%',\n      height: windowHeight - 52\n    },\n    showsVerticalScrollIndicator: false,\n    contentOffset: {\n      x: 0,\n      y: 1\n    },\n    key: channelOwner.toString(),\n    overScrollMode: 'always',\n    alwaysBounceVertical: true,\n    scrollEnabled: true,\n    scrollEventThrottle: 1,\n    keyboardDismissMode: 'on-drag',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 45\n    }\n  }, React.createElement(SubscribersList, {\n    key: JSON.stringify(subscribers),\n    subscribers: subscribers,\n    cueId: cueId,\n    channelName: props.filterChoice,\n    channelId: props.channelId,\n    closeModal: function closeModal() {\n      Animated.timing(modalAnimation, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true\n      }).start(function () {\n        return props.closeModal();\n      });\n    },\n    reload: function reload() {\n      return loadThreadsAndStatuses();\n    },\n    cue: props.cue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 49\n    }\n  }))) : null)));\n};\n\nexport default Update;\nvar styles = StyleSheet.create({\n  all: {\n    fontSize: 12,\n    color: '#a2a2aa',\n    height: 22,\n    paddingHorizontal: 10,\n    backgroundColor: 'white',\n    lineHeight: 20\n  },\n  allGrayFill: {\n    fontSize: 12,\n    color: '#fff',\n    paddingHorizontal: 10,\n    borderRadius: 10,\n    backgroundColor: '#a2a2aa',\n    lineHeight: 20\n  }\n});","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/Update.tsx"],"names":["React","useCallback","useEffect","useRef","useState","Fragment","Alert","View","TouchableOpacity","Text","UpdateControls","ScrollView","fetchAPI","getCueThreads","getStatuses","ThreadsList","AsyncStorage","SubscribersList","PreferredLanguageText","Update","props","Animated","Value","modalAnimation","cueId","createdBy","channelCreatedBy","threads","setThreads","subscribers","setSubscribers","loading","setLoading","scroll2","scroll3","channelOwner","setChannelOwner","viewStatus","setViewStatus","isOwner","setIsOwner","cue","submission","setSubmission","channelId","showOriginal","setShowOriginal","isQuiz","setIsQuiz","unableToLoadStatusesAlert","checkConnectionAlert","unableToLoadCommentsAlert","data1","original","length","obj","JSON","parse","quizId","getItem","u","parsedUser","_id","toString","trim","loadThreadsAndStatuses","Number","isNaN","server","query","variables","then","res","filteredThreads","data","thread","findByCueId","filter","isPrivate","userId","res2","status","subs","statuses","map","push","displayName","fullName","comment","score","graded","submittedAt","catch","err","windowHeight","Dimensions","get","width","height","backgroundColor","borderTopLeftRadius","borderTopRightRadius","flex","justifyContent","display","flexDirection","opacity","stringify","minHeight","customCategories","cueIndex","cueKey","timing","toValue","duration","useNativeDriver","start","closeModal","reloadCueListAfterUpdate","val","includes","x","y","filterChoice","textAlign","paddingBottom","paddingLeft","styles","allGrayFill","all","paddingTop","StyleSheet","create","fontSize","color","paddingHorizontal","lineHeight","borderRadius"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,QAAhD,EAA0DC,QAA1D,QAA0E,OAA1E;;;;;AAEA,OAAOC,KAAP;AACA,SAASC,IAAT,EAAeC,gBAAf,EAAiCC,IAAjC;AAEA,OAAOC,cAAP;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,QAAT;AACA,SAASC,aAAT,EAAwBC,WAAxB;AACA,OAAOC,WAAP;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,eAAP;AACA,SAASC,qBAAT;;AAGA,IAAMC,MAAyD,GAAG,SAA5DA,MAA4D,CAACC,KAAD,EAAgB;AAAA,kBAErDhB,QAAQ,CAAC,IAAIiB,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAF6C;AAAA;AAAA,MAEvEC,cAFuE;;AAAA,mBAG9DnB,QAAQ,CAACgB,KAAK,CAACI,KAAP,CAHsD;AAAA;AAAA,MAGvEA,KAHuE;;AAAA,mBAI1DpB,QAAQ,CAACgB,KAAK,CAACK,SAAP,CAJkD;AAAA;AAAA,MAIvEA,SAJuE;;AAAA,mBAKnDrB,QAAQ,CAACgB,KAAK,CAACM,gBAAP,CAL2C;AAAA;AAAA,MAKvEA,gBALuE;;AAAA,mBAMhDtB,QAAQ,CAAQ,EAAR,CANwC;AAAA;AAAA,MAMvEuB,OANuE;AAAA,MAM9DC,UAN8D;;AAAA,oBAOxCxB,QAAQ,CAAQ,EAAR,CAPgC;AAAA;AAAA,MAOvEyB,WAPuE;AAAA,MAO1DC,cAP0D;;AAAA,oBAQhD1B,QAAQ,CAAC,IAAD,CARwC;AAAA;AAAA,MAQvE2B,OARuE;AAAA,MAQ9DC,UAR8D;;AAS9E,MAAMC,OAAY,GAAG9B,MAAM,EAA3B;AACA,MAAM+B,OAAY,GAAG/B,MAAM,EAA3B;;AAV8E,oBAWtCC,QAAQ,CAAC,KAAD,CAX8B;AAAA;AAAA,MAWvE+B,YAXuE;AAAA,MAWzDC,eAXyD;;AAAA,oBAY1ChC,QAAQ,CAAC,KAAD,CAZkC;AAAA;AAAA,MAYvEiC,UAZuE;AAAA,MAY3DC,aAZ2D;;AAAA,oBAahDlC,QAAQ,CAAC,KAAD,CAbwC;AAAA;AAAA,MAavEmC,OAbuE;AAAA,MAa9DC,UAb8D;;AAAA,oBAc1CpC,QAAQ,CAACgB,KAAK,CAACqB,GAAN,CAAUC,UAAV,GAAuBtB,KAAK,CAACqB,GAAN,CAAUC,UAAjC,GAA8C,KAA/C,CAdkC;AAAA;AAAA,MAcvEA,UAduE;AAAA,MAc3DC,aAd2D;;AAAA,oBAetCvC,QAAQ,CAACgB,KAAK,CAACqB,GAAN,CAAUG,SAAV,IAAuBxB,KAAK,CAACqB,GAAN,CAAUG,SAAV,KAAwB,EAA/C,GAAoD,IAApD,GAA2D,KAA5D,CAf8B;AAAA;AAAA,MAevEC,YAfuE;AAAA,MAezDC,gBAfyD;;AAAA,oBAgBlD1C,QAAQ,CAAC,KAAD,CAhB0C;AAAA;AAAA,MAgBvE2C,MAhBuE;AAAA,MAgB/DC,SAhB+D;;AAmB9E,MAAMC,yBAAyB,GAAG/B,qBAAqB,CAAC,sBAAD,CAAvD;AACA,MAAMgC,oBAAoB,GAAGhC,qBAAqB,CAAC,iBAAD,CAAlD;AACA,MAAMiC,yBAAyB,GAAGjC,qBAAqB,CAAC,sBAAD,CAAvD;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIkB,KAAK,CAACqB,GAAN,CAAUG,SAAV,IAAuBxB,KAAK,CAACqB,GAAN,CAAUG,SAAV,KAAwB,EAAnD,EAAuD;AACnD,UAAMQ,KAAK,GAAGhC,KAAK,CAACqB,GAAN,CAAUY,QAAxB;;AACA,UAAID,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,IAAqBA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAlC,IAAyCA,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAL,KAA4B,GAAzE,EAA8E;AAC1E,YAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAX,CAAZ;;AACA,YAAIG,GAAG,CAACG,MAAR,EAAgB;AACZV,UAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ;AACJ;AACJ,GAVQ,EAUN,CAAC5B,KAAK,CAACqB,GAAP,CAVM,CAAT;AAYAvC,EAAAA,SAAS,CAAC,YAAM;AACZ,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACoBc,YAAY,CAAC2C,OAAb,CAAqB,MAArB,CADpB;;AAAA;AACUC,cAAAA,CADV;;AAEI,kBAAIA,CAAC,IAAIxC,KAAK,CAACqB,GAAN,CAAUhB,SAAnB,EAA8B;AACpBoC,gBAAAA,UADoB,GACPL,IAAI,CAACC,KAAL,CAAWG,CAAX,CADO;;AAE1B,oBAAIC,UAAU,CAACC,GAAX,CAAeC,QAAf,GAA0BC,IAA1B,OAAqC5C,KAAK,CAACqB,GAAN,CAAUhB,SAAV,CAAoBsC,QAApB,GAA+BC,IAA/B,EAAzC,EAAgF;AAC5ExB,kBAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ;;AAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAWH,GAZQ,EAYN,CAACpB,KAAK,CAACqB,GAAP,CAZM,CAAT;AAcA,MAAMwB,sBAAsB,GAAGhE,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACvBe,YAAY,CAAC2C,OAAb,CAAqB,MAArB,CADuB;;AAAA;AACjCC,YAAAA,CADiC;AAEnCC,YAAAA,UAFmC,GAEjB,EAFiB;;AAGvC,gBAAID,CAAJ,EAAO;AACHC,cAAAA,UAAU,GAAGL,IAAI,CAACC,KAAL,CAAWG,CAAX,CAAb;AACH;;AACD,gBAAIM,MAAM,CAACC,KAAP,CAAaD,MAAM,CAAC1C,KAAD,CAAnB,CAAJ,EAAiC;AAC7BQ,cAAAA,UAAU,CAAC,IAAD,CAAV;AACMoC,cAAAA,MAFuB,GAEdxD,QAAQ,CAACiD,UAAU,CAACC,GAAZ,CAFM;AAG7BM,cAAAA,MAAM,CAACC,KAAP,CAAa;AACTA,gBAAAA,KAAK,EAAExD,aADE;AAETyD,gBAAAA,SAAS,EAAE;AACP9C,kBAAAA,KAAK,EAALA;AADO;AAFF,eAAb,EAKG+C,IALH,CAKQ,kBAAMC,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDACYxD,YAAY,CAAC2C,OAAb,CAAqB,MAArB,CADZ;;AAAA;AACEC,wBAAAA,CADF;;AAEJ,4BAAIA,CAAJ,EAAO;AACGC,0BAAAA,WADH,GACgBL,IAAI,CAACC,KAAL,CAAWG,CAAX,CADhB;AAECa,0BAAAA,eAFD,GAE0B,EAF1B;;AAGH,8BAAIZ,WAAU,CAACC,GAAX,CAAeC,QAAf,GAA0BC,IAA1B,OAAqCtC,gBAAgB,CAACqC,QAAjB,GAA4BC,IAA5B,EAAzC,EAA6E;AACzES,4BAAAA,eAAe,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBC,WAAlC;AACH,2BAFD,MAEO;AACHH,4BAAAA,eAAe,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBC,WAAhB,CAA4BC,MAA5B,CAAmC,UAACF,MAAD,EAAiB;AAClE,qCAAO,CAACA,MAAM,CAACG,SAAR,IAAsBH,MAAM,CAACI,MAAP,KAAkBlB,WAAU,CAACC,GAA1D;AACH,6BAFiB,CAAlB;AAGH;;AACDlC,0BAAAA,UAAU,CAAC6C,eAAD,CAAV;;AACA,8BAAIZ,WAAU,CAACC,GAAX,CAAeC,QAAf,GAA0BC,IAA1B,OAAqCtC,gBAAgB,CAACqC,QAAjB,GAA4BC,IAA5B,EAAzC,EAA6E;AACzE5B,4BAAAA,eAAe,CAAC,IAAD,CAAf;AACAgC,4BAAAA,MAAM,CAACC,KAAP,CAAa;AACTA,8BAAAA,KAAK,EAAEvD,WADE;AAETwD,8BAAAA,SAAS,EAAE;AACP9C,gCAAAA,KAAK,EAALA;AADO;AAFF,6BAAb,EAKG+C,IALH,CAKQ,UAAAS,IAAI,EAAI;AACZ,kCAAIA,IAAI,CAACN,IAAL,CAAUO,MAAV,IAAoBD,IAAI,CAACN,IAAL,CAAUO,MAAV,CAAiBL,WAAzC,EAAsD;AAClD,oCAAMM,IAAW,GAAG,EAApB;AACA,oCAAMC,QAAQ,GAAGH,IAAI,CAACN,IAAL,CAAUO,MAAV,CAAiBL,WAAlC;AACAO,gCAAAA,QAAQ,CAACC,GAAT,CAAa,UAACH,MAAD,EAAiB;AAC1BC,kCAAAA,IAAI,CAACG,IAAL,CAAU;AACNC,oCAAAA,WAAW,EAAEL,MAAM,CAACK,WADd;AAENxB,oCAAAA,GAAG,EAAEmB,MAAM,CAACF,MAFN;AAGNQ,oCAAAA,QAAQ,EAAEN,MAAM,CAACA,MAHX;AAINvC,oCAAAA,UAAU,EAAEuC,MAAM,CAACvC,UAJb;AAKN8C,oCAAAA,OAAO,EAAEP,MAAM,CAACO,OALV;AAMNC,oCAAAA,KAAK,EAAER,MAAM,CAACQ,KANR;AAONC,oCAAAA,MAAM,EAAET,MAAM,CAACS,MAPT;AAQNX,oCAAAA,MAAM,EAAEE,MAAM,CAACF,MART;AASNY,oCAAAA,WAAW,EAAEV,MAAM,CAACU;AATd,mCAAV;AAWH,iCAZD;AAaA7D,gCAAAA,cAAc,CAACoD,IAAD,CAAd;AACAlD,gCAAAA,UAAU,CAAC,KAAD,CAAV;AAOH,+BAxBD,MAwBO;AACHA,gCAAAA,UAAU,CAAC,KAAD,CAAV;AAOH;AACJ,6BAvCD,EAuCG4D,KAvCH,CAuCS,UAAAC,GAAG,EAAI;AACZvF,8BAAAA,KAAK,CAAC2C,yBAAD,EAA4BC,oBAA5B,CAAL;AACAlB,8BAAAA,UAAU,CAAC,KAAD,CAAV;AAOH,6BAhDD;AAiDH,2BAnDD,MAmDO;AACHA,4BAAAA,UAAU,CAAC,KAAD,CAAV;AAOH;AACJ,yBAvED,MAuEO;AACHJ,0BAAAA,UAAU,CAAC4C,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBC,WAAjB,CAAV;AACA5C,0BAAAA,UAAU,CAAC,KAAD,CAAV;AAOH;;AAlFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALR,EAwFG4D,KAxFH,CAwFS,UAAAC,GAAG,EAAI;AACZvF,gBAAAA,KAAK,CAAC6C,yBAAD,EAA4BD,oBAA5B,CAAL;AACAlB,gBAAAA,UAAU,CAAC,KAAD,CAAV;AAOH,eAjGD;AAkGH,aArGD,MAqGO;AACHA,cAAAA,UAAU,CAAC,KAAD,CAAV;AAOH;;AAnHsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAoHvC,CAACR,KAAD,EAAQD,cAAR,EAAwBE,SAAxB,EAAmCC,gBAAnC,CApHuC,CAA1C;AAsHAxB,EAAAA,SAAS,CAAC,YAAM;AACZ+D,IAAAA,sBAAsB;AACzB,GAFQ,EAEN,CAAC7C,KAAK,CAACI,KAAP,EAAcJ,KAAK,CAACwB,SAApB,CAFM,CAAT;AAIA,MAAMkD,YAAY,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiC,IAAjC,GAAwCF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBE,MAAzB,GAAkC,EAA1E,GAA+EH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBE,MAA7H;AAEA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AACTD,MAAAA,KAAK,EAAE,MADE;AAETC,MAAAA,MAAM,EAAEJ,YAFC;AAGTK,MAAAA,eAAe,EAAE,SAHR;AAITC,MAAAA,mBAAmB,EAAE,CAJZ;AAKTC,MAAAA,oBAAoB,EAAE;AALb,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQQtE,OAAO,GACD,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AACXkE,MAAAA,KAAK,EAAE,MADI;AAEXK,MAAAA,IAAI,EAAE,CAFK;AAGXC,MAAAA,cAAc,EAAE,QAHL;AAIXC,MAAAA,OAAO,EAAE,MAJE;AAKXC,MAAAA,aAAa,EAAE,QALJ;AAMXN,MAAAA,eAAe,EAAE,OANN;AAOXC,MAAAA,mBAAmB,EAAE,CAPV;AAQXC,MAAAA,oBAAoB,EAAE;AARX,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAE,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADC,GAcH,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE;AAClBJ,MAAAA,KAAK,EAAE,MADW;AAElBC,MAAAA,MAAM,EAAEJ,YAFU;AAGlBY,MAAAA,OAAO,EAAEnF,cAHS;AAIlB6E,MAAAA,mBAAmB,EAAE,CAJH;AAKlBC,MAAAA,oBAAoB,EAAE;AALJ,KAAtB;AAOI,IAAA,GAAG,EAAE7C,IAAI,CAACmD,SAAL,CAAehF,OAAf,CAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA6BK,CAACU,UAAD,GAAc,oBAAC,UAAD;AACX,IAAA,mBAAmB,EAAE,IADV;AAEX,IAAA,UAAU,EAAE,KAFD;AAGX,IAAA,KAAK,EAAE;AACHgE,MAAAA,oBAAoB,EAAE,CADnB;AAEHD,MAAAA,mBAAmB,EAAE;AAFlB,KAHI;AAOX,IAAA,qBAAqB,EAAE;AACnBC,MAAAA,oBAAoB,EAAE,CADH;AAEnBD,MAAAA,mBAAmB,EAAE,CAFF;AAGnBQ,MAAAA,SAAS,EAAEd;AAHQ,KAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaX,oBAAC,cAAD;AAEI,IAAA,SAAS,EAAE1E,KAAK,CAACwB,SAFrB;AAGI,IAAA,gBAAgB,EAAExB,KAAK,CAACyF,gBAH5B;AAII,IAAA,GAAG,EAAEzF,KAAK,CAACqB,GAJf;AAKI,IAAA,QAAQ,EAAErB,KAAK,CAAC0F,QALpB;AAMI,IAAA,MAAM,EAAE1F,KAAK,CAAC2F,MANlB;AAOI,IAAA,YAAY,EAAE5E,YAPlB;AAQI,IAAA,SAAS,EAAEV,SARf;AASI,IAAA,UAAU,EAAE,sBAAM;AACdJ,MAAAA,QAAQ,CAAC2F,MAAT,CAAgBzF,cAAhB,EAAgC;AAC5B0F,QAAAA,OAAO,EAAE,CADmB;AAE5BC,QAAAA,QAAQ,EAAE,GAFkB;AAG5BC,QAAAA,eAAe,EAAE;AAHW,OAAhC,EAIGC,KAJH,CAIS;AAAA,eAAMhG,KAAK,CAACiG,UAAN,EAAN;AAAA,OAJT;AAKH,KAfL;AAgBI,IAAA,wBAAwB,EAAE;AAAA,aAAMjG,KAAK,CAACkG,wBAAN,EAAN;AAAA,KAhB9B;AAiBI,IAAA,gBAAgB,EAAE;AAAA,aAAMhF,aAAa,CAAC,IAAD,CAAnB;AAAA,KAjBtB;AAkBI,IAAA,UAAU,EAAED,UAlBhB;AAmBI,IAAA,YAAY,EAAEQ,YAnBlB;AAoBI,IAAA,eAAe,EAAE,yBAAC0E,GAAD;AAAA,aAAkBzE,gBAAe,CAACyE,GAAD,CAAjC;AAAA,KApBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbW,EAoCP,CAACrD,MAAM,CAACC,KAAP,CAAaD,MAAM,CAAC1C,KAAD,CAAnB,CAAD,IACO,CAACJ,KAAK,CAACwB,SADd,IAGQxB,KAAK,CAACqB,GAAN,CAAUY,QAAV,IAAsBjC,KAAK,CAACqB,GAAN,CAAUY,QAAV,CAAmBmE,QAAnB,CAA4B,QAA5B,CAH9B,GAIQ,oBAAC,IAAD;AACJ,IAAA,KAAK,EAAE;AAAElB,MAAAA,IAAI,EAAE,CAAR;AAAWH,MAAAA,eAAe,EAAE;AAA5B,KADH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,GAOI,oBAAC,UAAD;AAEI,IAAA,GAAG,EAAElE,OAFT;AAGI,IAAA,qBAAqB,EAAE;AACnBgE,MAAAA,KAAK,EAAE,MADY;AAEnBC,MAAAA,MAAM,EAAE;AAFW,KAH3B;AAOI,IAAA,aAAa,EAAE;AAAEuB,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAPnB;AAQI,IAAA,4BAA4B,EAAE,KARlC;AASI,IAAA,cAAc,EAAE,QATpB;AAUI,IAAA,oBAAoB,EAAE,IAV1B;AAWI,IAAA,aAAa,EAAE,IAXnB;AAYI,IAAA,mBAAmB,EAAE,CAZzB;AAaI,IAAA,mBAAmB,EAAE,SAbzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeI,oBAAC,WAAD;AACI,IAAA,gBAAgB,EAAEtG,KAAK,CAACM,gBAD5B;AAEI,IAAA,GAAG,EAAE8B,IAAI,CAACmD,SAAL,CAAehF,OAAf,CAFT;AAGI,IAAA,OAAO,EAAEA,OAHb;AAII,IAAA,KAAK,EAAEH,KAJX;AAKI,IAAA,SAAS,EAAEJ,KAAK,CAACwB,SALrB;AAMI,IAAA,WAAW,EAAExB,KAAK,CAACuG,YANvB;AAOI,IAAA,UAAU,EAAE;AAAA,aAAMvG,KAAK,CAACiG,UAAN,EAAN;AAAA,KAPhB;AAQI,IAAA,MAAM,EAAE;AAAA,aAAMpD,sBAAsB,EAA5B;AAAA,KARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,CA3CG,CAAd,GAuEK,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEgC,MAAAA,KAAK,EAAE,MAAT;AAAiB2B,MAAAA,SAAS,EAAE,QAA5B;AAAsC1B,MAAAA,MAAM,EAAE,EAA9C;AAAkD2B,MAAAA,aAAa,EAAE,EAAjE;AAAqE1B,MAAAA,eAAe,EAAE;AAAtF,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEM,MAAAA,aAAa,EAAE,KAAjB;AAAwBqB,MAAAA,WAAW,EAAE;AAArC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAE;AACHvB,MAAAA,cAAc,EAAE,QADb;AAEHE,MAAAA,aAAa,EAAE;AAFZ,KADX;AAKI,IAAA,OAAO,EAAE,mBAAM;AACXnE,MAAAA,aAAa,CAAC,KAAD,CAAb;;AACAQ,MAAAA,gBAAe,CAAC,IAAD,CAAf;AAEH,KATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,YAAY,GAAGkF,MAAM,CAACC,WAAV,GAAwBD,MAAM,CAACE,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK/G,qBAAqB,CAAC,YAAD,CAD1B,CAVJ,CADJ,EAgBSqB,OAAO,IAAIG,UAAZ,IAA2BK,MAA3B,GAAoC,IAApC,GACI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAE;AACHwD,MAAAA,cAAc,EAAE,QADb;AAEHE,MAAAA,aAAa,EAAE;AAFZ,KADX;AAKI,IAAA,OAAO,EAAE,mBAAM;AACXnE,MAAAA,aAAa,CAAC,KAAD,CAAb;;AACAQ,MAAAA,gBAAe,CAAC,KAAD,CAAf;AACH,KARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACD,YAAD,IAAiB,CAACR,UAAlB,GAA+B0F,MAAM,CAACC,WAAtC,GAAoDD,MAAM,CAACE,GAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQvF,UAAU,GAAGxB,qBAAqB,CAAC,cAAD,CAAxB,GAA2CA,qBAAqB,CAAC,SAAD,CAFlF,CATJ,CAjBZ,EAmCQ,CAACqB,OAAD,GAAW,IAAX,GACI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAE;AACHgE,MAAAA,cAAc,EAAE,QADb;AAEHE,MAAAA,aAAa,EAAE;AAFZ,KADX;AAKI,IAAA,OAAO,EAAE,mBAAM;AACXnE,MAAAA,aAAa,CAAC,IAAD,CAAb;;AACAQ,MAAAA,gBAAe,CAAC,KAAD,CAAf;AACH,KARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET,UAAU,GAAG0F,MAAM,CAACC,WAAV,GAAwBD,MAAM,CAACE,GAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,CApCZ,CAJF,EAwDM9F,YAAY,GACR,oBAAC,IAAD;AACI,IAAA,KAAK,EAAE;AACHgE,MAAAA,eAAe,EAAE,OADd;AAEHF,MAAAA,KAAK,EAAE,MAFJ;AAGHC,MAAAA,MAAM,EAAEJ,YAAY,GAAG,EAHpB;AAKHO,MAAAA,oBAAoB,EAAE,CALnB;AAMHD,MAAAA,mBAAmB,EAAE,CANlB;AAOH8B,MAAAA,UAAU,EAAE;AAPT,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA6BI,oBAAC,UAAD;AACI,IAAA,GAAG,EAAEhG,OADT;AAEI,IAAA,qBAAqB,EAAE;AACnB+D,MAAAA,KAAK,EAAE,MADY;AAEnBC,MAAAA,MAAM,EAAEJ,YAAY,GAAG;AAFJ,KAF3B;AAMI,IAAA,4BAA4B,EAAE,KANlC;AAOI,IAAA,aAAa,EAAE;AAAE2B,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAPnB;AAQI,IAAA,GAAG,EAAEvF,YAAY,CAAC4B,QAAb,EART;AASI,IAAA,cAAc,EAAE,QATpB;AAUI,IAAA,oBAAoB,EAAE,IAV1B;AAWI,IAAA,aAAa,EAAE,IAXnB;AAYI,IAAA,mBAAmB,EAAE,CAZzB;AAaI,IAAA,mBAAmB,EAAE,SAbzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeI,oBAAC,eAAD;AACI,IAAA,GAAG,EAAEP,IAAI,CAACmD,SAAL,CAAe9E,WAAf,CADT;AAEI,IAAA,WAAW,EAAEA,WAFjB;AAGI,IAAA,KAAK,EAAEL,KAHX;AAII,IAAA,WAAW,EAAEJ,KAAK,CAACuG,YAJvB;AAKI,IAAA,SAAS,EAAEvG,KAAK,CAACwB,SALrB;AAMI,IAAA,UAAU,EAAE,sBAAM;AACdvB,MAAAA,QAAQ,CAAC2F,MAAT,CAAgBzF,cAAhB,EAAgC;AAC5B0F,QAAAA,OAAO,EAAE,CADmB;AAE5BC,QAAAA,QAAQ,EAAE,GAFkB;AAG5BC,QAAAA,eAAe,EAAE;AAHW,OAAhC,EAIGC,KAJH,CAIS;AAAA,eAAMhG,KAAK,CAACiG,UAAN,EAAN;AAAA,OAJT;AAKH,KAZL;AAaI,IAAA,MAAM,EAAE;AAAA,aAAMpD,sBAAsB,EAA5B;AAAA,KAbZ;AAcI,IAAA,GAAG,EAAE7C,KAAK,CAACqB,GAdf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,CA7BJ,CADQ,GA+DN,IAvHZ,CApGV,CAtBZ,CADJ;AA2PH,CAxaD;;AA0aA,eAAetB,MAAf;AAEA,IAAM4G,MAAW,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAClCH,EAAAA,GAAG,EAAE;AACDI,IAAAA,QAAQ,EAAE,EADT;AAEDC,IAAAA,KAAK,EAAE,SAFN;AAGDpC,IAAAA,MAAM,EAAE,EAHP;AAIDqC,IAAAA,iBAAiB,EAAE,EAJlB;AAKDpC,IAAAA,eAAe,EAAE,OALhB;AAMDqC,IAAAA,UAAU,EAAE;AANX,GAD6B;AASlCR,EAAAA,WAAW,EAAE;AACTK,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,iBAAiB,EAAE,EAHV;AAITE,IAAAA,YAAY,EAAE,EAJL;AAKTtC,IAAAA,eAAe,EAAE,SALR;AAMTqC,IAAAA,UAAU,EAAE;AANH;AATqB,CAAlB,CAApB","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, Fragment } from 'react';\r\nimport { Animated, ActivityIndicator, Dimensions, StyleSheet } from 'react-native';\r\nimport Alert from '../components/Alert'\r\nimport { View, TouchableOpacity, Text } from '../components/Themed';\r\nimport Swiper from 'react-native-web-swiper'\r\nimport UpdateControls from './UpdateControls';\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport { fetchAPI } from '../graphql/FetchAPI';\r\nimport { getCueThreads, getStatuses } from '../graphql/QueriesAndMutations';\r\nimport ThreadsList from './ThreadsList';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport SubscribersList from './SubscribersList';\r\nimport { PreferredLanguageText } from '../helpers/LanguageContext';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nconst Update: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [modalAnimation] = useState(new Animated.Value(1))\r\n    const [cueId] = useState(props.cueId)\r\n    const [createdBy] = useState(props.createdBy)\r\n    const [channelCreatedBy] = useState(props.channelCreatedBy)\r\n    const [threads, setThreads] = useState<any[]>([])\r\n    const [subscribers, setSubscribers] = useState<any[]>([])\r\n    const [loading, setLoading] = useState(true)\r\n    const scroll2: any = useRef()\r\n    const scroll3: any = useRef()\r\n    const [channelOwner, setChannelOwner] = useState(false)\r\n    const [viewStatus, setViewStatus] = useState(false);\r\n    const [isOwner, setIsOwner] = useState(false)\r\n    const [submission, setSubmission] = useState(props.cue.submission ? props.cue.submission : false)\r\n    const [showOriginal, setShowOriginal] = useState(props.cue.channelId && props.cue.channelId !== '' ? true : false)\r\n    const [isQuiz, setIsQuiz] = useState(false)\r\n\r\n\r\n    const unableToLoadStatusesAlert = PreferredLanguageText('unableToLoadStatuses');\r\n    const checkConnectionAlert = PreferredLanguageText('checkConnection');\r\n    const unableToLoadCommentsAlert = PreferredLanguageText('unableToLoadComments')\r\n\r\n    useEffect(() => {\r\n        if (props.cue.channelId && props.cue.channelId !== '') {\r\n            const data1 = props.cue.original;\r\n            if (data1 && data1[0] && data1[0] === '{' && data1[data1.length - 1] === '}') {\r\n                const obj = JSON.parse(data1)\r\n                if (obj.quizId) {\r\n                    setIsQuiz(true)\r\n                }\r\n            }\r\n        }\r\n    }, [props.cue])\r\n\r\n    useEffect(() => {\r\n        (\r\n            async () => {\r\n                const u = await AsyncStorage.getItem('user')\r\n                if (u && props.cue.createdBy) {\r\n                    const parsedUser = JSON.parse(u)\r\n                    if (parsedUser._id.toString().trim() === props.cue.createdBy.toString().trim()) {\r\n                        setIsOwner(true)\r\n                    }\r\n                }\r\n            }\r\n        )()\r\n    }, [props.cue])\r\n\r\n    const loadThreadsAndStatuses = useCallback(async () => {\r\n        const u = await AsyncStorage.getItem('user')\r\n        let parsedUser: any = {}\r\n        if (u) {\r\n            parsedUser = JSON.parse(u)\r\n        }\r\n        if (Number.isNaN(Number(cueId))) {\r\n            setLoading(true)\r\n            const server = fetchAPI(parsedUser._id)\r\n            server.query({\r\n                query: getCueThreads,\r\n                variables: {\r\n                    cueId\r\n                }\r\n            }).then(async res => {\r\n                const u = await AsyncStorage.getItem('user')\r\n                if (u) {\r\n                    const parsedUser = JSON.parse(u)\r\n                    let filteredThreads: any[] = []\r\n                    if (parsedUser._id.toString().trim() === channelCreatedBy.toString().trim()) {\r\n                        filteredThreads = res.data.thread.findByCueId;\r\n                    } else {\r\n                        filteredThreads = res.data.thread.findByCueId.filter((thread: any) => {\r\n                            return !thread.isPrivate || (thread.userId === parsedUser._id)\r\n                        })\r\n                    }\r\n                    setThreads(filteredThreads)\r\n                    if (parsedUser._id.toString().trim() === channelCreatedBy.toString().trim()) {\r\n                        setChannelOwner(true)\r\n                        server.query({\r\n                            query: getStatuses,\r\n                            variables: {\r\n                                cueId\r\n                            }\r\n                        }).then(res2 => {\r\n                            if (res2.data.status && res2.data.status.findByCueId) {\r\n                                const subs: any[] = []\r\n                                const statuses = res2.data.status.findByCueId\r\n                                statuses.map((status: any) => {\r\n                                    subs.push({\r\n                                        displayName: status.displayName,\r\n                                        _id: status.userId,\r\n                                        fullName: status.status,\r\n                                        submission: status.submission,\r\n                                        comment: status.comment,\r\n                                        score: status.score,\r\n                                        graded: status.graded,\r\n                                        userId: status.userId,\r\n                                        submittedAt: status.submittedAt\r\n                                    })\r\n                                })\r\n                                setSubscribers(subs)\r\n                                setLoading(false)\r\n                                // modalAnimation.setValue(0)\r\n                                // Animated.timing(modalAnimation, {\r\n                                //     toValue: 1,\r\n                                //     duration: 150,\r\n                                //     useNativeDriver: true\r\n                                // }).start();\r\n                            } else {\r\n                                setLoading(false)\r\n                                // modalAnimation.setValue(0)\r\n                                // Animated.timing(modalAnimation, {\r\n                                //     toValue: 1,\r\n                                //     duration: 150,\r\n                                //     useNativeDriver: true\r\n                                // }).start();\r\n                            }\r\n                        }).catch(err => {\r\n                            Alert(unableToLoadStatusesAlert, checkConnectionAlert)\r\n                            setLoading(false)\r\n                            // modalAnimation.setValue(0)\r\n                            // Animated.timing(modalAnimation, {\r\n                            //     toValue: 1,\r\n                            //     duration: 150,\r\n                            //     useNativeDriver: true\r\n                            // }).start();\r\n                        })\r\n                    } else {\r\n                        setLoading(false)\r\n                        // modalAnimation.setValue(0)\r\n                        // Animated.timing(modalAnimation, {\r\n                        //     toValue: 1,\r\n                        //     duration: 150,\r\n                        //     useNativeDriver: true\r\n                        // }).start();\r\n                    }\r\n                } else {\r\n                    setThreads(res.data.thread.findByCueId)\r\n                    setLoading(false)\r\n                    // modalAnimation.setValue(0)\r\n                    // Animated.timing(modalAnimation, {\r\n                    //     toValue: 1,\r\n                    //     duration: 150,\r\n                    //     useNativeDriver: true\r\n                    // }).start();\r\n                }\r\n            }).catch(err => {\r\n                Alert(unableToLoadCommentsAlert, checkConnectionAlert)\r\n                setLoading(false)\r\n                // modalAnimation.setValue(0)\r\n                // Animated.timing(modalAnimation, {\r\n                //     toValue: 1,\r\n                //     duration: 150,\r\n                //     useNativeDriver: true\r\n                // }).start();\r\n            })\r\n        } else {\r\n            setLoading(false)\r\n            // modalAnimation.setValue(0)\r\n            // Animated.timing(modalAnimation, {\r\n            //     toValue: 1,\r\n            //     duration: 150,\r\n            //     useNativeDriver: true\r\n            // }).start();\r\n        }\r\n    }, [cueId, modalAnimation, createdBy, channelCreatedBy])\r\n\r\n    useEffect(() => {\r\n        loadThreadsAndStatuses()\r\n    }, [props.cueId, props.channelId])\r\n\r\n    const windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\r\n    \r\n    return (\r\n        <View style={{\r\n            width: '100%',\r\n            height: windowHeight,\r\n            backgroundColor: '#f4f4f6',\r\n            borderTopLeftRadius: 0,\r\n            borderTopRightRadius: 0,\r\n        }}>\r\n            {\r\n                loading\r\n                    ? <View style={{\r\n                        width: '100%',\r\n                        flex: 1,\r\n                        justifyContent: 'center',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        backgroundColor: 'white',\r\n                        borderTopLeftRadius: 0,\r\n                        borderTopRightRadius: 0,\r\n                    }}>\r\n                        <ActivityIndicator color={'#a2a2aa'} />\r\n                    </View>\r\n                    :\r\n                    <Animated.View style={{\r\n                        width: '100%',\r\n                        height: windowHeight,\r\n                        opacity: modalAnimation,\r\n                        borderTopLeftRadius: 0,\r\n                        borderTopRightRadius: 0,\r\n                    }}\r\n                        key={JSON.stringify(threads)}\r\n                    >\r\n                        {/* <Swiper\r\n                            containerStyle={{\r\n                                borderTopRightRadius: 0,\r\n                                borderTopLeftRadius: 0\r\n                            }}\r\n                            key={JSON.stringify(threads) + JSON.stringify(threads.length)}\r\n                            vertical={false}\r\n                            from={0}\r\n                            minDistanceForAction={0.1}\r\n                            controlsProps={{\r\n                                dotsTouchable: true,\r\n                                prevPos: 'left',\r\n                                nextPos: 'right',\r\n                                nextTitle: '›',\r\n                                nextTitleStyle: { color: '#a2a2aa', fontSize: 60, fontFamily: 'overpass' },\r\n                                prevTitle: '‹',\r\n                                prevTitleStyle: { color: '#a2a2aa', fontSize: 60, fontFamily: 'overpass' },\r\n                                dotActiveStyle: { backgroundColor: !Number.isNaN(Number(cueId)) || (props.channelId && !channelOwner) || (!props.channelId || props.channelId === '') ? '#fff' : '#3B64F8' }\r\n                            }}\r\n                        > */}\r\n                        {!viewStatus ? <ScrollView\r\n                            nestedScrollEnabled={true}\r\n                            horizontal={false}\r\n                            style={{\r\n                                borderTopRightRadius: 0,\r\n                                borderTopLeftRadius: 0,\r\n                            }}\r\n                            contentContainerStyle={{\r\n                                borderTopRightRadius: 0,\r\n                                borderTopLeftRadius: 0,\r\n                                minHeight: windowHeight\r\n                            }}\r\n                        >\r\n                            <UpdateControls\r\n                                // key={JSON.stringify(showOriginal) + JSON.stringify(viewStatus)}\r\n                                channelId={props.channelId}\r\n                                customCategories={props.customCategories}\r\n                                cue={props.cue}\r\n                                cueIndex={props.cueIndex}\r\n                                cueKey={props.cueKey}\r\n                                channelOwner={channelOwner}\r\n                                createdBy={createdBy}\r\n                                closeModal={() => {\r\n                                    Animated.timing(modalAnimation, {\r\n                                        toValue: 0,\r\n                                        duration: 150,\r\n                                        useNativeDriver: true\r\n                                    }).start(() => props.closeModal())\r\n                                }}\r\n                                reloadCueListAfterUpdate={() => props.reloadCueListAfterUpdate()}\r\n                                changeViewStatus={() => setViewStatus(true)}\r\n                                viewStatus={viewStatus}\r\n                                showOriginal={showOriginal}\r\n                                setShowOriginal={(val: boolean) => setShowOriginal(val)}\r\n                            />\r\n                            {\r\n                                !Number.isNaN(Number(cueId))\r\n                                    || !props.channelId\r\n                                    || (\r\n                                        props.cue.original && props.cue.original.includes(\"quizId\")\r\n                                    ) ? <View\r\n                                    style={{ flex: 1, backgroundColor: 'white' }}\r\n                                /> :\r\n                                    <ScrollView\r\n                                        // key={Math.random()}\r\n                                        ref={scroll2}\r\n                                        contentContainerStyle={{\r\n                                            width: '100%',\r\n                                            height: '100%'\r\n                                        }}\r\n                                        contentOffset={{ x: 0, y: 1 }}\r\n                                        showsVerticalScrollIndicator={false}\r\n                                        overScrollMode={'always'}\r\n                                        alwaysBounceVertical={true}\r\n                                        scrollEnabled={true}\r\n                                        scrollEventThrottle={1}\r\n                                        keyboardDismissMode={'on-drag'}\r\n                                    >\r\n                                        <ThreadsList\r\n                                            channelCreatedBy={props.channelCreatedBy}\r\n                                            key={JSON.stringify(threads)}\r\n                                            threads={threads}\r\n                                            cueId={cueId}\r\n                                            channelId={props.channelId}\r\n                                            channelName={props.filterChoice}\r\n                                            closeModal={() => props.closeModal()}\r\n                                            reload={() => loadThreadsAndStatuses()}\r\n                                        />\r\n                                    </ScrollView>\r\n                            }\r\n                        </ScrollView>\r\n                            : <Fragment>\r\n                                <Text style={{ width: '100%', textAlign: 'center', height: 15, paddingBottom: 30, backgroundColor: 'white' }}>\r\n                                    {/* <Ionicons name='chevron-down' size={20} color={'#e0e0e0'} /> */}\r\n                                </Text>\r\n                                <View style={{ flexDirection: 'row', paddingLeft: 20 }}>\r\n                                    <TouchableOpacity\r\n                                        style={{\r\n                                            justifyContent: 'center',\r\n                                            flexDirection: 'column'\r\n                                        }}\r\n                                        onPress={() => {\r\n                                            setViewStatus(false)\r\n                                            setShowOriginal(true)\r\n\r\n                                        }}>\r\n                                        <Text style={showOriginal ? styles.allGrayFill : styles.all}>\r\n                                            {PreferredLanguageText('viewShared')}\r\n                                        </Text>\r\n                                    </TouchableOpacity>\r\n                                    {\r\n                                        (isOwner && submission) || isQuiz ? null :\r\n                                            <TouchableOpacity\r\n                                                style={{\r\n                                                    justifyContent: 'center',\r\n                                                    flexDirection: 'column'\r\n                                                }}\r\n                                                onPress={() => {\r\n                                                    setViewStatus(false)\r\n                                                    setShowOriginal(false)\r\n                                                }}>\r\n                                                <Text style={!showOriginal && !viewStatus ? styles.allGrayFill : styles.all}>\r\n                                                    {\r\n                                                        submission ? PreferredLanguageText('mySubmission') : PreferredLanguageText('myNotes')\r\n                                                    }\r\n                                                </Text>\r\n                                            </TouchableOpacity>\r\n                                    }\r\n                                    {/* Add Status button here */}\r\n                                    {\r\n                                        !isOwner ? null :\r\n                                            <TouchableOpacity\r\n                                                style={{\r\n                                                    justifyContent: 'center',\r\n                                                    flexDirection: 'column'\r\n                                                }}\r\n                                                onPress={() => {\r\n                                                    setViewStatus(true)\r\n                                                    setShowOriginal(false)\r\n                                                }}>\r\n                                                <Text style={viewStatus ? styles.allGrayFill : styles.all}>\r\n                                                    Status\r\n                                                </Text>\r\n                                            </TouchableOpacity>\r\n                                    }\r\n                                </View>\r\n                                {\r\n                                    channelOwner ?\r\n                                        <View\r\n                                            style={{\r\n                                                backgroundColor: 'white',\r\n                                                width: '100%',\r\n                                                height: windowHeight - 52,\r\n                                                // paddingHorizontal: 20,\r\n                                                borderTopRightRadius: 0,\r\n                                                borderTopLeftRadius: 0,\r\n                                                paddingTop: 10\r\n                                            }}>\r\n                                            {/* <View style={{ backgroundColor: 'white', flexDirection: 'row', paddingBottom: 25 }}>\r\n                                    <TouchableOpacity\r\n                                        key={Math.random()}\r\n                                        style={{\r\n                                            flex: 1,\r\n                                            backgroundColor: 'white'\r\n                                        }}\r\n                                        onPress={() => {\r\n                                            setViewStatus(false)   \r\n                                        }}>\r\n                                            <Text style={{\r\n                                                width: '100%',\r\n                                                fontSize: 16,\r\n                                                color: '#a2a2aa'\r\n                                            }}>\r\n                                                <Ionicons name='chevron-back-outline' size={17} color={'#202025'} style={{ marginRight: 10 }} /> Cue\r\n                                            </Text>\r\n                                    </TouchableOpacity>\r\n                                    </View> */}\r\n                                            <ScrollView\r\n                                                ref={scroll3}\r\n                                                contentContainerStyle={{\r\n                                                    width: '100%',\r\n                                                    height: windowHeight - 52\r\n                                                }}\r\n                                                showsVerticalScrollIndicator={false}\r\n                                                contentOffset={{ x: 0, y: 1 }}\r\n                                                key={channelOwner.toString()}\r\n                                                overScrollMode={'always'}\r\n                                                alwaysBounceVertical={true}\r\n                                                scrollEnabled={true}\r\n                                                scrollEventThrottle={1}\r\n                                                keyboardDismissMode={'on-drag'}\r\n                                            >\r\n                                                <SubscribersList\r\n                                                    key={JSON.stringify(subscribers)}\r\n                                                    subscribers={subscribers}\r\n                                                    cueId={cueId}\r\n                                                    channelName={props.filterChoice}\r\n                                                    channelId={props.channelId}\r\n                                                    closeModal={() => {\r\n                                                        Animated.timing(modalAnimation, {\r\n                                                            toValue: 0,\r\n                                                            duration: 150,\r\n                                                            useNativeDriver: true\r\n                                                        }).start(() => props.closeModal())\r\n                                                    }}\r\n                                                    reload={() => loadThreadsAndStatuses()}\r\n                                                    cue={props.cue}\r\n                                                />\r\n                                            </ScrollView>\r\n                                        </View>\r\n                                        : null\r\n                                }\r\n                            </Fragment>}\r\n\r\n                        {/* </Swiper> */}\r\n                    </Animated.View>\r\n            }\r\n        </View >\r\n    );\r\n}\r\n\r\nexport default Update\r\n\r\nconst styles: any = StyleSheet.create({\r\n    all: {\r\n        fontSize: 12,\r\n        color: '#a2a2aa',\r\n        height: 22,\r\n        paddingHorizontal: 10,\r\n        backgroundColor: 'white',\r\n        lineHeight: 20\r\n    },\r\n    allGrayFill: {\r\n        fontSize: 12,\r\n        color: '#fff',\r\n        paddingHorizontal: 10,\r\n        borderRadius: 10,\r\n        backgroundColor: '#a2a2aa',\r\n        lineHeight: 20\r\n    },\r\n})"]},"metadata":{},"sourceType":"module"}