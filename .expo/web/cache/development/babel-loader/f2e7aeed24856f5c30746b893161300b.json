{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\Discussion.tsx\";\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Alert from \"../components/Alert\";\nimport { View } from \"./Themed\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { fetchAPI } from \"../graphql/FetchAPI\";\nimport { getChannelThreads } from \"../graphql/QueriesAndMutations\";\nimport ThreadsList from \"./ThreadsList\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { PreferredLanguageText } from \"../helpers/LanguageContext\";\n\nvar Discussion = function Discussion(props) {\n  var _useState = useState(new Animated.Value(1)),\n      _useState2 = _slicedToArray(_useState, 1),\n      modalAnimation = _useState2[0];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      threads = _useState6[0],\n      setThreads = _useState6[1];\n\n  var unableToLoadDiscussionAlert = PreferredLanguageText('unableToLoadDiscussion');\n  var checkConnectionAlert = PreferredLanguageText('checkConnection');\n  var loadThreads = useCallback(function _callee() {\n    var u, parsedUser, server;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            u = _context.sent;\n            parsedUser = {};\n\n            if (u) {\n              parsedUser = JSON.parse(u);\n            }\n\n            setLoading(true);\n\n            if (props.channelId && props.channelId !== '') {\n              server = fetchAPI(parsedUser._id);\n              server.query({\n                query: getChannelThreads,\n                variables: {\n                  channelId: props.channelId\n                }\n              }).then(function (res) {\n                if (res.data.thread && res.data.thread.findByChannelId) {\n                  var filteredThreads = [];\n\n                  if (parsedUser._id.toString().trim() === props.channelCreatedBy.toString().trim()) {\n                    filteredThreads = res.data.thread.findByChannelId;\n                  } else {\n                    filteredThreads = res.data.thread.findByChannelId.filter(function (thread) {\n                      return !thread.isPrivate || thread.userId === parsedUser._id;\n                    });\n                  }\n\n                  setThreads(filteredThreads);\n                }\n\n                setLoading(false);\n                modalAnimation.setValue(0);\n                Animated.timing(modalAnimation, {\n                  toValue: 1,\n                  duration: 150,\n                  useNativeDriver: true\n                }).start();\n              }).catch(function (err) {\n                Alert(unableToLoadDiscussionAlert, checkConnectionAlert);\n                setLoading(false);\n                modalAnimation.setValue(0);\n                Animated.timing(modalAnimation, {\n                  toValue: 1,\n                  duration: 150,\n                  useNativeDriver: true\n                }).start();\n              });\n            } else {\n              setLoading(false);\n              modalAnimation.setValue(0);\n              Animated.timing(modalAnimation, {\n                toValue: 1,\n                duration: 150,\n                useNativeDriver: true\n              }).start();\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [props.channelId, modalAnimation, props.channelCreatedBy]);\n  useEffect(function () {\n    loadThreads();\n  }, [props.channelId]);\n  var windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\n  return React.createElement(ScrollView, {\n    style: {\n      width: '100%',\n      height: windowHeight,\n      backgroundColor: 'white',\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    showsVerticalScrollIndicator: false,\n    scrollEnabled: true,\n    scrollEventThrottle: 1,\n    keyboardDismissMode: 'on-drag',\n    overScrollMode: 'never',\n    nestedScrollEnabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      opacity: modalAnimation,\n      width: '100%',\n      height: windowHeight,\n      backgroundColor: 'white',\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, loading ? React.createElement(View, {\n    style: {\n      width: '100%',\n      flex: 1,\n      justifyContent: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 27\n    }\n  }, React.createElement(ActivityIndicator, {\n    color: '#a2a2aa',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 29\n    }\n  })) : React.createElement(ThreadsList, {\n    key: JSON.stringify(threads),\n    threads: threads,\n    cueId: null,\n    channelName: props.filterChoice,\n    channelId: props.channelId,\n    closeModal: function closeModal() {\n      Animated.timing(modalAnimation, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true\n      }).start(function () {\n        return props.closeModal();\n      });\n    },\n    channelCreatedBy: props.channelCreatedBy,\n    reload: function reload() {\n      return loadThreads();\n    },\n    refreshUnreadDiscussionCount: function refreshUnreadDiscussionCount() {\n      return props.refreshUnreadDiscussionCount();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  })));\n};\n\nexport default Discussion;","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/Discussion.tsx"],"names":["React","useCallback","useEffect","useState","Alert","View","ScrollView","fetchAPI","getChannelThreads","ThreadsList","AsyncStorage","PreferredLanguageText","Discussion","props","Animated","Value","modalAnimation","loading","setLoading","threads","setThreads","unableToLoadDiscussionAlert","checkConnectionAlert","loadThreads","getItem","u","parsedUser","JSON","parse","channelId","server","_id","query","variables","then","res","data","thread","findByChannelId","filteredThreads","toString","trim","channelCreatedBy","filter","isPrivate","userId","setValue","timing","toValue","duration","useNativeDriver","start","catch","err","windowHeight","Dimensions","get","width","height","backgroundColor","borderTopRightRadius","borderTopLeftRadius","opacity","flex","justifyContent","display","flexDirection","stringify","filterChoice","closeModal","refreshUnreadDiscussionCount"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { ActivityIndicator, Animated, Dimensions } from 'react-native';\r\nimport Alert from '../components/Alert'\r\nimport { View } from './Themed';\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport { fetchAPI } from '../graphql/FetchAPI';\r\nimport { getChannelThreads } from '../graphql/QueriesAndMutations';\r\nimport ThreadsList from './ThreadsList';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { PreferredLanguageText } from '../helpers/LanguageContext';\r\n\r\nconst Discussion: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [modalAnimation] = useState(new Animated.Value(1))\r\n    const [loading, setLoading] = useState(true)\r\n    const [threads, setThreads] = useState<any[]>([])\r\n\r\n    const unableToLoadDiscussionAlert = PreferredLanguageText('unableToLoadDiscussion')\r\n    const checkConnectionAlert = PreferredLanguageText('checkConnection')\r\n\r\n    const loadThreads = useCallback(async () => {\r\n\r\n        const u = await AsyncStorage.getItem('user')\r\n        let parsedUser: any = {}\r\n        if (u) {\r\n            parsedUser = JSON.parse(u)\r\n        }\r\n\r\n        setLoading(true)\r\n        if (props.channelId && props.channelId !== '') {\r\n            const server = fetchAPI(parsedUser._id)\r\n            server.query({\r\n                query: getChannelThreads,\r\n                variables: {\r\n                    channelId: props.channelId\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (res.data.thread && res.data.thread.findByChannelId) {\r\n                        let filteredThreads: any[] = []\r\n                        if (parsedUser._id.toString().trim() === props.channelCreatedBy.toString().trim()) {\r\n                            filteredThreads = res.data.thread.findByChannelId;\r\n                        } else {\r\n                            filteredThreads = res.data.thread.findByChannelId.filter((thread: any) => {\r\n                                return !thread.isPrivate || (thread.userId === parsedUser._id)\r\n                            })\r\n                        }\r\n                        setThreads(filteredThreads)\r\n                    }\r\n                    setLoading(false)\r\n                    modalAnimation.setValue(0)\r\n                    Animated.timing(modalAnimation, {\r\n                        toValue: 1,\r\n                        duration: 150,\r\n                        useNativeDriver: true\r\n                    }).start();\r\n                })\r\n                .catch((err) => {\r\n                    Alert(unableToLoadDiscussionAlert, checkConnectionAlert)\r\n                    setLoading(false)\r\n                    modalAnimation.setValue(0)\r\n                    Animated.timing(modalAnimation, {\r\n                        toValue: 1,\r\n                        duration: 150,\r\n                        useNativeDriver: true\r\n                    }).start();\r\n                })\r\n        } else {\r\n            setLoading(false)\r\n            modalAnimation.setValue(0)\r\n            Animated.timing(modalAnimation, {\r\n                toValue: 1,\r\n                duration: 150,\r\n                useNativeDriver: true\r\n            }).start();\r\n        }\r\n    }, [props.channelId, modalAnimation, props.channelCreatedBy])\r\n\r\n    useEffect(() => {\r\n        loadThreads()\r\n    }, [props.channelId])\r\n\r\n    const windowHeight = Dimensions.get('window').width < 1024 ? Dimensions.get('window').height - 30 : Dimensions.get('window').height;\r\n    return (\r\n        <ScrollView style={{\r\n            width: '100%',\r\n            height: windowHeight,\r\n            backgroundColor: 'white',\r\n            borderTopRightRadius: 0,\r\n            borderTopLeftRadius: 0\r\n        }}\r\n            showsVerticalScrollIndicator={false}\r\n            scrollEnabled={true}\r\n            scrollEventThrottle={1}\r\n            keyboardDismissMode={'on-drag'}\r\n            overScrollMode={'never'}\r\n            nestedScrollEnabled={true}\r\n        >\r\n            <Animated.View style={{\r\n                opacity: modalAnimation,\r\n                width: '100%',\r\n                height: windowHeight,\r\n                backgroundColor: 'white',\r\n                borderTopRightRadius: 0,\r\n                borderTopLeftRadius: 0\r\n            }}>\r\n                {\r\n                    loading\r\n                        ? <View style={{\r\n                            width: '100%',\r\n                            flex: 1,\r\n                            justifyContent: 'center',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            backgroundColor: 'white'\r\n                        }}>\r\n                            <ActivityIndicator color={'#a2a2aa'} />\r\n                        </View>\r\n                        :\r\n                        <ThreadsList\r\n                            key={JSON.stringify(threads)}\r\n                            threads={threads}\r\n                            cueId={null}\r\n                            channelName={props.filterChoice}\r\n                            channelId={props.channelId}\r\n                            closeModal={() => {\r\n                                Animated.timing(modalAnimation, {\r\n                                    toValue: 0,\r\n                                    duration: 150,\r\n                                    useNativeDriver: true\r\n                                }).start(() => props.closeModal())\r\n                            }}\r\n                            channelCreatedBy={props.channelCreatedBy}\r\n                            reload={() => loadThreads()}\r\n                            refreshUnreadDiscussionCount={() => props.refreshUnreadDiscussionCount()}\r\n                        />\r\n                }\r\n            </Animated.View>\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nexport default Discussion"]},"metadata":{},"sourceType":"module"}