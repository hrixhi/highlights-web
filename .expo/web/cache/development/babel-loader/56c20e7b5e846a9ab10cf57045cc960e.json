{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\QuizGrading.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { TextInput as CustomTextInput } from \"./CustomTextInput\";\nimport { Text, View } from \"./Themed\";\nimport EquationEditor from 'equation-editor-react';\n\nvar Quiz = function Quiz(props) {\n  var _useState = useState(props.problems),\n      _useState2 = _slicedToArray(_useState, 1),\n      problems = _useState2[0];\n\n  var _useState3 = useState(props.solutions.solutions),\n      _useState4 = _slicedToArray(_useState3, 2),\n      solutions = _useState4[0],\n      setSolutions = _useState4[1];\n\n  var _useState5 = useState(props.solutions.problemScores),\n      _useState6 = _slicedToArray(_useState5, 2),\n      problemScores = _useState6[0],\n      setProblemScores = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      totalPossible = _useState8[0],\n      setTotalPossible = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentScore = _useState10[0],\n      setCurrentScore = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      percentage = _useState12[0],\n      setPercentage = _useState12[1];\n\n  console.log(props);\n  useEffect(function () {\n    var currentScore = 0;\n    props.solutions.problemScores.forEach(function (score) {\n      currentScore += Number(score);\n    });\n    setCurrentScore(currentScore);\n  }, [props.solutions]);\n  useEffect(function () {\n    var total = 0;\n    props.problems.forEach(function (problem) {\n      total += problem.points;\n    });\n    setTotalPossible(total);\n  }, [props.problems]);\n  useEffect(function () {\n    var currentScore = 0;\n    problemScores.forEach(function (score) {\n      currentScore += Number(score);\n    });\n    setCurrentScore(currentScore);\n    if (totalPossible === 0) return;\n    setPercentage((currentScore / totalPossible * 100).toFixed(2));\n  }, [problemScores, totalPossible]);\n  if (props.loading) return React.createElement(View, {\n    style: {\n      width: \"100%\",\n      flex: 1,\n      justifyContent: \"center\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      backgroundColor: \"white\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 32\n    }\n  }, React.createElement(ActivityIndicator, {\n    color: \"#a2a2aa\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }));\n  console.log(problemScores);\n  return React.createElement(View, {\n    style: {\n      width: '100%',\n      height: '100%',\n      backgroundColor: 'white',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0,\n      paddingTop: 15,\n      flexDirection: 'column',\n      justifyContent: 'flex-start'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      width: '100%',\n      flexDirection: 'row'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      width: '25%',\n      fontSize: 15,\n      color: \"#202025\",\n      marginBottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, props.partiallyGraded ? \"Finish Grading\" : \"\"), React.createElement(View, {\n    style: {\n      width: '80%',\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      marginBottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 12,\n      color: \"white\",\n      height: 22,\n      textAlign: 'right',\n      paddingHorizontal: 10,\n      marginLeft: 10,\n      borderRadius: 10,\n      backgroundColor: \"#3B64F8\",\n      lineHeight: 20,\n      paddingTop: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, percentage, \"%\"), React.createElement(Text, {\n    style: {\n      fontSize: 12,\n      color: \"white\",\n      height: 22,\n      textAlign: 'right',\n      paddingHorizontal: 10,\n      marginLeft: 10,\n      borderRadius: 10,\n      backgroundColor: \"#3B64F8\",\n      lineHeight: 20,\n      paddingTop: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, currentScore, \"/\", totalPossible))), props.problems.map(function (problem, index) {\n    console.log(problem.questionType);\n    return React.createElement(View, {\n      style: {\n        borderBottomColor: '#f4f4f6',\n        borderBottomWidth: index === props.problems.length - 1 ? 0 : 1,\n        marginBottom: 25\n      },\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 28\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, React.createElement(View, {\n      style: {\n        paddingTop: 15\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: '#a2a2aa',\n        fontSize: 15,\n        paddingBottom: 25,\n        marginRight: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 33\n      }\n    }, index + 1, \".\")), problem.question && problem.question.includes(\"image:\") ? React.createElement(Image, {\n      resizeMode: 'contain',\n      style: {\n        width: 400,\n        height: 400\n      },\n      source: {\n        uri: problem.question.split(\"image:\")[1]\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 38\n      }\n    }) : problem.question && problem.question.includes(\"formula:\") ? React.createElement(View, {\n      style: {\n        borderColor: '#f4f4f6',\n        borderWidth: 1,\n        borderRadius: 15,\n        padding: 10,\n        width: '50%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 45\n      }\n    }, React.createElement(EquationEditor, {\n      value: problem.question.split(\"formula:\")[1],\n      onChange: function onChange() {\n        return;\n      },\n      autoCommands: \"pi theta sqrt sum prod alpha beta gamma rho int\",\n      autoOperatorNames: \"sin cos tan arccos arcsin arctan\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 49\n      }\n    })) : React.createElement(TextInput, {\n      editable: false,\n      value: problem.question,\n      style: styles.input,\n      placeholder: 'Problem ' + (index + 1).toString(),\n      placeholderTextColor: '#a2a2aa',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 45\n      }\n    }), React.createElement(TextInput, {\n      editable: true,\n      value: problemScores[index],\n      onChange: function onChange(e) {\n        if (Number.isNaN(Number(e.target.value))) return;\n\n        var updateProblemScores = _toConsumableArray(problemScores);\n\n        updateProblemScores[index] = e.target.value;\n        setProblemScores(updateProblemScores);\n      },\n      style: {\n        width: '25%',\n        borderBottomColor: '#f4f4f6',\n        borderBottomWidth: 1,\n        fontSize: 15,\n        padding: 15,\n        paddingTop: 12,\n        paddingBottom: 12,\n        marginTop: 5,\n        marginBottom: 20\n      },\n      placeholder: 'Enter points',\n      placeholderTextColor: '#a2a2aa',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }), React.createElement(TextInput, {\n      editable: false,\n      value: \"/ \" + problem.points + ' Points',\n      style: {\n        width: '25%',\n        fontSize: 15,\n        padding: 15,\n        paddingTop: 12,\n        paddingBottom: 12,\n        marginTop: 5,\n        marginBottom: 20\n      },\n      placeholder: 'Enter points',\n      placeholderTextColor: '#a2a2aa',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    })), !problem.questionType && problem.options.map(function (option, i) {\n      var color = '#202025';\n\n      if (option.isCorrect) {\n        color = '#3B64F8';\n      } else if (!option.isCorrect && solutions[index].selected[i].isSelected) {\n        color = '#D91D56';\n      }\n\n      return React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        key: solutions.toString() + i.toString(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 40\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingTop: 15\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 37\n        }\n      }, React.createElement(\"input\", {\n        disabled: true,\n        style: {\n          paddingRight: 20\n        },\n        type: \"checkbox\",\n        checked: solutions[index].selected[i].isSelected,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 41\n        }\n      })), option.option && option.option.includes(\"image:\") ? React.createElement(Image, {\n        resizeMode: 'contain',\n        style: {\n          width: 200,\n          height: 200\n        },\n        source: {\n          uri: option.option.split(\"image:\")[1]\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 46\n        }\n      }) : option.option && option.option.includes(\"formula:\") ? React.createElement(View, {\n        style: {\n          borderColor: '#f4f4f6',\n          borderWidth: 1,\n          borderRadius: 15,\n          padding: 10,\n          width: '30%'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 53\n        }\n      }, React.createElement(EquationEditor, {\n        value: option.option.split(\"formula:\")[1],\n        onChange: function onChange() {\n          return;\n        },\n        autoCommands: \"pi theta sqrt sum prod alpha beta gamma rho int\",\n        autoOperatorNames: \"sin cos tan arccos arcsin arctan\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 57\n        }\n      })) : React.createElement(TextInput, {\n        editable: false,\n        value: option.option,\n        style: {\n          width: '50%',\n          fontSize: 15,\n          padding: 15,\n          paddingTop: 12,\n          paddingBottom: 12,\n          marginTop: 5,\n          marginBottom: 20,\n          color: color\n        },\n        placeholder: 'Option ' + (i + 1).toString(),\n        placeholderTextColor: '#a2a2aa',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 53\n        }\n      }));\n    }), problem.questionType === \"freeResponse\" ? React.createElement(View, {\n      style: {\n        width: '80%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 29\n      }\n    }, React.createElement(CustomTextInput, {\n      editable: false,\n      value: solutions[index].response,\n      placeholder: \"Answer\",\n      hasMultipleLines: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 33\n      }\n    })) : null);\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white',\n      justifyContent: 'center',\n      display: 'flex',\n      flexDirection: 'row',\n      marginTop: 25,\n      marginBottom: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return props.onGradeQuiz(problemScores, Number(percentage));\n    },\n    style: {\n      backgroundColor: 'white',\n      borderRadius: 15,\n      overflow: 'hidden',\n      height: 35\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      lineHeight: 35,\n      color: 'white',\n      fontSize: 12,\n      backgroundColor: '#3B64F8',\n      paddingHorizontal: 25,\n      fontFamily: 'inter',\n      height: 35\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\"))));\n};\n\nexport default Quiz;\nvar styles = StyleSheet.create({\n  input: {\n    width: '50%',\n    fontSize: 15,\n    padding: 15,\n    paddingTop: 12,\n    paddingBottom: 12,\n    marginTop: 5,\n    marginBottom: 20\n  }\n});","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/QuizGrading.tsx"],"names":["React","useEffect","useState","TextInput","CustomTextInput","Text","View","EquationEditor","Quiz","props","problems","solutions","setSolutions","problemScores","setProblemScores","totalPossible","setTotalPossible","currentScore","setCurrentScore","percentage","setPercentage","console","log","forEach","score","Number","total","problem","points","toFixed","loading","width","flex","justifyContent","display","flexDirection","backgroundColor","height","borderTopLeftRadius","borderTopRightRadius","paddingTop","fontSize","color","marginBottom","partiallyGraded","textAlign","paddingHorizontal","marginLeft","borderRadius","lineHeight","map","index","questionType","borderBottomColor","borderBottomWidth","length","paddingBottom","marginRight","question","includes","uri","split","borderColor","borderWidth","padding","styles","input","toString","e","isNaN","target","value","updateProblemScores","marginTop","options","option","i","isCorrect","selected","isSelected","paddingRight","response","onGradeQuiz","overflow","fontFamily","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Image, StyleSheet, TextInput, ActivityIndicator, TouchableOpacity } from 'react-native';\r\nimport { TextInput as CustomTextInput } from './CustomTextInput'\r\nimport { Text, View } from './Themed';\r\nimport EquationEditor from 'equation-editor-react';\r\n\r\n\r\nconst Quiz: React.FunctionComponent<{ [label: string]: any }> = (props: any) => {\r\n\r\n    const [problems] = useState<any[]>(props.problems)\r\n    const [solutions, setSolutions] = useState<any[]>(props.solutions.solutions)\r\n    const [problemScores, setProblemScores] = useState<any[]>(props.solutions.problemScores)\r\n\r\n    const [totalPossible, setTotalPossible] = useState(0);\r\n    const [currentScore, setCurrentScore] = useState(0);\r\n    const [percentage, setPercentage] = useState(\"\");\r\n\r\n    console.log(props);\r\n    \r\n    useEffect(() => {\r\n        let currentScore = 0;\r\n        props.solutions.problemScores.forEach((score: any) => {\r\n            currentScore += Number(score)\r\n        })\r\n        setCurrentScore(currentScore);\r\n    }, [props.solutions])\r\n\r\n    useEffect(() => {\r\n        let total = 0;\r\n        props.problems.forEach((problem: any) => {\r\n            total += problem.points;\r\n        })\r\n        setTotalPossible(total);\r\n    }, [props.problems])\r\n\r\n    useEffect(() => {\r\n        let currentScore = 0;\r\n        problemScores.forEach((score: any) => {\r\n            currentScore += Number(score)\r\n        })\r\n\r\n        setCurrentScore(currentScore);\r\n\r\n        if (totalPossible === 0) return;\r\n\r\n        setPercentage(((currentScore/totalPossible)*100).toFixed(2))\r\n\r\n    }, [problemScores, totalPossible])\r\n\r\n    if (props.loading) return (<View\r\n        style={{\r\n            width: \"100%\",\r\n            flex: 1,\r\n            justifyContent: \"center\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            backgroundColor: \"white\"\r\n        }}>\r\n        <ActivityIndicator color={\"#a2a2aa\"} />\r\n    </View>)\r\n\r\n    console.log(problemScores);\r\n\r\n    return (\r\n        <View style={{\r\n            width: '100%', height: '100%', backgroundColor: 'white',\r\n            borderTopLeftRadius: 0,\r\n            borderTopRightRadius: 0,\r\n            paddingTop: 15,\r\n            flexDirection: 'column',\r\n            justifyContent: 'flex-start'\r\n        }}\r\n        >\r\n            <View style={{ width: '100%', flexDirection: 'row' }}>\r\n                <Text style={{ width: '25%', fontSize: 15, color: \"#202025\", marginBottom: 10  }}>\r\n                    {props.partiallyGraded ? \"Finish Grading\" : \"\" }\r\n                </Text>\r\n                <View style={{ width: '80%', flexDirection: 'row', justifyContent: 'flex-end', marginBottom: 10  }}>\r\n                    <Text\r\n                        style={{\r\n                            fontSize: 12,\r\n                            color: \"white\",\r\n                            height: 22,\r\n                            textAlign: 'right',\r\n                            paddingHorizontal: 10,\r\n                            marginLeft: 10,\r\n                            borderRadius: 10,\r\n                            backgroundColor: \"#3B64F8\",\r\n                            lineHeight: 20,\r\n                            paddingTop: 1\r\n                        }}>\r\n                        {percentage}%\r\n                    </Text>\r\n                    <Text\r\n                        style={{\r\n                            fontSize: 12,\r\n                            color: \"white\",\r\n                            height: 22,\r\n                            textAlign: 'right',\r\n                            paddingHorizontal: 10,\r\n                            marginLeft: 10,\r\n                            borderRadius: 10,\r\n                            backgroundColor: \"#3B64F8\",\r\n                            lineHeight: 20,\r\n                            paddingTop: 1\r\n                        }}>\r\n                        {currentScore}/{totalPossible}\r\n                    </Text>\r\n                </View>\r\n                \r\n            </View>\r\n            \r\n            {\r\n                props.problems.map((problem: any, index: any) => {\r\n                    console.log(problem.questionType)\r\n                    return <View style={{ borderBottomColor: '#f4f4f6', borderBottomWidth: index === (props.problems.length - 1) ? 0 : 1, marginBottom: 25 }} key={index}>\r\n                        <View style={{ flexDirection: 'row' }}>\r\n                            <View style={{ paddingTop: 15 }}>\r\n                                <Text style={{ color: '#a2a2aa', fontSize: 15, paddingBottom: 25, marginRight: 10 }}>\r\n                                    {index + 1}.\r\n                                </Text>\r\n                            </View>\r\n                            {\r\n                                problem.question && problem.question.includes(\"image:\") ?\r\n                                    (<Image\r\n                                        resizeMode={'contain'}\r\n                                        style={{\r\n                                            width: 400,\r\n                                            height: 400\r\n                                        }}\r\n                                        source={{\r\n                                            uri: problem.question.split(\"image:\")[1]\r\n                                        }}\r\n                                    />) :\r\n                                    (\r\n                                        problem.question && problem.question.includes(\"formula:\") ? (\r\n                                            <View style={{\r\n                                                borderColor: '#f4f4f6',\r\n                                                borderWidth: 1,\r\n                                                borderRadius: 15,\r\n                                                padding: 10,\r\n                                                width: '50%'\r\n                                            }}>\r\n                                                <EquationEditor\r\n                                                    value={problem.question.split(\"formula:\")[1]}\r\n                                                    onChange={() => { return; }}\r\n                                                    autoCommands=\"pi theta sqrt sum prod alpha beta gamma rho int\"\r\n                                                    autoOperatorNames=\"sin cos tan arccos arcsin arctan\"\r\n                                                />\r\n                                            </View>\r\n                                        ) :\r\n                                            <TextInput\r\n                                                editable={false}\r\n                                                value={problem.question}\r\n                                                style={styles.input}\r\n                                                placeholder={'Problem ' + (index + 1).toString()}\r\n                                                placeholderTextColor={'#a2a2aa'}\r\n                                            />\r\n                                    )\r\n                            }\r\n                            <TextInput\r\n                                editable={true}\r\n                                value={problemScores[index]}\r\n                                onChange={(e: any) => {\r\n                                    // console.log(Number.isNaN(e.target.value))\r\n                                    if (Number.isNaN(Number(e.target.value))) return\r\n                                    const updateProblemScores = [...problemScores]\r\n                                    updateProblemScores[index] = e.target.value;\r\n                                    setProblemScores(updateProblemScores)\r\n                                }}\r\n                                style={{\r\n                                    width: '25%',\r\n                                    borderBottomColor: '#f4f4f6',\r\n                                    borderBottomWidth: 1,\r\n                                    fontSize: 15,\r\n                                    padding: 15,\r\n                                    paddingTop: 12,\r\n                                    paddingBottom: 12,\r\n                                    marginTop: 5,\r\n                                    marginBottom: 20\r\n                                }}\r\n                                placeholder={'Enter points'}\r\n                                placeholderTextColor={'#a2a2aa'}\r\n                            />\r\n                            <TextInput\r\n                                editable={false}\r\n                                value={\"/ \" + problem.points + ' Points'}\r\n                                style={{\r\n                                    width: '25%',\r\n                                    fontSize: 15,\r\n                                    padding: 15,\r\n                                    paddingTop: 12,\r\n                                    paddingBottom: 12,\r\n                                    marginTop: 5,\r\n                                    marginBottom: 20\r\n                                }}\r\n                                placeholder={'Enter points'}\r\n                                placeholderTextColor={'#a2a2aa'}\r\n                            />\r\n                        </View>\r\n                        {\r\n                            !problem.questionType && problem.options.map((option: any, i: any) => {\r\n\r\n                                let color = '#202025'\r\n                                if (option.isCorrect) {\r\n                                    color = '#3B64F8'\r\n                                } else if (!option.isCorrect && solutions[index].selected[i].isSelected)  {\r\n                                    color = '#D91D56'\r\n                                }\r\n\r\n\r\n                                return <View style={{ flexDirection: 'row' }} key={solutions.toString() + i.toString()}>\r\n                                    <View style={{ paddingTop: 15 }}>\r\n                                        <input\r\n                                            disabled={true}\r\n                                            style={{ paddingRight: 20 }}\r\n                                            type='checkbox'\r\n                                            // value={props.isOwner ? String(option.isCorrect) : String(solutions[index].selected[i].isSelected)}\r\n                                            checked={solutions[index].selected[i].isSelected}\r\n                                            // onChange={(e) => {\r\n                                            //     const updatedSolution = [...solutions]\r\n                                            //     updatedSolution[index].selected[i].isSelected = !updatedSolution[index].selected[i].isSelected;\r\n                                            //     setSolutions(updatedSolution)\r\n                                            //     props.setSolutions(updatedSolution)\r\n                                            // }}\r\n                                        />\r\n                                    </View>\r\n                                    {\r\n                                        option.option && option.option.includes(\"image:\") ?\r\n                                            (<Image\r\n                                                resizeMode={'contain'}\r\n                                                style={{\r\n                                                    width: 200,\r\n                                                    height: 200\r\n                                                }}\r\n                                                source={{\r\n                                                    uri: option.option.split(\"image:\")[1]\r\n                                                }}\r\n                                            />) :\r\n                                            (\r\n                                                option.option && option.option.includes(\"formula:\") ?\r\n                                                    <View style={{\r\n                                                        borderColor: '#f4f4f6',\r\n                                                        borderWidth: 1,\r\n                                                        borderRadius: 15,\r\n                                                        padding: 10,\r\n                                                        width: '30%'\r\n                                                    }}>\r\n                                                        <EquationEditor\r\n                                                            value={option.option.split(\"formula:\")[1]}\r\n                                                            onChange={() => { return; }}\r\n                                                            autoCommands=\"pi theta sqrt sum prod alpha beta gamma rho int\"\r\n                                                            autoOperatorNames=\"sin cos tan arccos arcsin arctan\"\r\n                                                        />\r\n                                                    </View> :\r\n                                                    <TextInput\r\n                                                        editable={false}\r\n                                                        value={option.option}\r\n                                                        style={{\r\n                                                            width: '50%',\r\n                                                            fontSize: 15,\r\n                                                            padding: 15,\r\n                                                            paddingTop: 12,\r\n                                                            paddingBottom: 12,\r\n                                                            marginTop: 5,\r\n                                                            marginBottom: 20,\r\n                                                            color\r\n                                                        }}\r\n                                                        placeholder={'Option ' + (i + 1).toString()}\r\n                                                        placeholderTextColor={'#a2a2aa'}\r\n                                                    />\r\n                                            )\r\n                                    }\r\n                                </View>\r\n                            })\r\n                        }\r\n                        {\r\n                            problem.questionType === \"freeResponse\" ? \r\n\r\n                            <View style={{ width: '80%',  }}>\r\n                                <CustomTextInput \r\n                                    editable={false}\r\n                                    value={solutions[index].response}\r\n                                    placeholder='Answer'\r\n                                    hasMultipleLines={true}\r\n\r\n                                />\r\n                            \r\n                            </View>\r\n                            :\r\n                            null\r\n\r\n                        }\r\n                    </View>\r\n                })\r\n            }\r\n\r\n\r\n            {/* Add Submit button here */}\r\n            <View\r\n                style={{\r\n                    flex: 1,\r\n                    backgroundColor: 'white',\r\n                    justifyContent: 'center',\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    marginTop: 25,\r\n                    marginBottom: 25\r\n                }}>\r\n                <TouchableOpacity\r\n                    onPress={() => props.onGradeQuiz(problemScores, Number(percentage))}\r\n                    style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: 15,\r\n                        overflow: 'hidden',\r\n                        height: 35,\r\n                    }}>\r\n                    <Text style={{\r\n                        textAlign: 'center',\r\n                        lineHeight: 35,\r\n                        color: 'white',\r\n                        fontSize: 12,\r\n                        backgroundColor: '#3B64F8',\r\n                        paddingHorizontal: 25,\r\n                        fontFamily: 'inter',\r\n                        height: 35,\r\n                    }}>\r\n                        SUBMIT \r\n                    </Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </View >\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n\r\nconst styles = StyleSheet.create({\r\n    input: {\r\n        width: '50%',\r\n        // borderBottomColor: '#f4f4f6',\r\n        // borderBottomWidth: 1,\r\n        fontSize: 15,\r\n        padding: 15,\r\n        paddingTop: 12,\r\n        paddingBottom: 12,\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}