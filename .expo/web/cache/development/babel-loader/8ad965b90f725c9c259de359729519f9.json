{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\p_projects\\\\highlights-web\\\\components\\\\Themed.tsx\";\nimport * as React from 'react';\nimport DefaultText from \"react-native-web/dist/exports/Text\";\nimport DefaultView from \"react-native-web/dist/exports/View\";\nimport DefaultTouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nexport function useThemeColor(props, colorName) {\n  var theme = useColorScheme();\n  var colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\nexport function Text(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, [\"style\", \"lightColor\", \"darkColor\"]);\n\n  var color = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'text');\n  return React.createElement(DefaultText, _extends({\n    style: [{\n      color: color,\n      fontFamily: 'overpass'\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }\n  }));\n}\nexport function View(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, [\"style\", \"lightColor\", \"darkColor\"]);\n\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'background');\n  return React.createElement(DefaultView, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }\n  }));\n}\nexport function TouchableOpacity(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, [\"style\", \"lightColor\", \"darkColor\"]);\n\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'background');\n  return React.createElement(DefaultTouchableOpacity, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  }));\n}","map":{"version":3,"sources":["D:/p_projects/highlights-web/components/Themed.tsx"],"names":["React","Colors","useColorScheme","useThemeColor","props","colorName","theme","colorFromProps","Text","style","lightColor","darkColor","otherProps","color","light","dark","fontFamily","View","backgroundColor","TouchableOpacity"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAMA,OAAOC,MAAP;AACA,OAAOC,cAAP;AAEA,OAAO,SAASC,aAAT,CACLC,KADK,EAELC,SAFK,EAGL;AACA,MAAMC,KAAK,GAAGJ,cAAc,EAA5B;AACA,MAAMK,cAAc,GAAGH,KAAK,CAACE,KAAD,CAA5B;;AAEA,MAAIC,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD,GAFD,MAEO;AACL,WAAON,MAAM,CAACK,KAAD,CAAN,CAAcD,SAAd,CAAP;AACD;AACF;AAQD,OAAO,SAASG,IAAT,CAAcJ,KAAd,EAAgC;AAAA,MAC7BK,KAD6B,GACmBL,KADnB,CAC7BK,KAD6B;AAAA,MACtBC,UADsB,GACmBN,KADnB,CACtBM,UADsB;AAAA,MACVC,SADU,GACmBP,KADnB,CACVO,SADU;AAAA,MACIC,UADJ,4BACmBR,KADnB;;AAErC,MAAMS,KAAK,GAAGV,aAAa,CAAC;AAAEW,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,MAAzC,CAA3B;AAEA,SAAO,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEE,MAAAA,KAAK,EAALA,KAAF;AAASG,MAAAA,UAAU,EAAE;AAArB,KAAD,EAAoCP,KAApC;AAApB,KAAoEG,UAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AACD,OAAO,SAASK,IAAT,CAAcb,KAAd,EAAgC;AAAA,MAC7BK,KAD6B,GACmBL,KADnB,CAC7BK,KAD6B;AAAA,MACtBC,UADsB,GACmBN,KADnB,CACtBM,UADsB;AAAA,MACVC,SADU,GACmBP,KADnB,CACVO,SADU;AAAA,MACIC,UADJ,4BACmBR,KADnB;;AAErC,MAAMc,eAAe,GAAGf,aAAa,CAAC;AAAEW,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,YAAzC,CAArC;AAEA,SAAO,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEO,MAAAA,eAAe,EAAfA;AAAF,KAAD,EAAsBT,KAAtB;AAApB,KAAsDG,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AACD,OAAO,SAASO,gBAAT,CAA0Bf,KAA1B,EAAwD;AAAA,MACrDK,KADqD,GACLL,KADK,CACrDK,KADqD;AAAA,MAC9CC,UAD8C,GACLN,KADK,CAC9CM,UAD8C;AAAA,MAClCC,SADkC,GACLP,KADK,CAClCO,SADkC;AAAA,MACpBC,UADoB,4BACLR,KADK;;AAE7D,MAAMc,eAAe,GAAGf,aAAa,CAAC;AAAEW,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,YAAzC,CAArC;AAEA,SAAO,oBAAC,uBAAD;AAAyB,IAAA,KAAK,EAAE,CAAC;AAAEO,MAAAA,eAAe,EAAfA;AAAF,KAAD,EAAsBT,KAAtB;AAAhC,KAAkEG,UAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Text as DefaultText,\r\n  View as DefaultView,\r\n  TouchableOpacity as DefaultTouchableOpacity\r\n} from 'react-native';\r\nimport Colors from '../constants/Colors';\r\nimport useColorScheme from '../hooks/useColorScheme';\r\n\r\nexport function useThemeColor(\r\n  props: { light?: string; dark?: string },\r\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\r\n) {\r\n  const theme = useColorScheme();\r\n  const colorFromProps = props[theme];\r\n\r\n  if (colorFromProps) {\r\n    return colorFromProps;\r\n  } else {\r\n    return Colors[theme][colorName];\r\n  }\r\n}\r\ntype ThemeProps = {\r\n  lightColor?: string;\r\n  darkColor?: string;\r\n};\r\nexport type TextProps = ThemeProps & DefaultText['props'];\r\nexport type ViewProps = ThemeProps & DefaultView['props'];\r\nexport type TouchableOpacityProps = ThemeProps & DefaultTouchableOpacity['props'];\r\nexport function Text(props: TextProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\r\n\r\n  return <DefaultText style={[{ color, fontFamily: 'overpass' }, style]} {...otherProps} />;\r\n}\r\nexport function View(props: ViewProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\r\n\r\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\r\n}\r\nexport function TouchableOpacity(props: TouchableOpacityProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\r\n\r\n  return <DefaultTouchableOpacity style={[{ backgroundColor }, style]} {...otherProps} />;\r\n}"]},"metadata":{},"sourceType":"module"}